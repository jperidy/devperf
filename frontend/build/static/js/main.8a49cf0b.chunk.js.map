{"version":3,"sources":["constants/pxxConstants.js","constants/userConstants.js","constants/consultantConstants.js","constants/skillsConstants.js","constants/dealConstants.js","constants/accessConstants.js","constants/clientConstants.js","constants/taceConstants.js","constants/emailConstants.js","store.js","reducers/userReducers.js","reducers/consultantReducers.js","reducers/pxxReducers.js","reducers/skillReducers.js","reducers/dealReducer.js","reducers/accessReducers.js","reducers/clientReducers.js","reducers/taceReducer.js","reducers/emailReducers.js","actions/userActions.js","components/DisplayChildren.js","components/Header.js","components/Footer.js","components/Message.js","components/Loader.js","components/FormContainer.js","screens/LoginScreen.js","actions/pxxActions.js","components/PxxUserLine.js","components/PxxEditor.js","components/DropDownTitleContainer.js","actions/consultantActions.js","components/ConsultantsTab.js","components/Meta.js","components/ViewStaffs.js","actions/dealActions.js","components/ViewOldStaffs.js","components/Rating.js","components/SkillsDetails.js","screens/PxxEditScreen.js","screens/ConsultantEditScreen.js","components/ImportExcelFile.js","components/FlowImportWKConsultants.js","screens/ManageConsultantScreen.js","screens/ManageUsersScreen.js","actions/accessActions.js","screens/UserEditScreen.js","screens/RegisterScreen.js","components/StaffAConsultant.js","components/SelectInput.js","actions/skillActions.js","components/ConsoDispo.js","components/Tace.js","actions/taceActions.js","screens/DashboardScreen.js","actions/clientActions.js","components/SelectCompany.js","screens/StaffingEditScreen.js","screens/ManageSkillsScreen.js","components/FlowImportPxx.js","screens/PxxDetailsScreen.js","components/DealList.js","screens/ManageDealsScreen.js","screens/DealsHistoryScreen.js","screens/AccessEditScreen.js","screens/ManageCompaniesScreen.js","screens/EnvoyerMailsScreen.js","actions/emailActions.js","screens/ProfileScreen.js","App.js","serviceWorker.js","index.js"],"names":["PXX_MY_TO_EDIT_REQUEST","PXX_MY_TO_EDIT_SUCCESS","PXX_MY_TO_EDIT_FAIL","PXX_MY_TO_EDIT_RESET","PXX_UPDATE_REQUEST","PXX_UPDATE_SUCCESS","PXX_UPDATE_FAIL","PXX_UPDATE_RESET","PXX_LIST_REQUEST","PXX_LIST_SUCCESS","PXX_LIST_FAIL","PXX_LIST_RESET","PXX_TACE_REQUEST","PXX_TACE_SUCCESS","PXX_TACE_FAIL","PXX_TACE_RESET","PXX_AVAILABILITIES_REQUEST","PXX_AVAILABILITIES_SUCCESS","PXX_AVAILABILITIES_FAIL","PXX_AVAILABILITIES_RESET","PXX_ALL_REQUEST","PXX_ALL_SUCCESS","PXX_ALL_FAIL","PXX_ALL_RESET","PXX_IMPORT_LINE_REQUEST","PXX_IMPORT_LINE_SUCCESS","PXX_IMPORT_LINE_FAIL","PXX_IMPORT_LINE_RESET","PXX_UPLOAD_FILE_REQUEST","PXX_UPLOAD_FILE_SUCCESS","PXX_UPLOAD_FILE_FAIL","PXX_UPLOAD_FILE_RESET","PXX_UPDATE_PXX_REQUEST","PXX_UPDATE_PXX_SUCCESS","PXX_UPDATE_PXX_FAIL","PXX_UPDATE_PXX_RESET","USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGIN_FAIL","USER_LOGOUT","USER_REDIRECT_AZ_REQUEST","USER_REDIRECT_AZ_SUCCESS","USER_REDIRECT_AZ_FAIL","USER_REDIRECT_AZ_RESET","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_REGISTER_FAIL","USER_REGISTER_RESET","USER_DETAILS_REQUEST","USER_DETAILS_SUCCESS","USER_DETAILS_FAIL","USER_DETAILS_RESET","USER_UPDATE_PROFILE_REQUEST","USER_UPDATE_PROFILE_SUCCESS","USER_UPDATE_PROFILE_FAIL","USER_UPDATE_PROFILE_RESET","USER_LIST_REQUEST","USER_LIST_SUCCESS","USER_LIST_FAIL","USER_LIST_RESET","USER_DELETE_REQUEST","USER_DELETE_SUCCESS","USER_DELETE_FAIL","USER_DELETE_RESET","USER_UPDATE_REQUEST","USER_UPDATE_SUCCESS","USER_UPDATE_FAIL","USER_UPDATE_RESET","USER_STATUS","CONSULTANTS_MY_DETAILS_REQUEST","CONSULTANTS_MY_DETAILS_SUCCESS","CONSULTANTS_MY_DETAILS_FAIL","CONSULTANTS_MY_DETAILS_FOCUS","CONSULTANTS_MY_DETAILS_RESET","CONSULTANTS_ALL_ADMIN_DETAILS_REQUEST","CONSULTANTS_ALL_ADMIN_DETAILS_SUCCESS","CONSULTANTS_ALL_ADMIN_DETAILS_FAIL","CONSULTANTS_ALL_ADMIN_DETAILS_RESET","CONSULTANTS_ALL_LEADERS_REQUEST","CONSULTANTS_ALL_LEADERS_SUCCESS","CONSULTANTS_ALL_LEADERS_FAIL","CONSULTANTS_ALL_LEADERS_RESET","CONSULTANT_MY_REQUEST","CONSULTANT_MY_SUCCESS","CONSULTANT_MY_FAIL","CONSULTANT_MY_RESET","CONSULTANT_DELEGATE_UPDATE_REQUEST","CONSULTANT_DELEGATE_UPDATE_SUCCESS","CONSULTANT_DELEGATE_UPDATE_FAIL","CONSULTANT_DELEGATE_UPDATE_RESET","CONSULTANT_MY_UPDATE_REQUEST","CONSULTANT_MY_UPDATE_SUCCESS","CONSULTANT_MY_UPDATE_FAIL","CONSULTANT_MY_UPDATE_RESET","CONSULTANT_CREATE_REQUEST","CONSULTANT_CREATE_SUCCESS","CONSULTANT_CREATE_FAIL","CONSULTANT_CREATE_RESET","CONSULTANT_DELETE_REQUEST","CONSULTANT_DELETE_SUCCESS","CONSULTANT_DELETE_FAIL","CONSULTANT_DELETE_RESET","CONSULTANT_CDM_LIST_REQUEST","CONSULTANT_CDM_LIST_SUCCESS","CONSULTANT_CDM_LIST_FAIL","CONSULTANT_CDM_LIST_RESET","CONSULTANT_PRACTICE_LIST_REQUEST","CONSULTANT_PRACTICE_LIST_SUCCESS","CONSULTANT_PRACTICE_LIST_FAIL","CONSULTANT_PRACTICE_LIST_RESET","CONSULTANT_UPDATE_COMMENT_REQUEST","CONSULTANT_UPDATE_COMMENT_SUCCESS","CONSULTANT_UPDATE_COMMENT_FAIL","CONSULTANT_UPDATE_COMMENT_RESET","CONSULTANT_CDM_REQUEST","CONSULTANT_CDM_SUCCESS","CONSULTANT_CDM_FAIL","CONSULTANT_CDM_RESET","CONSULTANT_SKILLS_REQUEST","CONSULTANT_SKILLS_SUCCESS","CONSULTANT_SKILLS_FAIL","CONSULTANT_SKILLS_RESET","CONSULTANT_ALL_SKILLS_REQUEST","CONSULTANT_ALL_SKILLS_SUCCESS","CONSULTANT_ALL_SKILLS_FAIL","CONSULTANT_ALL_SKILLS_RESET","CONSULTANT_ALL_STAFF_REQUEST","CONSULTANT_ALL_STAFF_SUCCESS","CONSULTANT_ALL_STAFF_FAIL","CONSULTANT_ALL_STAFF_RESET","CONSULTANT_ADD_SKILL_REQUEST","CONSULTANT_ADD_SKILL_SUCCESS","CONSULTANT_ADD_SKILL_FAIL","CONSULTANT_ADD_SKILL_RESET","CONSULTANT_DELETE_SKILL_REQUEST","CONSULTANT_DELETE_SKILL_SUCCESS","CONSULTANT_DELETE_SKILL_FAIL","CONSULTANT_DELETE_SKILL_RESET","CONSULTANT_UPDATE_SKILL_REQUEST","CONSULTANT_UPDATE_SKILL_SUCCESS","CONSULTANT_UPDATE_SKILL_FAIL","CONSULTANT_UPDATE_SKILL_RESET","CONSULTANT_MASS_IMPORT_REQUEST","CONSULTANT_MASS_IMPORT_SUCCESS","CONSULTANT_MASS_IMPORT_FAIL","CONSULTANT_MASS_IMPORT_RESET","CONSULTANT_UPLOAD_WK_REQUEST","CONSULTANT_UPLOAD_WK_SUCCESS","CONSULTANT_UPLOAD_WK_FAIL","CONSULTANT_UPLOAD_WK_RESET","CONSULTANT_UPDATE_WK_REQUEST","CONSULTANT_UPDATE_WK_SUCCESS","CONSULTANT_UPDATE_WK_FAIL","CONSULTANT_UPDATE_WK_RESET","CONSULTANT_GRADE","SKILL_LIST_REQUEST","SKILL_LIST_SUCCESS","SKILL_LIST_FAIL","SKILL_LIST_RESET","SKILL_DELETE_REQUEST","SKILL_DELETE_SUCCESS","SKILL_DELETE_FAIL","SKILL_DELETE_RESET","SKILL_CREATE_REQUEST","SKILL_CREATE_SUCCESS","SKILL_CREATE_FAIL","SKILL_CREATE_RESET","DEAL_CREATE_REQUEST","DEAL_CREATE_SUCCESS","DEAL_CREATE_FAIL","DEAL_CREATE_RESET","DEAL_UPDATE_REQUEST","DEAL_UPDATE_SUCCESS","DEAL_UPDATE_FAIL","DEAL_UPDATE_RESET","DEAL_ALL_LIST_REQUEST","DEAL_ALL_LIST_SUCCESS","DEAL_ALL_LIST_FAIL","DEAL_ALL_LIST_RESET","DEAL_DELETE_REQUEST","DEAL_DELETE_SUCCESS","DEAL_DELETE_FAIL","DEAL_DELETE_RESET","DEAL_EDIT_REQUEST","DEAL_EDIT_SUCCESS","DEAL_EDIT_FAIL","DEAL_EDIT_RESET","DEAL_OLD_REQUEST","DEAL_OLD_SUCCESS","DEAL_OLD_FAIL","DEAL_OLD_RESET","DEAL_MASS_IMPORT_REQUEST","DEAL_MASS_IMPORT_SUCCESS","DEAL_MASS_IMPORT_FAIL","DEAL_MASS_IMPORT_RESET","REQUEST_STATUS","name","staff","priority","TYPE_BUSINESS","DEAL_STATUS","display","DEAL_PROBABILITY","ACCESS_LIST_REQUEST","ACCESS_LIST_SUCCESS","ACCESS_LIST_FAIL","ACCESS_LIST_RESET","ACCESS_UPDATE_FRONTACCESS_REQUEST","ACCESS_UPDATE_FRONTACCESS_SUCCESS","ACCESS_UPDATE_FRONTACCESS_FAIL","ACCESS_UPDATE_FRONTACCESS_RESET","ACCESS_MODES","ACCESS_DATAS","CLIENT_ALL_REQUEST","CLIENT_ALL_SUCCESS","CLIENT_ALL_FAIL","CLIENT_ALL_RESET","CLIENT_CREATE_REQUEST","CLIENT_CREATE_SUCCESS","CLIENT_CREATE_FAIL","CLIENT_CREATE_RESET","CLIENT_UPDATE_REQUEST","CLIENT_UPDATE_SUCCESS","CLIENT_UPDATE_FAIL","CLIENT_UPDATE_RESET","CLIENT_DELETE_REQUEST","CLIENT_DELETE_SUCCESS","CLIENT_DELETE_FAIL","CLIENT_DELETE_RESET","TACE_CREATE_REQUEST","TACE_CREATE_SUCCESS","TACE_CREATE_FAIL","TACE_CREATE_RESET","EMAIL_CONTACTS_LIST_REQUEST","EMAIL_CONTACTS_LIST_SUCCESS","EMAIL_CONTACTS_LIST_FAIL","EMAIL_CONTACTS_LIST_RESET","EMAIL_SEND_DECISION_REQUEST","EMAIL_SEND_DECISION_SUCCESS","EMAIL_SEND_DECISION_FAIL","EMAIL_SEND_DECISION_RESET","reducer","combineReducers","userRegister","state","action","type","loading","userInfo","payload","error","userLogin","userRedirectAz","redirectURL","userList","users","pages","page","count","userDetails","user","userUpdate","success","userDelete","userUpdateProfil","consultantUpdateComment","consultantsMyAdminList","consultantsMyAdmin","consultants","consultantsMyList","focus","consultantsMy","consultantMy","consultant","consultantMyUpdate","consultantCreate","consultantCreated","consultantDelete","consultantCDMList","cdmList","consultantDelegateUpdate","consultantPracticeList","practiceList","consultantSkills","skills","consultantAllSkills","consultantAllStaffs","staffings","consultantAddSkill","consultantDeleteSkill","consultantUpdateSkill","consultantGetCdm","cdm","consultantsAllLeaders","leaderslist","consultantsMassImport","consultantUploadWk","path","consultantUpdateWk","message","pxxList","pxxs","pxxMonthInformation","pxxUserList","pxxAllList","pxxMyToEdit","pxx","pxxUpdate","pxxTACE","tace","pxxAvailabilities","availabilities","updatePxx","pxxImportLine","updatedLine","pxxUploadFile","skillList","skillDelete","skillCreate","dealCreate","createId","dealAllList","deals","dealDelete","dealEdit","deal","dealUpdate","dealOld","oldDeals","dealsImportMass","datas","accessList","access","accessFrontUpdate","clientAll","clients","clientCreate","clientUpdate","clientDelete","createTace","taceData","contactsList","contacts","sendOneEmail","email","initialState","localStorage","getItem","JSON","parse","middleware","thunk","store","createStore","composeWithDevTools","applyMiddleware","login","param","dispatch","a","config","headers","data","axios","post","password","get","code","accountType","setItem","stringify","response","getUserDetails","id","getState","Authorization","token","listUsers","practice","keyword","pageNumber","pageSize","DisplayChildren","children","useSelector","grantedAccess","rule","profil","frontAccess","filter","x","length","mode","Header","instance","useMsal","useDispatch","Navbar","bg","variant","expand","collapseOnSelect","fixed","Container","to","Brand","Toggle","aria-controls","Collapse","Nav","className","Link","NavDropdown","title","Item","Divider","onClick","clear","logoutType","logoutPopup","logoutRedirect","Footer","Row","Col","Message","Alert","defaultProps","Loader","Spinner","animation","role","stype","width","height","margin","FormContainer","xs","md","LoginScreen","location","history","useState","setEmail","setPassword","setMessage","redirect","search","split","useEffect","status","push","window","href","Form","onSubmit","e","currentTarget","checkValidity","preventDefault","Group","controlId","Label","Control","placeholder","value","onChange","target","Button","block","Table","hover","striped","getAvailabilities","start","end","experienceStart","experienceEnd","searchMode","searchExperience","toString","getAllPxx","month","keywork","PxxUserLine","Number","prodDay","prodDayComponent","setProdDayComponent","notProdDay","notProdDayComponent","setNotProdDayComponent","leavingDay","leavingDayComponent","setLeavingDayComponent","availableDay","availableDayComponent","setAvailableDayComponent","workingDay","hasChange","setHasChange","firstDayOfCurrentMonth","Date","now","setDate","toISOString","substring","editable","firstDay","_id","put","InputGroup","FormControl","min","max","step","disabled","match","PxxEditor","consultantFocus","searchDate","navigationMonthHandler","numberOfMonth","loadingPxx","errorPxx","loadingUpdate","errorUpdate","consultantId","setUTCDate","getMyConsultantPxxToEdit","ListGroup","size","style","map","line","key","DropDownTitleContainer","close","hide","setHide","setConsultantFocus","getMyConsultant","updateMyConsultant","Error","getAllCDM","getAllPractice","getAllMyAdminConsultants","getConsultantSkills","quality","getAllConsultantSkills","ConsultantsTab","focusActive","responsive","matricule","valued","arrival","leaving","comment","onClickHandler","Meta","Helmet","ViewStaffs","displayedDeal","onNavigate","getAllStaffs","company","mainPractice","probability","startDate","requestStatus","updateDeal","dealId","getAllDeals","contact","request","filterMy","ViewOldStaffs","getOldDeals","staffingRequest","Rating","setValue","text","color","valueList","Array","Math","floor","fill","val","SkillDisplayLine","skill","setUpdate","successConsultantUpdateSkill","successConsultantDeleteSkill","level","setLevel","waitingValidationLevel","setWaitingValidationLevel","handlerDeleteConsultantSkill","skillId","delete","plaintext","readOnly","newLevel","consultantUpdateASkillLevel","SkillsDetails","skillCategory","setSkillCategory","setSkillId","skillLevel","setSkillLevel","skillCategoryList","setSkillCategoryList","qualityOrdonned","setQualityOrdonned","update","skillsAll","loadingConsultantAddSkill","successConsultantAddSkill","errorConsultantAddSkill","ordonnedSkills","orderSkills","categoryList","category","Set","incr","handleAddSkill","consultantAddASkill","as","required","OverlayTrigger","placement","overlay","Tooltip","description","PxxEditScreen","commentText","setCommentText","trObjectives","setTrObjectives","myObjectives","setMyObjectives","delegateOption","setDelegationOption","loadingConsultantsMyList","errorConsultantsMyList","setSearchDate","option","console","log","getAllMyConsultants","personalObjectives","talentReviewObjectives","navigationConsultantHandler","updateCommentHandler","updateComment","consultantProfil","htmlFor","rows","navigationDate","setMonth","getMonth","Check","label","checked","ConsultantEditScreen","setName","setMatricule","setPractice","grade","setGrade","setCdm","setArrival","setValued","setLeaving","seniority","setSeniority","isCDM","setIsCDM","partialTime","setPartialTime","startPartialTime","setStartPartialTime","endPartialTime","setEndPartialTime","valueMonday","setValueMonday","valueTuesday","setValueTuesday","valueWednesday","setValueWednesday","valueThursday","setValueThursday","valueFriday","setValueFriday","errorMessage","setErrorMessage","successMessage","setSuccessMessage","valueEditType","params","successUpdate","loadingCreate","errorCreate","successCreate","errorCDM","errorPractice","cdmId","isPartialTime","week","num","worked","go","updatedUser","createConsultant","changeValueDateHandler","ImportExcelFile","setImportData","sheets","fileName","setFileName","readFileHandler","file","files","reader","FileReader","onload","result","workBook","XLSX","jsonData","SheetNames","wsName","ws","Sheets","sheet_to_json","readAsBinaryString","File","custom","data-browse","Input","FlowImportWKConsultants","props","setStep","loadingUpload","errorUpload","Modal","aria-labelledby","centered","closeButton","Title","Body","rel","Image","src","rounded","fluid","FormData","append","updateConsultantWk","onHide","ExcelFile","ReactExport","ExcelSheet","ExcelColumn","ManageConsultantScreen","setPageSize","setPageNumber","setKeyword","exportExcel","setExportExcel","importData","showImportConsultant","setShowImportConsultant","successConsultantDelete","loadingMassImport","errorMassImport","successMassImport","exportExcelData","onClickDeleteHandler","confirm","show","element","Pagination","Prev","keys","includes","active","Ellipsis","Next","ManageUsersScreen","createdAt","userId","getAllAccess","UserEditScreen","linkConsultant","setLinkConsultant","setProfil","setStatus","errorMyAdmin","updateUser","Append","newProfil","updateProfilHandler","RegisterScreen","confirmPassword","setConfirmPassword","register","variat","StaffAConsultant","loadingData","addStaffHandler","responsability","sdResponsability","setSdResponsability","sdPriority","setSdPriority","information","sdInformation","setSdInformation","SelectInput","options","multi","closeMenuOnSelect","isMulti","valuesSelected","isDisabled","getAllSkills","ConsoDispoUnit","monthData","grades","addStaff","setFocus","formatName","fullName","separateName","word","indice1","toUpperCase","join","Card","consultantData","yVal","sm","date","background","onFocus","ConsoDispo","searchExperienceStart","setSearchExperienceStart","searchExperienceEnd","setSearchExperienceEnd","searchSkillsList","setSearchSkillsList","setSearchMode","modalWindowShow","setModalWindowShow","sdConsultant","setSdConsultant","loadingAvailabilities","errorAvailabilities","moreConsultantDetails","Tabs","defaultActiveKey","Tab","eventKey","xVal","Tace","setTarget","bid","setBid","editRequest","setEditRequest","missingFTEToBid","setMissingFTEToBid","missingFTEToTarget","setMissingFTEToTarget","totalProdDay","totalProdDayToBid","totalNotProdDay","totalAvailableDay","totalProdDayToTarget","today","lastMonthDay","setUTCMonth","getUTCMonth","todayToEnd","Text","totalTACE","toFixed","totalLeaving","totalETP","DashboardScreen","startDefault","endDefault","setStart","setEnd","loadingTACE","errorTACE","getTace","endDate","replace","getAllClients","createAClient","updateAClient","SelectCompany","setCompany","companies","isClearable","commercialTeam","StaffingEditScreen","successEdit","dealToEdit","setTitle","client","setClient","setType","setProbability","setDescription","proposalDate","setProposalDate","presentationDate","setPresentationDate","setStartDate","setMainPractice","othersPractices","setOthersPractices","setLocation","srInstruction","setSrInstruction","srStatus","setSrStatus","srRessources","setSrRessources","comments","setComments","duration","setDuration","othersContacts","setOthersContacts","newComment","setNewComment","sdInstructions","sdStatus","setSdStatus","sdStaff","setSdStaff","wonDate","setWonDate","loadingSdConsultantData","setLoadingSdConsultantData","dealChange","setDealChange","leader","setLeader","coLeaders","setCoLeaders","companyMessage","setCompanyMessage","searchValue","getAllLeaders","instructions","ressources","staffingDecision","staffingStatus","primary","secondary","coLeader","idConsultant","tampon","addCommentHandler","newComments","slice","sender","sort","b","createDeal","prob","multiple","selectedList","selectBox","document","getElementById","i","selected","updateOthersPractices","trigger","Popover","Content","removeStaffHandler","updatedAt","onKeyUp","index","textAlign","marginBottom","deleteCommentHandler","ManageSkillsScreen","skillName","setSkillName","skillDescription","setSkillDescription","loadingCreateSkill","errorCreateSkill","successCreateSkill","loadingSkills","skillsList","FlowImportPxx","pxxUploadFiles","webkitdirectory","directory","updatePxxFiles","PxxDetailsScreen","monthId","progress","setProgress","massImport","setMassImport","errorImportMessage","setErrorImportMessage","messsagesImportSuccess","setMessagesImportSuccess","messsagesImportError","setMessagesImportError","totalToImport","setTotalToImport","showImportPxx","setShowImportPxx","loadingImportLine","errorImportLine","successImportLine","handlerImportData","lineToImport","newImportData","MATRICULE","updatedMatricule","newErrorMessage","ProgressBar","animated","DealList","searchTitle","setSearchTitle","searchContact","setSearchContact","searchCompany","setSearchCompany","searchDealStatus","setSearchDealStatus","searchRequestStatus","setSearchRequestStatus","searchStaff","setSearchStaff","colSpan","ManageDealsScreen","dealStatus","myDeals","searchMyDeals","setSearchMyDeals","updateFilter","setUpdateFilter","notUpdateFilter","setNotUpdateFilter","newDealFilter","setNewDealFilter","wonDealFilter","setWonDealFilter","changePeriod","setChangePeriod","tabsFilter","defaultTabs","setDefaultTabs","dataFiltered","setDataFiltered","errorDelete","successDelete","loadingImportMass","successImportData","updateTime","getUTCDate","notUpdateTime","newDealTime","wonDealTime","filteredData","dealsFiltered","needStaff","toDisplay","setParam","dealsImportInMass","activeKey","onSelect","k","DealsHistoryScreen","getFullYear","ProfilDescription","categories","categorizedFrontAccess","filterdData","frontAccessRules","categorizeFrontAccess","categoryRules","accessRules","profilId","CategoryAccess","modes","item","frontAccessItem","AccessLineEdit","setLabel","setMode","setData","loadingState","setLoadingState","updateprofilFrontAcessRule","AccessEditScreen","errorFrontUpdate","DisplayContact","setShowAddContact","deleteContactHandler","contactName","contactEmail","companyId","companyName","ManageCompaniesScreen","showAddContact","setContactName","setContactEmail","showModifyName","setShowModifyName","newCompanyName","setNewCompanyName","showCreateCompany","setShowCreateCompany","clientsId","clientToUpdate","newContacts","contactNameConform","contactEmailConform","test","addContactHandler","modifyCompanyNameHandler","addCompanyHandler","EnvoyerMailsScreen","contactList","setContactList","messsagesSendSuccess","setMessagesSendSuccess","messsagesSendError","setMessagesSendError","totalToSend","setTotalToSend","massSending","setMassSending","handlerSendADecision","newContactsInfo","sendDecisionEmail","successEmail","errorEmail","ProfileScreen","messageUpdate","setMessageUpdate","delegation","setDelegation","loadingDelegate","cdmDelegation","strongRegex","RegExp","lowRegex","applyRegex","process","updateUserProfile","delegationToUpdate","updateDelegateConsultant","c","s","App","component","exact","Boolean","hostname","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.8a49cf0b.chunk.js","sourcesContent":["export const PXX_MY_TO_EDIT_REQUEST = 'PXX_MY_TO_EDIT_REQUEST';\nexport const PXX_MY_TO_EDIT_SUCCESS = 'PXX_MY_TO_EDIT_SUCCESS';\nexport const PXX_MY_TO_EDIT_FAIL = 'PXX_MY_TO_EDIT_FAIL';\nexport const PXX_MY_TO_EDIT_RESET = 'PXX_MY_TO_EDIT_RESET';\n\nexport const PXX_UPDATE_REQUEST = 'PXX_UPDATE_REQUEST';\nexport const PXX_UPDATE_SUCCESS = 'PXX_UPDATE_SUCCESS';\nexport const PXX_UPDATE_FAIL = 'PXX_UPDATE_FAIL';\nexport const PXX_UPDATE_RESET = 'PXX_UPDATE_RESET';\n\nexport const PXX_LIST_REQUEST = 'PXX_LIST_REQUEST';\nexport const PXX_LIST_SUCCESS = 'PXX_LIST_SUCCESS';\nexport const PXX_LIST_FAIL = 'PXX_LIST_FAIL';\nexport const PXX_LIST_RESET = 'PXX_LIST_RESET';\n\nexport const PXX_USER_LIST_REQUEST = 'PXX_USER_LIST_REQUEST';\nexport const PXX_USER_LIST_SUCCESS = 'PXX_USER_LIST_SUCCESS';\nexport const PXX_USER_LIST_FAIL = 'PXX_USER_LIST_FAIL';\nexport const PXX_USER_LIST_RESET = 'PXX_USER_LIST_RESET';\n\nexport const PXX_TACE_REQUEST = 'PXX_TACE_REQUEST';\nexport const PXX_TACE_SUCCESS = 'PXX_TACE_SUCCESS';\nexport const PXX_TACE_FAIL = 'PXX_TACE_FAIL';\nexport const PXX_TACE_RESET = 'PXX_TACE_RESET';\n\nexport const PXX_AVAILABILITIES_REQUEST = 'PXX_AVAILABILITIES_REQUEST';\nexport const PXX_AVAILABILITIES_SUCCESS = 'PXX_AVAILABILITIES_SUCCESS';\nexport const PXX_AVAILABILITIES_FAIL = 'PXX_AVAILABILITIES_FAIL';\nexport const PXX_AVAILABILITIES_RESET = 'PXX_AVAILABILITIES_RESET';\n\nexport const PXX_ALL_REQUEST = 'PXX_ALL_REQUEST';\nexport const PXX_ALL_SUCCESS = 'PXX_ALL_SUCCESS';\nexport const PXX_ALL_FAIL = 'PXX_ALL_FAIL';\nexport const PXX_ALL_RESET = 'PXX_ALL_RESET';\n\nexport const PXX_IMPORT_MASS_REQUEST = 'PXX_IMPORT_MASS_REQUEST';\nexport const PXX_IMPORT_MASS_SUCCESS = 'PXX_IMPORT_MASS_SUCCESS';\nexport const PXX_IMPORT_MASS_FAIL = 'PXX_IMPORT_MASS_FAIL';\nexport const PXX_IMPORT_MASS_RESET = 'PXX_IMPORT_MASS_RESET';\n\nexport const PXX_IMPORT_LINE_REQUEST = 'PXX_IMPORT_LINE_REQUEST';\nexport const PXX_IMPORT_LINE_SUCCESS = 'PXX_IMPORT_LINE_SUCCESS';\nexport const PXX_IMPORT_LINE_FAIL = 'PXX_IMPORT_LINE_FAIL';\nexport const PXX_IMPORT_LINE_RESET = 'PXX_IMPORT_LINE_RESET';\n\nexport const PXX_UPLOAD_FILE_REQUEST = 'PXX_UPLOAD_FILE_REQUEST';\nexport const PXX_UPLOAD_FILE_SUCCESS = 'PXX_UPLOAD_FILE_SUCCESS';\nexport const PXX_UPLOAD_FILE_FAIL = 'PXX_UPLOAD_FILE_FAIL';\nexport const PXX_UPLOAD_FILE_RESET = 'PXX_UPLOAD_FILE_RESET';\n\nexport const PXX_UPDATE_PXX_REQUEST = 'PXX_UPDATE_PXX_REQUEST';\nexport const PXX_UPDATE_PXX_SUCCESS = 'PXX_UPDATE_PXX_SUCCESS';\nexport const PXX_UPDATE_PXX_FAIL = 'PXX_UPDATE_PXX_FAIL';\nexport const PXX_UPDATE_PXX_RESET = 'PXX_UPDATE_PXX_RESET';","export const USER_LOGIN_REQUEST = 'USER_LOGIN_REQUEST';\nexport const USER_LOGIN_SUCCESS = 'USER_LOGIN_SUCCESS';\nexport const USER_LOGIN_FAIL = 'USER_LOGIN_FAIL';\nexport const USER_LOGOUT = 'USER_LOGOUT';\n\nexport const USER_REDIRECT_AZ_REQUEST = 'USER_REDIRECT_AZ_REQUEST';\nexport const USER_REDIRECT_AZ_SUCCESS = 'USER_REDIRECT_AZ_SUCCESS';\nexport const USER_REDIRECT_AZ_FAIL = 'USER_REDIRECT_AZ_FAIL';\nexport const USER_REDIRECT_AZ_RESET = 'USER_REDIRECT_AZ_RESET';\n\nexport const USER_REGISTER_REQUEST = 'USER_REGISTER_REQUEST';\nexport const USER_REGISTER_SUCCESS = 'USER_REGISTER_SUCCESS';\nexport const USER_REGISTER_FAIL = 'USER_REGISTER_FAIL';\nexport const USER_REGISTER_RESET = 'USER_REGISTER_RESET';\n\n\nexport const USER_DETAILS_REQUEST = 'USER_DETAILS_REQUEST';\nexport const USER_DETAILS_SUCCESS = 'USER_DETAILS_SUCCESS';\nexport const USER_DETAILS_FAIL = 'USER_DETAILS_FAIL';\nexport const USER_DETAILS_RESET = 'USER_DETAILS_RESET';\n\nexport const USER_UPDATE_PROFILE_REQUEST = 'USER_UPDATE_PROFILE_REQUEST';\nexport const USER_UPDATE_PROFILE_SUCCESS = 'USER_UPDATE_PROFILE_SUCCESS';\nexport const USER_UPDATE_PROFILE_FAIL = 'USER_UPDATE_PROFILE_FAIL';\nexport const USER_UPDATE_PROFILE_RESET = 'USER_UPDATE_PROFILE_RESET';\n\nexport const USER_LIST_REQUEST = 'USER_LIST_REQUEST';\nexport const USER_LIST_SUCCESS = 'USER_LIST_SUCCESS';\nexport const USER_LIST_FAIL = 'USER_LIST_FAIL';\nexport const USER_LIST_RESET = 'USER_LIST_RESET';\n\nexport const USER_DELETE_REQUEST = 'USER_DELETE_REQUEST';\nexport const USER_DELETE_SUCCESS = 'USER_DELETE_SUCCESS';\nexport const USER_DELETE_FAIL = 'USER_DELETE_FAIL';\nexport const USER_DELETE_RESET = 'USER_DELETE_RESET';\n\nexport const USER_UPDATE_REQUEST = 'USER_UPDATE_REQUEST';\nexport const USER_UPDATE_SUCCESS = 'USER_UPDATE_SUCCESS';\nexport const USER_UPDATE_FAIL = 'USER_UPDATE_FAIL';\nexport const USER_UPDATE_RESET = 'USER_UPDATE_RESET';\n\nexport const USER_STATUS = ['Waiting approval', 'Validated', 'Refused'];","export const CONSULTANTS_MY_DETAILS_REQUEST = 'CONSULTANTS_MY_DETAILS_REQUEST';\nexport const CONSULTANTS_MY_DETAILS_SUCCESS = 'CONSULTANTS_MY_DETAILS_SUCCESS';\nexport const CONSULTANTS_MY_DETAILS_FAIL = 'CONSULTANTS_MY_DETAILS_FAIL';\nexport const CONSULTANTS_MY_DETAILS_FOCUS = 'CONSULTANTS_MY_DETAILS_FOCUS';\nexport const CONSULTANTS_MY_DETAILS_RESET = 'CONSULTANTS_MY_DETAILS_RESET';\n\nexport const CONSULTANTS_ALL_ADMIN_DETAILS_REQUEST = 'CONSULTANTS_ALL_ADMIN_DETAILS_REQUEST';\nexport const CONSULTANTS_ALL_ADMIN_DETAILS_SUCCESS = 'CONSULTANTS_ALL_ADMIN_DETAILS_SUCCESS';\nexport const CONSULTANTS_ALL_ADMIN_DETAILS_FAIL = 'CONSULTANTS_ALL_ADMIN_DETAILS_FAIL';\nexport const CONSULTANTS_ALL_ADMIN_DETAILS_FOCUS = 'CONSULTANTS_ALL_ADMIN_DETAILS_FOCUS';\nexport const CONSULTANTS_ALL_ADMIN_DETAILS_RESET = 'CONSULTANTS_ALL_ADMIN_DETAILS_RESET';\n\nexport const CONSULTANTS_ALL_LEADERS_REQUEST = 'CONSULTANTS_ALL_LEADERS_REQUEST';\nexport const CONSULTANTS_ALL_LEADERS_SUCCESS = 'CONSULTANTS_ALL_LEADERS_SUCCESS';\nexport const CONSULTANTS_ALL_LEADERS_FAIL = 'CONSULTANTS_ALL_LEADERS_FAIL';\nexport const CONSULTANTS_ALL_LEADERS_FOCUS = 'CONSULTANTS_ALL_LEADERS_FOCUS';\nexport const CONSULTANTS_ALL_LEADERS_RESET = 'CONSULTANTS_ALL_LEADERS_RESET';\n\nexport const CONSULTANT_MY_REQUEST = 'CONSULTANT_MY_REQUEST';\nexport const CONSULTANT_MY_SUCCESS = 'CONSULTANT_MY_SUCCESS';\nexport const CONSULTANT_MY_FAIL = 'CONSULTANT_MY_FAIL';\nexport const CONSULTANT_MY_RESET = 'CONSULTANT_MY_RESET';\n\nexport const CONSULTANT_DELEGATE_UPDATE_REQUEST = 'CONSULTANT_DELEGATE_UPDATE_REQUEST';\nexport const CONSULTANT_DELEGATE_UPDATE_SUCCESS = 'CONSULTANT_DELEGATE_UPDATE_SUCCESS';\nexport const CONSULTANT_DELEGATE_UPDATE_FAIL = 'CONSULTANT_DELEGATE_UPDATE_FAIL';\nexport const CONSULTANT_DELEGATE_UPDATE_RESET = 'CONSULTANT_DELEGATE_UPDATE_RESET';\n\nexport const CONSULTANT_MY_UPDATE_REQUEST = 'CONSULTANT_MY_UPDATE_REQUEST';\nexport const CONSULTANT_MY_UPDATE_SUCCESS = 'CONSULTANT_MY_UPDATE_SUCCESS';\nexport const CONSULTANT_MY_UPDATE_FAIL = 'CONSULTANT_MY_UPDATE_FAIL';\nexport const CONSULTANT_MY_UPDATE_RESET = 'CONSULTANT_MY_UPDATE_RESET';\n\nexport const CONSULTANT_CREATE_REQUEST = 'CONSULTANT_CREATE_REQUEST';\nexport const CONSULTANT_CREATE_SUCCESS = 'CONSULTANT_CREATE_SUCCESS';\nexport const CONSULTANT_CREATE_FAIL = 'CONSULTANT_CREATE_FAIL';\nexport const CONSULTANT_CREATE_RESET = 'CONSULTANT_CREATE_RESET';\n\nexport const CONSULTANT_DELETE_REQUEST = 'CONSULTANT_DELETE_REQUEST';\nexport const CONSULTANT_DELETE_SUCCESS = 'CONSULTANT_DELETE_SUCCESS';\nexport const CONSULTANT_DELETE_FAIL = 'CONSULTANT_DELETE_FAIL';\nexport const CONSULTANT_DELETE_RESET = 'CONSULTANT_DELETE_RESET';\n\nexport const CONSULTANT_CDM_LIST_REQUEST = 'CONSULTANT_CDM_LIST_REQUEST';\nexport const CONSULTANT_CDM_LIST_SUCCESS = 'CONSULTANT_CDM_LIST_SUCCESS';\nexport const CONSULTANT_CDM_LIST_FAIL = 'CONSULTANT_CDM_LIST_FAIL';\nexport const CONSULTANT_CDM_LIST_RESET = 'CONSULTANT_CDM_LIST_RESET';\n\nexport const CONSULTANT_PRACTICE_LIST_REQUEST = 'CONSULTANT_PRACTICE_LIST_REQUEST';\nexport const CONSULTANT_PRACTICE_LIST_SUCCESS = 'CONSULTANT_PRACTICE_LIST_SUCCESS';\nexport const CONSULTANT_PRACTICE_LIST_FAIL = 'CONSULTANT_PRACTICE_LIST_FAIL';\nexport const CONSULTANT_PRACTICE_LIST_RESET = 'CONSULTANT_PRACTICE_LIST_RESET';\n\nexport const CONSULTANT_UPDATE_COMMENT_REQUEST = 'CONSULTANT_UPDATE_COMMENT_REQUEST';\nexport const CONSULTANT_UPDATE_COMMENT_SUCCESS = 'CONSULTANT_UPDATE_COMMENT_SUCCESS';\nexport const CONSULTANT_UPDATE_COMMENT_FAIL = 'CONSULTANT_UPDATE_COMMENT_FAIL';\nexport const CONSULTANT_UPDATE_COMMENT_RESET = 'CONSULTANT_UPDATE_COMMENT_RESET';\n\nexport const CONSULTANT_CDM_REQUEST = 'CONSULTANT_CDM_REQUEST';\nexport const CONSULTANT_CDM_SUCCESS = 'CONSULTANT_CDM_SUCCESS';\nexport const CONSULTANT_CDM_FAIL = 'CONSULTANT_CDM_FAIL';\nexport const CONSULTANT_CDM_RESET = 'CONSULTANT_CDM_RESET';\n\nexport const CONSULTANT_SKILLS_REQUEST = 'CONSULTANT_SKILLS_REQUEST';\nexport const CONSULTANT_SKILLS_SUCCESS = 'CONSULTANT_SKILLS_SUCCESS';\nexport const CONSULTANT_SKILLS_FAIL = 'CONSULTANT_SKILLS_FAIL';\nexport const CONSULTANT_SKILLS_RESET = 'CONSULTANT_SKILLS_RESET';\n\nexport const CONSULTANT_ALL_SKILLS_REQUEST = 'CONSULTANT_ALL_SKILLS_REQUEST';\nexport const CONSULTANT_ALL_SKILLS_SUCCESS = 'CONSULTANT_ALL_SKILLS_SUCCESS';\nexport const CONSULTANT_ALL_SKILLS_FAIL = 'CONSULTANT_ALL_SKILLS_FAIL';\nexport const CONSULTANT_ALL_SKILLS_RESET = 'CONSULTANT_ALL_SKILLS_RESET';\n\nexport const CONSULTANT_ALL_STAFF_REQUEST = 'CONSULTANT_ALL_STAFF_REQUEST';\nexport const CONSULTANT_ALL_STAFF_SUCCESS = 'CONSULTANT_ALL_STAFF_SUCCESS';\nexport const CONSULTANT_ALL_STAFF_FAIL = 'CONSULTANT_ALL_STAFF_FAIL';\nexport const CONSULTANT_ALL_STAFF_RESET = 'CONSULTANT_ALL_STAFF_RESET';\n\nexport const CONSULTANT_ADD_SKILL_REQUEST = 'CONSULTANT_ADD_SKILL_REQUEST';\nexport const CONSULTANT_ADD_SKILL_SUCCESS = 'CONSULTANT_ADD_SKILL_SUCCESS';\nexport const CONSULTANT_ADD_SKILL_FAIL = 'CONSULTANT_ADD_SKILL_FAIL';\nexport const CONSULTANT_ADD_SKILL_RESET = 'CONSULTANT_ADD_SKILL_RESET';\n\nexport const CONSULTANT_DELETE_SKILL_REQUEST = 'CONSULTANT_DELETE_SKILL_REQUEST';\nexport const CONSULTANT_DELETE_SKILL_SUCCESS = 'CONSULTANT_DELETE_SKILL_SUCCESS';\nexport const CONSULTANT_DELETE_SKILL_FAIL = 'CONSULTANT_DELETE_SKILL_FAIL';\nexport const CONSULTANT_DELETE_SKILL_RESET = 'CONSULTANT_DELETE_SKILL_RESET';\n\nexport const CONSULTANT_UPDATE_SKILL_REQUEST = 'CONSULTANT_UPDATE_SKILL_REQUEST';\nexport const CONSULTANT_UPDATE_SKILL_SUCCESS = 'CONSULTANT_UPDATE_SKILL_SUCCESS';\nexport const CONSULTANT_UPDATE_SKILL_FAIL = 'CONSULTANT_UPDATE_SKILL_FAIL';\nexport const CONSULTANT_UPDATE_SKILL_RESET = 'CONSULTANT_UPDATE_SKILL_RESET';\n\nexport const CONSULTANT_MASS_IMPORT_REQUEST = 'CONSULTANT_MASS_IMPORT_REQUEST';\nexport const CONSULTANT_MASS_IMPORT_SUCCESS = 'CONSULTANT_MASS_IMPORT_SUCCESS';\nexport const CONSULTANT_MASS_IMPORT_FAIL = 'CONSULTANT_MASS_IMPORT_FAIL';\nexport const CONSULTANT_MASS_IMPORT_RESET = 'CONSULTANT_MASS_IMPORT_RESET';\n\nexport const CONSULTANT_UPLOAD_WK_REQUEST = 'CONSULTANT_UPLOAD_WK_REQUEST';\nexport const CONSULTANT_UPLOAD_WK_SUCCESS = 'CONSULTANT_UPLOAD_WK_SUCCESS';\nexport const CONSULTANT_UPLOAD_WK_FAIL = 'CONSULTANT_UPLOAD_WK_FAIL';\nexport const CONSULTANT_UPLOAD_WK_RESET = 'CONSULTANT_UPLOAD_WK_RESET';\n\nexport const CONSULTANT_UPDATE_WK_REQUEST = 'CONSULTANT_UPDATE_WK_REQUEST';\nexport const CONSULTANT_UPDATE_WK_SUCCESS = 'CONSULTANT_UPDATE_WK_SUCCESS';\nexport const CONSULTANT_UPDATE_WK_FAIL = 'CONSULTANT_UPDATE_WK_FAIL';\nexport const CONSULTANT_UPDATE_WK_RESET = 'CONSULTANT_UPDATE_WK_RESET';\n\nexport const CONSULTANT_GRADE = ['Intern', 'Analyst', 'Consultant', 'Senior consultant', 'Manager', 'Senior manager', 'Director', 'Partner', 'Unknown', 'Commercial', 'Research'];","export const SKILL_LIST_REQUEST = 'SKILL_LIST_REQUEST';\nexport const SKILL_LIST_SUCCESS = 'SKILL_LIST_SUCCESS';\nexport const SKILL_LIST_FAIL = 'SKILL_LIST_FAIL';\nexport const SKILL_LIST_RESET = 'SKILL_LIST_RESET';\n\nexport const SKILL_DELETE_REQUEST = 'SKILL_DELETE_REQUEST';\nexport const SKILL_DELETE_SUCCESS = 'SKILL_DELETE_SUCCESS';\nexport const SKILL_DELETE_FAIL = 'SKILL_DELETE_FAIL';\nexport const SKILL_DELETE_RESET = 'SKILL_DELETE_RESET';\n\nexport const SKILL_CREATE_REQUEST = 'SKILL_CREATE_REQUEST';\nexport const SKILL_CREATE_SUCCESS = 'SKILL_CREATE_SUCCESS';\nexport const SKILL_CREATE_FAIL = 'SKILL_CREATE_FAIL';\nexport const SKILL_CREATE_RESET = 'SKILL_CREATE_RESET';","export const DEAL_CREATE_REQUEST = 'DEAL_CREATE_REQUEST';\nexport const DEAL_CREATE_SUCCESS = 'DEAL_CREATE_SUCCESS';\nexport const DEAL_CREATE_FAIL = 'DEAL_CREATE_FAIL';\nexport const DEAL_CREATE_RESET = 'DEAL_CREATE_RESET';\n\nexport const DEAL_UPDATE_REQUEST = 'DEAL_UPDATE_REQUEST';\nexport const DEAL_UPDATE_SUCCESS = 'DEAL_UPDATE_SUCCESS';\nexport const DEAL_UPDATE_FAIL = 'DEAL_UPDATE_FAIL';\nexport const DEAL_UPDATE_RESET = 'DEAL_UPDATE_RESET';\n\nexport const DEAL_ALL_LIST_REQUEST = 'DEAL_ALL_LIST_REQUEST';\nexport const DEAL_ALL_LIST_SUCCESS = 'DEAL_ALL_LIST_SUCCESS';\nexport const DEAL_ALL_LIST_FAIL = 'DEAL_ALL_LIST_FAIL';\nexport const DEAL_ALL_LIST_RESET = 'DEAL_ALL_LIST_RESET';\n\nexport const DEAL_DELETE_REQUEST = 'DEAL_DELETE_REQUEST';\nexport const DEAL_DELETE_SUCCESS = 'DEAL_DELETE_SUCCESS';\nexport const DEAL_DELETE_FAIL = 'DEAL_DELETE_FAIL';\nexport const DEAL_DELETE_RESET = 'DEAL_DELETE_RESET';\n\nexport const DEAL_EDIT_REQUEST = 'DEAL_EDIT_REQUEST';\nexport const DEAL_EDIT_SUCCESS = 'DEAL_EDIT_SUCCESS';\nexport const DEAL_EDIT_FAIL = 'DEAL_EDIT_FAIL';\nexport const DEAL_EDIT_RESET = 'DEAL_EDIT_RESET';\n\nexport const DEAL_OLD_REQUEST = 'DEAL_OLD_REQUEST';\nexport const DEAL_OLD_SUCCESS = 'DEAL_OLD_SUCCESS';\nexport const DEAL_OLD_FAIL = 'DEAL_OLD_FAIL';\nexport const DEAL_OLD_RESET = 'DEAL_OLD_RESET';\n\nexport const DEAL_MASS_IMPORT_REQUEST = 'DEAL_MASS_IMPORT_REQUEST';\nexport const DEAL_MASS_IMPORT_SUCCESS = 'DEAL_MASS_IMPORT_SUCCESS';\nexport const DEAL_MASS_IMPORT_FAIL = 'DEAL_MASS_IMPORT_FAIL';\nexport const DEAL_MASS_IMPORT_RESET = 'DEAL_MASS_IMPORT_RESET';\n\nexport const REQUEST_STATUS = [\n    {name: 'Identify Leader', staff: true, priority: 10},\n    {name: 'Identify Staff', staff: true, priority: 7},\n    {name: 'Staff to validate by leader', staff: false, priority: 5},\n    {name: 'Staff validated by leader', staff: false, priority: 0},\n    {name: 'Staff validated by client', staff: false, priority: 0},\n    {name: 'You can staff elsewhere', staff: false, priority: 0},\n    {name: 'Close', staff: false, priority: 0}\n];\n\nexport const TYPE_BUSINESS = [\n    {name: 'New business', priority: 10},\n    {name: 'New position', priority: 5},\n    {name: 'Replacement', priority: 1}\n];\n\nexport const DEAL_STATUS = [\n    {name: 'Lead', priority: 0, display: 'onTrack'},\n    {name: 'Proposal to send', priority: 5, display: 'onTrack'},\n    {name: 'Proposal sent', priority: 5, display: 'onTrack'},\n    {name: 'Won', priority: 10, display: 'win'},\n    {name: 'Abandoned', priority: 0, display: 'lost'},\n    {name: 'Lost', priority: 0, display: 'lots'},\n];\n\nexport const DEAL_PROBABILITY = [\n    {name: 10, priority: 1},\n    {name: 30, priority: 3},\n    {name: 50, priority: 5},\n    {name: 70, priority: 7},\n    {name: 100, priority: 10},\n];","export const ACCESS_LIST_REQUEST = 'ACCESS_LIST_REQUEST';\nexport const ACCESS_LIST_SUCCESS = 'ACCESS_LIST_SUCCESS';\nexport const ACCESS_LIST_FAIL = 'ACCESS_LIST_FAIL';\nexport const ACCESS_LIST_RESET = 'ACCESS_LIST_RESET';\n\nexport const ACCESS_UPDATE_FRONTACCESS_REQUEST = 'ACCESS_UPDATE_FRONTACCESS_REQUEST';\nexport const ACCESS_UPDATE_FRONTACCESS_SUCCESS = 'ACCESS_UPDATE_FRONTACCESS_SUCCESS';\nexport const ACCESS_UPDATE_FRONTACCESS_FAIL = 'ACCESS_UPDATE_FRONTACCESS_FAIL';\nexport const ACCESS_UPDATE_FRONTACCESS_RESET = 'ACCESS_UPDATE_FRONTACCESS_RESET';\n\nexport const ACCESS_MODES = ['no', 'yes', 'read', 'write'];\nexport const ACCESS_DATAS = ['my', 'team', 'department', 'domain', 'all'];","export const CLIENT_ALL_REQUEST = 'CLIENT_ALL_REQUEST';\nexport const CLIENT_ALL_SUCCESS = 'CLIENT_ALL_SUCCESS';\nexport const CLIENT_ALL_FAIL = 'CLIENT_ALL_FAIL';\nexport const CLIENT_ALL_RESET = 'CLIENT_ALL_RESET';\n\nexport const CLIENT_CREATE_REQUEST = 'CLIENT_CREATE_REQUEST';\nexport const CLIENT_CREATE_SUCCESS = 'CLIENT_CREATE_SUCCESS';\nexport const CLIENT_CREATE_FAIL = 'CLIENT_CREATE_FAIL';\nexport const CLIENT_CREATE_RESET = 'CLIENT_CREATE_RESET';\n\nexport const CLIENT_UPDATE_REQUEST = 'CLIENT_UPDATE_REQUEST';\nexport const CLIENT_UPDATE_SUCCESS = 'CLIENT_UPDATE_SUCCESS';\nexport const CLIENT_UPDATE_FAIL = 'CLIENT_UPDATE_FAIL';\nexport const CLIENT_UPDATE_RESET = 'CLIENT_UPDATE_RESET';\n\nexport const CLIENT_DELETE_REQUEST = 'CLIENT_DELETE_REQUEST';\nexport const CLIENT_DELETE_SUCCESS = 'CLIENT_DELETE_SUCCESS';\nexport const CLIENT_DELETE_FAIL = 'CLIENT_DELETE_FAIL';\nexport const CLIENT_DELETE_RESET = 'CLIENT_DELETE_RESET';","export const TACE_CREATE_REQUEST = 'TACE_CREATE_REQUEST';\nexport const TACE_CREATE_SUCCESS = 'TACE_CREATE_SUCCESS';\nexport const TACE_CREATE_FAIL = 'TACE_CREATE_FAIL';\nexport const TACE_CREATE_RESET = 'TACE_CREATE_RESET';","export const EMAIL_CONTACTS_LIST_REQUEST = 'EMAIL_CONTACTS_LIST_REQUEST';\nexport const EMAIL_CONTACTS_LIST_SUCCESS = 'EMAIL_CONTACTS_LIST_SUCCESS';\nexport const EMAIL_CONTACTS_LIST_FAIL = 'EMAIL_CONTACTS_LIST_FAIL';\nexport const EMAIL_CONTACTS_LIST_RESET = 'EMAIL_CONTACTS_LIST_RESET';\n\nexport const EMAIL_SEND_DECISION_REQUEST = 'EMAIL_SEND_DECISION_REQUEST';\nexport const EMAIL_SEND_DECISION_SUCCESS = 'EMAIL_SEND_DECISION_SUCCESS';\nexport const EMAIL_SEND_DECISION_FAIL = 'EMAIL_SEND_DECISION_FAIL';\nexport const EMAIL_SEND_DECISION_RESET = 'EMAIL_SEND_DECISION_RESET';","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { pxxAvailabilitiesReducer, pxxListReducer, pxxAllListReducer, pxxTACEReducer, pxxUpdateReducer, pxxMyToEditReducer, pxxImportLineReducer, pxxUploadFileReducer, updatePxxReducer } from './reducers/pxxReducers';\nimport { userLoginReducer, userListReducer, userDeleteReducer, userDetailsReducer, userUpdateReducer, userRegisterReducer, userRedirectAzReducer, userUpdateProfileReducer } from './reducers/userReducers';\nimport { \n    consultantMyReducer, \n    consultantsMyListReducer, \n    consultantMyUpdateReducer, \n    consultantsMyAdminListReducer,\n    consultantCreateReducer,\n    consultantCDMListReducer,\n    consultantPracticeListReducer,\n    consultantDeleteReducer,\n    consultantUpdateCommentReducer,\n    consultantAllSkillsReducer,\n    consultantAddSkillReducer,\n    consultantDeleteSkillReducer,\n    consultantUpdateSkillReducer,\n    consultantAllStaffsReducer,\n    consultantSkillsReducer,\n    consultantGetCDMReducer,\n    consultantsAllLeadersReducer,\n    consultantsMassImportReducer,\n    consultantUploadWkReducer,\n    consultantUpdateWkReducer,\n    consultantDelegateUpdateReducer\n } from './reducers/consultantReducers';\n//import {  } from './reducers/pxxReducers';\nimport { skillCreateReducer, skillDelteReducer, skillListReducer } from './reducers/skillReducers'\nimport { dealAllListReducer, dealCreateReducer, dealDeleteReducer, dealEditeReducer, dealOldReducer, dealsImportMassReducer, dealUpdateReducer } from './reducers/dealReducer';\nimport { accessFrontUpdateReducer, accessListReducer } from './reducers/accessReducers';\nimport { clientAllReducer, clientCreateReducer, clientUpdateReducer, clientDeleteReducer } from './reducers/clientReducers';\nimport { createTaceReducer } from './reducers/taceReducer';\nimport { contactsListReducer, sendOneEmailReducer } from './reducers/emailReducers';\n\nexport const reducer = combineReducers({\n    userRegister: userRegisterReducer,\n    userLogin: userLoginReducer,\n    userRedirectAz: userRedirectAzReducer,\n    userList: userListReducer,\n    userDetails: userDetailsReducer,\n    userUpdate: userUpdateReducer,\n    userDelete: userDeleteReducer,\n    userUpdateProfil: userUpdateProfileReducer,\n    consultantUpdateComment: consultantUpdateCommentReducer,\n    consultantsMyAdminList: consultantsMyAdminListReducer,\n    consultantsMyList: consultantsMyListReducer,\n    consultantMy: consultantMyReducer,\n    consultantMyUpdate: consultantMyUpdateReducer,\n    consultantCreate: consultantCreateReducer,\n    consultantDelete: consultantDeleteReducer,\n    consultantCDMList: consultantCDMListReducer,\n    consultantDelegateUpdate: consultantDelegateUpdateReducer,\n    consultantPracticeList: consultantPracticeListReducer,\n    //consultantAllAccess: consultantAllAccessReducer,\n    consultantSkills: consultantSkillsReducer,\n    consultantAllSkills: consultantAllSkillsReducer,\n    consultantAllStaffs: consultantAllStaffsReducer,\n    consultantAddSkill: consultantAddSkillReducer,\n    consultantDeleteSkill: consultantDeleteSkillReducer,\n    consultantUpdateSkill: consultantUpdateSkillReducer,\n    consultantGetCdm: consultantGetCDMReducer,\n    consultantsAllLeaders: consultantsAllLeadersReducer,\n    consultantsMassImport: consultantsMassImportReducer,\n    consultantUploadWk: consultantUploadWkReducer,\n    consultantUpdateWk: consultantUpdateWkReducer,\n    pxxList: pxxListReducer,\n    pxxAllList: pxxAllListReducer,\n    pxxMyToEdit: pxxMyToEditReducer,\n    pxxUpdate: pxxUpdateReducer,\n    pxxTACE: pxxTACEReducer,\n    pxxAvailabilities: pxxAvailabilitiesReducer,\n    updatePxx: updatePxxReducer,\n    //pxxImportMass: pxxImportMassReducer,\n    pxxImportLine: pxxImportLineReducer,\n    pxxUploadFile: pxxUploadFileReducer,\n    skillList: skillListReducer,\n    skillDelete: skillDelteReducer,\n    skillCreate: skillCreateReducer,\n    dealCreate: dealCreateReducer,\n    dealAllList: dealAllListReducer,\n    dealDelete: dealDeleteReducer,\n    dealEdit: dealEditeReducer,\n    dealUpdate: dealUpdateReducer,\n    dealOld: dealOldReducer,\n    dealsImportMass: dealsImportMassReducer,\n    accessList: accessListReducer,\n    accessFrontUpdate: accessFrontUpdateReducer,\n    clientAll: clientAllReducer,\n    clientCreate: clientCreateReducer,\n    clientUpdate: clientUpdateReducer,\n    clientDelete: clientDeleteReducer,\n    createTace: createTaceReducer,\n    contactsList: contactsListReducer,\n    sendOneEmail: sendOneEmailReducer\n});\n\n// space for store on local\nconst userItemsFromStorage = localStorage.getItem('userInfo') ? JSON.parse(localStorage.getItem('userInfo')) : null;\n\nconst initialState = {\n    userLogin: {userInfo: userItemsFromStorage}\n};\n\nconst middleware = [thunk];\n\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(...middleware)));\n\nexport default store;","import { USER_LOGIN_FAIL, \n    USER_LOGIN_REQUEST, \n    USER_LOGIN_SUCCESS, \n    USER_LOGOUT, \n    USER_REGISTER_REQUEST, \n    USER_REGISTER_SUCCESS,\n    USER_REGISTER_FAIL,\n    USER_REGISTER_RESET,\n    USER_DETAILS_FAIL,\n    USER_DETAILS_SUCCESS,\n    USER_DETAILS_REQUEST, \n    USER_DETAILS_RESET,\n    USER_UPDATE_PROFILE_REQUEST,\n    USER_UPDATE_PROFILE_SUCCESS,\n    USER_UPDATE_PROFILE_FAIL,\n    USER_UPDATE_PROFILE_RESET,\n    USER_LIST_REQUEST,\n    USER_LIST_SUCCESS,\n    USER_LIST_FAIL,\n    USER_LIST_RESET,\n    USER_DELETE_REQUEST,\n    USER_DELETE_SUCCESS,\n    USER_DELETE_FAIL,\n    USER_DELETE_RESET,\n    USER_UPDATE_REQUEST,\n    USER_UPDATE_SUCCESS,\n    USER_UPDATE_RESET,\n    USER_UPDATE_FAIL,\n    USER_REDIRECT_AZ_REQUEST,\n    USER_REDIRECT_AZ_SUCCESS,\n    USER_REDIRECT_AZ_FAIL,\n    USER_REDIRECT_AZ_RESET,\n} from \"../constants/userConstants\";\n\nexport const userLoginReducer = (state = {}, action) => {\n    switch (action.type) {\n        case USER_LOGIN_REQUEST:\n            return { loading: true };\n        case USER_LOGIN_SUCCESS:\n            return { loading: false, userInfo: action.payload };\n        case USER_LOGIN_FAIL:\n            return { loading: false, error: action.payload };\n        case USER_LOGOUT:\n            return {};\n        default:\n            return state;\n    }\n};\n\nexport const userRedirectAzReducer = (state = {}, action) => {\n    switch (action.type) {\n        case USER_REDIRECT_AZ_REQUEST:\n            return { loading: true };\n        case USER_REDIRECT_AZ_SUCCESS:\n            return { loading: false, redirectURL: action.payload.redirectURL };\n        case USER_REDIRECT_AZ_FAIL:\n            return { loading: false, error: action.payload };\n        case USER_REDIRECT_AZ_RESET:\n            return {};\n        default:\n            return state;\n    }\n};\n\nexport const userRegisterReducer = (state = {}, action) => {\n    switch (action.type) {\n        case USER_REGISTER_REQUEST:\n            return { loading: true };\n        case USER_REGISTER_SUCCESS:\n            return { loading: false, userInfo: action.payload };\n        case USER_REGISTER_FAIL:\n            return { loading: false, error: action.payload };\n        case USER_REGISTER_RESET:\n            return {};\n        default:\n            return state;\n    }\n};\n\nexport const userDetailsReducer = (state = {}, action) => {\n    switch (action.type) {\n        case USER_DETAILS_REQUEST:\n            return { loading: true };\n        case USER_DETAILS_SUCCESS:\n            return { loading: false, user: action.payload };\n        case USER_DETAILS_FAIL:\n            return { loading: false, error: action.payload };\n        case USER_DETAILS_RESET:\n            return {}\n        default:\n            return state;\n    }\n};\n\nexport const userUpdateProfileReducer = (state = { }, action) => {\n    switch (action.type) {\n        case USER_UPDATE_PROFILE_REQUEST:\n            return { loading: true };\n        case USER_UPDATE_PROFILE_SUCCESS:\n            return { loading: false, success: true, userInfo: action.payload };\n        case USER_UPDATE_PROFILE_FAIL:\n            return { loading: false, error: action.payload };\n        case USER_UPDATE_PROFILE_RESET:\n            return { };\n        default:\n            return state;\n    }\n};\n\nexport const userListReducer = (state = {}, action) => {\n    switch (action.type) {\n        case USER_LIST_REQUEST:\n            return { loading: true };\n        case USER_LIST_SUCCESS:\n            return { \n                loading: false, \n                users: action.payload.users,\n                pages: action.payload.pages,\n                page: action.payload.page,\n                count: action.payload.count \n            };\n        case USER_LIST_FAIL:\n            return { loading: false, error: action.payload };\n        case USER_LIST_RESET:\n            return { };\n        default:\n            return state;\n    }\n};\n\n\nexport const userDeleteReducer = (state = { }, action) => {\n    switch (action.type) {\n        case USER_DELETE_REQUEST:\n            return { loading: true };\n        case USER_DELETE_SUCCESS:\n            return { loading: false, success: true };\n        case USER_DELETE_FAIL:\n            return { loading: false, error: action.payload };\n        case USER_DELETE_RESET:\n            return { };\n        default:\n            return state;\n    }\n};\n\n\nexport const userUpdateReducer = (state = {}, action) => {\n    switch (action.type) {\n        case USER_UPDATE_REQUEST:\n            return { loading: true };\n        case USER_UPDATE_SUCCESS:\n            return { loading: false, success: true };\n        case USER_UPDATE_FAIL:\n            return { loading: false, error: action.payload };\n        case USER_UPDATE_RESET:\n            return {}\n        default:\n            return state;\n    }\n};","import {\n    CONSULTANTS_MY_DETAILS_REQUEST,\n    CONSULTANTS_MY_DETAILS_SUCCESS,\n    CONSULTANTS_MY_DETAILS_FAIL,\n    CONSULTANTS_MY_DETAILS_FOCUS,\n    CONSULTANTS_MY_DETAILS_RESET,\n    CONSULTANT_MY_REQUEST,\n    CONSULTANT_MY_SUCCESS,\n    CONSULTANT_MY_FAIL,\n    CONSULTANT_MY_RESET,\n    CONSULTANT_MY_UPDATE_REQUEST,\n    CONSULTANT_MY_UPDATE_SUCCESS,\n    CONSULTANT_MY_UPDATE_FAIL,\n    CONSULTANT_MY_UPDATE_RESET,\n    CONSULTANTS_ALL_ADMIN_DETAILS_REQUEST,\n    CONSULTANTS_ALL_ADMIN_DETAILS_SUCCESS,\n    CONSULTANTS_ALL_ADMIN_DETAILS_FAIL,\n    CONSULTANTS_ALL_ADMIN_DETAILS_RESET,\n    CONSULTANT_CREATE_REQUEST,\n    CONSULTANT_CREATE_SUCCESS,\n    CONSULTANT_CREATE_FAIL,\n    CONSULTANT_CREATE_RESET,\n    CONSULTANT_CDM_LIST_REQUEST,\n    CONSULTANT_CDM_LIST_SUCCESS,\n    CONSULTANT_CDM_LIST_FAIL,\n    CONSULTANT_CDM_LIST_RESET,\n    CONSULTANT_PRACTICE_LIST_REQUEST,\n    CONSULTANT_PRACTICE_LIST_SUCCESS,\n    CONSULTANT_PRACTICE_LIST_FAIL,\n    CONSULTANT_PRACTICE_LIST_RESET,\n    CONSULTANT_DELETE_REQUEST,\n    CONSULTANT_DELETE_SUCCESS,\n    CONSULTANT_DELETE_FAIL,\n    CONSULTANT_DELETE_RESET,\n    CONSULTANT_UPDATE_COMMENT_REQUEST,\n    CONSULTANT_UPDATE_COMMENT_SUCCESS,\n    CONSULTANT_UPDATE_COMMENT_FAIL,\n    CONSULTANT_UPDATE_COMMENT_RESET,\n    //CONSULTANT_ALL_ACCESS_REQUEST,\n    //CONSULTANT_ALL_ACCESS_SUCCESS,\n    //CONSULTANT_ALL_ACCESS_FAIL,\n    //CONSULTANT_ALL_ACCESS_RESET,\n    CONSULTANT_ALL_SKILLS_REQUEST,\n    CONSULTANT_ALL_SKILLS_SUCCESS,\n    CONSULTANT_ALL_SKILLS_FAIL,\n    CONSULTANT_ALL_SKILLS_RESET,\n    CONSULTANT_ADD_SKILL_REQUEST,\n    CONSULTANT_ADD_SKILL_SUCCESS,\n    CONSULTANT_ADD_SKILL_FAIL,\n    CONSULTANT_ADD_SKILL_RESET,\n    CONSULTANT_DELETE_SKILL_REQUEST,\n    CONSULTANT_DELETE_SKILL_SUCCESS,\n    CONSULTANT_DELETE_SKILL_FAIL,\n    CONSULTANT_DELETE_SKILL_RESET,\n    CONSULTANT_UPDATE_SKILL_REQUEST,\n    CONSULTANT_UPDATE_SKILL_SUCCESS,\n    CONSULTANT_UPDATE_SKILL_FAIL,\n    CONSULTANT_UPDATE_SKILL_RESET,\n    CONSULTANT_ALL_STAFF_REQUEST,\n    CONSULTANT_ALL_STAFF_SUCCESS,\n    CONSULTANT_ALL_STAFF_FAIL,\n    CONSULTANT_ALL_STAFF_RESET,\n    CONSULTANT_SKILLS_REQUEST,\n    CONSULTANT_SKILLS_SUCCESS,\n    CONSULTANT_SKILLS_FAIL,\n    CONSULTANT_SKILLS_RESET,\n    CONSULTANT_CDM_REQUEST,\n    CONSULTANT_CDM_SUCCESS,\n    CONSULTANT_CDM_FAIL,\n    CONSULTANT_CDM_RESET,\n    CONSULTANTS_ALL_LEADERS_REQUEST,\n    CONSULTANTS_ALL_LEADERS_SUCCESS,\n    CONSULTANTS_ALL_LEADERS_FAIL,\n    CONSULTANTS_ALL_LEADERS_RESET,\n    CONSULTANT_MASS_IMPORT_REQUEST,\n    CONSULTANT_MASS_IMPORT_SUCCESS,\n    CONSULTANT_MASS_IMPORT_FAIL,\n    CONSULTANT_MASS_IMPORT_RESET,\n    CONSULTANT_UPLOAD_WK_REQUEST,\n    CONSULTANT_UPLOAD_WK_SUCCESS,\n    CONSULTANT_UPLOAD_WK_FAIL,\n    CONSULTANT_UPLOAD_WK_RESET,\n    CONSULTANT_UPDATE_WK_REQUEST,\n    CONSULTANT_UPDATE_WK_SUCCESS,\n    CONSULTANT_UPDATE_WK_FAIL,\n    CONSULTANT_UPDATE_WK_RESET,\n    CONSULTANT_DELEGATE_UPDATE_REQUEST,\n    CONSULTANT_DELEGATE_UPDATE_SUCCESS,\n    CONSULTANT_DELEGATE_UPDATE_FAIL,\n    CONSULTANT_DELEGATE_UPDATE_RESET\n} from '../constants/consultantConstants';\n\nexport const consultantsMyListReducer = (state = {focus: 0}, action) => {\n    switch (action.type) {\n        case CONSULTANTS_MY_DETAILS_REQUEST:\n            return { ...state, loading: true };\n        case CONSULTANTS_MY_DETAILS_SUCCESS:\n            return { ...state, loading: false, consultantsMy: action.payload };\n        case CONSULTANTS_MY_DETAILS_FAIL:\n            return { ...state, loading: false, error: action.payload };\n        case CONSULTANTS_MY_DETAILS_FOCUS:\n            return { ...state, focus: action.payload }\n        case CONSULTANTS_MY_DETAILS_RESET:\n            return { focus: 0 }\n        default:\n            return state;\n    }\n};\n\n/*\nexport const consultantsMyAdminListReducer = (state = {\n    loading: true, \n    consultantsMyAdmin: [\n        {\n            name: '',\n            matricule: '',\n            arrival: '',\n            leaving: '',\n            seriority: '',\n            comment: '',\n            practice: ''\n        }],\n    focus: 0\n}, action) => {\n    switch (action.type) {\n        case CONSULTANTS_ALL_ADMIN_DETAILS_REQUEST:\n            return { ...state, loading: true };\n        case CONSULTANTS_ALL_ADMIN_DETAILS_SUCCESS:\n            return { ...state, loading: false, consultantsMyAdmin: action.payload };\n        case CONSULTANTS_ALL_ADMIN_DETAILS_FAIL:\n            return { ...state, loading: false, error: action.payload };\n        case CONSULTANTS_ALL_ADMIN_DETAILS_FOCUS:\n            return { ...state, focus: action.payload }\n        case CONSULTANTS_ALL_ADMIN_DETAILS_RESET:\n            return { loading: true, consultantsMyAdmin: [\n                                {\n                                    name: '',\n                                    matricule: '',\n                                    arrival: '',\n                                    leaving: '',\n                                    seriority: '',\n                                    comment: '',\n                                    practice: ''\n                                }], focus: 0 }\n        default:\n            return state;\n    }\n};\n*/\n/*\nexport const consultantMyReducer = (state = { consultant: {} }, action) => {\n    switch (action.type) {\n        case CONSULTANT_MY_REQUEST:\n            return { ...state, loading: true };\n        case CONSULTANT_MY_SUCCESS:\n            return { loading: false, consultant: action.payload };\n        case CONSULTANT_MY_FAIL:\n            return { loading: false, error: action.payload };\n        case CONSULTANT_MY_RESET:\n            return { consultant: {} }\n        default:\n            return state;\n    }\n};\n*/\n\nexport const consultantMyReducer = (state = {}, action) => {\n    switch (action.type) {\n        case CONSULTANT_MY_REQUEST:\n            return { loading: true };\n        case CONSULTANT_MY_SUCCESS:\n            return { loading: false, consultant: action.payload };\n        case CONSULTANT_MY_FAIL:\n            return { loading: false, error: action.payload };\n        case CONSULTANT_MY_RESET:\n            return {}\n        default:\n            return state;\n    }\n};\n\nexport const consultantMyUpdateReducer = (state = {}, action) => {\n    switch (action.type) {\n        case CONSULTANT_MY_UPDATE_REQUEST:\n            return { loading: true };\n        case CONSULTANT_MY_UPDATE_SUCCESS:\n            return { loading: false, success: true };\n        case CONSULTANT_MY_UPDATE_FAIL:\n            return { loading: false, error: action.payload };\n        case CONSULTANT_MY_UPDATE_RESET:\n            return { }\n        default:\n            return state;\n    }\n};\n\nexport const consultantDelegateUpdateReducer = (state = {}, action) => {\n    switch (action.type) {\n        case CONSULTANT_DELEGATE_UPDATE_REQUEST:\n            return { loading: true };\n        case CONSULTANT_DELEGATE_UPDATE_SUCCESS:\n            return { loading: false, success: true };\n        case CONSULTANT_DELEGATE_UPDATE_FAIL:\n            return { loading: false, error: action.payload };\n        case CONSULTANT_DELEGATE_UPDATE_RESET:\n            return { }\n        default:\n            return state;\n    }\n};\n\nexport const consultantCreateReducer = (state = {}, action) => {\n    switch (action.type) {\n        case CONSULTANT_CREATE_REQUEST:\n            return { loading: true };\n        case CONSULTANT_CREATE_SUCCESS:\n            return { loading: false, success: true, consultantCreated: action.payload };\n        case CONSULTANT_CREATE_FAIL:\n            return { loading: false, error: action.payload };\n        case CONSULTANT_CREATE_RESET:\n            return { }\n        default:\n            return state;\n    }\n};\n\nexport const consultantDeleteReducer = (state = {}, action) => {\n    switch (action.type) {\n        case CONSULTANT_DELETE_REQUEST:\n            return { loading: true };\n        case CONSULTANT_DELETE_SUCCESS:\n            return { loading: false, success: true };\n        case CONSULTANT_DELETE_FAIL:\n            return { loading: false, error: action.payload };\n        case CONSULTANT_DELETE_RESET:\n            return { }\n        default:\n            return state;\n    }\n};\n\nexport const consultantCDMListReducer = (state = {}, action) => {\n    switch (action.type) {\n        case CONSULTANT_CDM_LIST_REQUEST:\n            return { loading: true };\n        case CONSULTANT_CDM_LIST_SUCCESS:\n            return { loading: false, cdmList: action.payload };\n        case CONSULTANT_CDM_LIST_FAIL:\n            return { loading: false, error: action.payload };\n        case CONSULTANT_CDM_LIST_RESET:\n            return {}\n        default:\n            return state;\n    }\n};\n\nexport const consultantPracticeListReducer = (state = {}, action) => {\n    switch (action.type) {\n        case CONSULTANT_PRACTICE_LIST_REQUEST:\n            return { loading: true };\n        case CONSULTANT_PRACTICE_LIST_SUCCESS:\n            return { loading: false, practiceList: action.payload };\n        case CONSULTANT_PRACTICE_LIST_FAIL:\n            return { loading: false, error: action.payload };\n        case CONSULTANT_PRACTICE_LIST_RESET:\n            return {}\n        default:\n            return state;\n    }\n};\n\nexport const consultantUpdateCommentReducer = (state = { }, action) => {\n    switch (action.type) {\n        case CONSULTANT_UPDATE_COMMENT_REQUEST:\n            return { loading: true };\n        case CONSULTANT_UPDATE_COMMENT_SUCCESS:\n            return { loading: false, success: true };\n        case CONSULTANT_UPDATE_COMMENT_FAIL:\n            return { loading: false, error: action.payload };\n        case CONSULTANT_UPDATE_COMMENT_RESET:\n            return {}\n        default:\n            return state;\n    }\n};\n\nexport const consultantsMyAdminListReducer = (state = {}, action) => {\n    switch (action.type) {\n        case CONSULTANTS_ALL_ADMIN_DETAILS_REQUEST:\n            return { loading: true };\n        case CONSULTANTS_ALL_ADMIN_DETAILS_SUCCESS:\n            return { \n                loading: false, \n                consultantsMyAdmin: action.payload.consultants,\n                pages: action.payload.pages,\n                page: action.payload.page,\n                count: action.payload.count\n            };\n        case CONSULTANTS_ALL_ADMIN_DETAILS_FAIL:\n            return { loading: false, error: action.payload };\n        case CONSULTANTS_ALL_ADMIN_DETAILS_RESET:\n            return {}\n        default:\n            return state;\n    }\n};\n\nexport const consultantsAllLeadersReducer = (state = {}, action) => {\n    switch (action.type) {\n        case CONSULTANTS_ALL_LEADERS_REQUEST:\n            return { loading: true };\n        case CONSULTANTS_ALL_LEADERS_SUCCESS:\n            return { loading: false, leaderslist: action.payload };\n        case CONSULTANTS_ALL_LEADERS_FAIL:\n            return { loading: false, error: action.payload };\n        case CONSULTANTS_ALL_LEADERS_RESET:\n            return {}\n        default:\n            return state;\n    }\n};\n\nexport const consultantGetCDMReducer = (state = { }, action) => {\n    switch (action.type) {\n        case CONSULTANT_CDM_REQUEST:\n            return { loading: true };\n        case CONSULTANT_CDM_SUCCESS:\n            return { loading: false, success: true, cdm: action.payload };\n        case CONSULTANT_CDM_FAIL:\n            return { loading: false, error: action.payload };\n        case CONSULTANT_CDM_RESET:\n            return {}\n        default:\n            return state;\n    }\n};\n\nexport const consultantSkillsReducer = (state = {}, action) => {\n    switch (action.type) {\n        case CONSULTANT_SKILLS_REQUEST:\n            return { loading: true };\n        case CONSULTANT_SKILLS_SUCCESS:\n            return { loading: false, skills: action.payload };\n        case CONSULTANT_SKILLS_FAIL:\n            return { loading: false, error: action.payload };\n        case CONSULTANT_SKILLS_RESET:\n            return {}\n        default:\n            return state;\n    }\n};\n\nexport const consultantAllSkillsReducer = (state = {}, action) => {\n    switch (action.type) {\n        case CONSULTANT_ALL_SKILLS_REQUEST:\n            return { loading: true };\n        case CONSULTANT_ALL_SKILLS_SUCCESS:\n            return { loading: false, skills: action.payload };\n        case CONSULTANT_ALL_SKILLS_FAIL:\n            return { loading: false, error: action.payload };\n        case CONSULTANT_ALL_SKILLS_RESET:\n            return {}\n        default:\n            return state;\n    }\n};\n\nexport const consultantAllStaffsReducer = (state = {}, action) => {\n    switch (action.type) {\n        case CONSULTANT_ALL_STAFF_REQUEST:\n            return { loading: true };\n        case CONSULTANT_ALL_STAFF_SUCCESS:\n            return { loading: false, staffings: action.payload };\n        case CONSULTANT_ALL_STAFF_FAIL:\n            return { loading: false, error: action.payload };\n        case CONSULTANT_ALL_STAFF_RESET:\n            return {}\n        default:\n            return state;\n    }\n};\n\nexport const consultantAddSkillReducer = (state = {}, action) => {\n    switch (action.type) {\n        case CONSULTANT_ADD_SKILL_REQUEST:\n            return { loading: true };\n        case CONSULTANT_ADD_SKILL_SUCCESS:\n            return { loading: false, success: true };\n        case CONSULTANT_ADD_SKILL_FAIL:\n            return { loading: false, success: false, error: action.payload };\n        case CONSULTANT_ADD_SKILL_RESET:\n            return {}\n        default:\n            return state;\n    }\n};\n\nexport const consultantDeleteSkillReducer = (state = {}, action) => {\n    switch (action.type) {\n        case CONSULTANT_DELETE_SKILL_REQUEST:\n            return { loading: true };\n        case CONSULTANT_DELETE_SKILL_SUCCESS:\n            return { loading: false, success: true };\n        case CONSULTANT_DELETE_SKILL_FAIL:\n            return { loading: false, success: false, error: action.payload };\n        case CONSULTANT_DELETE_SKILL_RESET:\n            return {}\n        default:\n            return state;\n    }\n};\n\nexport const consultantUpdateSkillReducer = (state = {}, action) => {\n    switch (action.type) {\n        case CONSULTANT_UPDATE_SKILL_REQUEST:\n            return { loading: true };\n        case CONSULTANT_UPDATE_SKILL_SUCCESS:\n            return { loading: false, success: true };\n        case CONSULTANT_UPDATE_SKILL_FAIL:\n            return { loading: false, success: false, error: action.payload };\n        case CONSULTANT_UPDATE_SKILL_RESET:\n            return {}\n        default:\n            return state;\n    }\n};\n\nexport const consultantsMassImportReducer = (state = {}, action) => {\n    switch (action.type) {\n        case CONSULTANT_MASS_IMPORT_REQUEST:\n            return { loading: true };\n        case CONSULTANT_MASS_IMPORT_SUCCESS:\n            return { loading: false, success: true };\n        case CONSULTANT_MASS_IMPORT_FAIL:\n            return { loading: false, success: false, error: action.payload };\n        case CONSULTANT_MASS_IMPORT_RESET:\n            return {}\n        default:\n            return state;\n    }\n};\n\nexport const consultantUploadWkReducer = (state = {}, action) => {\n    switch (action.type) {\n        case CONSULTANT_UPLOAD_WK_REQUEST:\n            return { loading: true };\n        case CONSULTANT_UPLOAD_WK_SUCCESS:\n            return { loading: false, success: true, path: action.payload };\n        case CONSULTANT_UPLOAD_WK_FAIL:\n            return { loading: false, success: false, error: action.payload };\n        case CONSULTANT_UPLOAD_WK_RESET:\n            return {}\n        default:\n            return state;\n    }\n};\n\nexport const consultantUpdateWkReducer = (state = {}, action) => {\n    switch (action.type) {\n        case CONSULTANT_UPDATE_WK_REQUEST:\n            return { loading: true };\n        case CONSULTANT_UPDATE_WK_SUCCESS:\n            return { loading: false, success: true, message: action.payload };\n        case CONSULTANT_UPDATE_WK_FAIL:\n            return { loading: false, success: false, error: action.payload };\n        case CONSULTANT_UPDATE_WK_RESET:\n            return {}\n        default:\n            return state;\n    }\n};","import {\n    PXX_LIST_REQUEST,\n    PXX_LIST_SUCCESS,\n    PXX_LIST_FAIL,\n    PXX_LIST_RESET,\n    PXX_MY_TO_EDIT_REQUEST,\n    PXX_MY_TO_EDIT_SUCCESS,\n    PXX_MY_TO_EDIT_FAIL,\n    PXX_MY_TO_EDIT_RESET,\n    PXX_UPDATE_REQUEST,\n    PXX_UPDATE_SUCCESS,\n    PXX_UPDATE_FAIL,\n    PXX_UPDATE_RESET,\n    PXX_TACE_REQUEST,\n    PXX_TACE_SUCCESS,\n    PXX_TACE_FAIL,\n    PXX_TACE_RESET,\n    PXX_AVAILABILITIES_REQUEST,\n    PXX_AVAILABILITIES_SUCCESS,\n    PXX_AVAILABILITIES_FAIL,\n    PXX_AVAILABILITIES_RESET,\n    PXX_ALL_REQUEST,\n    PXX_ALL_SUCCESS,\n    PXX_ALL_FAIL,\n    PXX_ALL_RESET,\n    PXX_IMPORT_MASS_REQUEST,\n    PXX_IMPORT_MASS_SUCCESS,\n    PXX_IMPORT_MASS_FAIL,\n    PXX_IMPORT_MASS_RESET,\n    PXX_IMPORT_LINE_REQUEST,\n    PXX_IMPORT_LINE_SUCCESS,\n    PXX_IMPORT_LINE_FAIL,\n    PXX_IMPORT_LINE_RESET,\n    PXX_UPLOAD_FILE_REQUEST,\n    PXX_UPLOAD_FILE_SUCCESS,\n    PXX_UPLOAD_FILE_FAIL,\n    PXX_UPLOAD_FILE_RESET,\n    PXX_UPDATE_PXX_REQUEST,\n    PXX_UPDATE_PXX_SUCCESS,\n    PXX_UPDATE_PXX_FAIL,\n    PXX_UPDATE_PXX_RESET\n} from '../constants/pxxConstants';\n\nexport const pxxMyToEditReducer = (state= { pxx: [] }, action) => {\n    switch(action.type) {\n        case PXX_MY_TO_EDIT_REQUEST:\n            return { loading: true };\n        case PXX_MY_TO_EDIT_SUCCESS:\n            return { loading: false, pxx: action.payload };\n        case PXX_MY_TO_EDIT_FAIL:\n            return { loading: false, error: action.payload };\n        case PXX_MY_TO_EDIT_RESET:\n            return { pxx: [] };\n        default:\n            return state ;\n    }\n};\n\nexport const pxxUpdateReducer = (state= { }, action) => {\n    switch(action.type) {\n        case PXX_UPDATE_REQUEST:\n            return { loading: true };\n        case PXX_UPDATE_SUCCESS:\n            return { loading: false, success: true };\n        case PXX_UPDATE_FAIL:\n            return { loading: false, error: action.payload };\n        case PXX_UPDATE_RESET:\n            return {};\n        default:\n            return state ;\n    }\n};\n\nexport const pxxTACEReducer = (state= {}, action) => {\n    switch(action.type) {\n        case PXX_TACE_REQUEST:\n            return { loading: true, success: false };\n        case PXX_TACE_SUCCESS:\n            return { loading: false, success: true, tace: action.payload };\n        case PXX_TACE_FAIL:\n            return { loading: false, error: action.payload };\n        case PXX_TACE_RESET:\n            return {};\n        default:\n            return state ;\n    }\n};\n\nexport const pxxAvailabilitiesReducer = (state= {}, action) => {\n    switch(action.type) {\n        case PXX_AVAILABILITIES_REQUEST:\n            return { loading: true, success: false };\n        case PXX_AVAILABILITIES_SUCCESS:\n            return { loading: false, success: true, availabilities: action.payload };\n        case PXX_AVAILABILITIES_FAIL:\n            return { loading: false, error: action.payload };\n        case PXX_AVAILABILITIES_RESET:\n            return {};\n        default:\n            return state ;\n    }\n};\n\nexport const pxxAllListReducer = (state= {}, action) => {\n    switch(action.type) {\n        case PXX_ALL_REQUEST:\n            return { loading: true, success: false };\n        case PXX_ALL_SUCCESS:\n            return { \n                loading: false, \n                success: true, \n                pxxs: action.payload.pxxs,\n                pages: action.payload.pages,\n                page: action.payload.page,\n                count: action.payload.count\n            };\n        case PXX_ALL_FAIL:\n            return { loading: false, error: action.payload };\n        case PXX_ALL_RESET:\n            return {};\n        default:\n            return state ;\n    }\n};\n\n/* export const pxxImportMassReducer = (state= { pxx: [] }, action) => {\n    switch(action.type) {\n        case PXX_IMPORT_MASS_REQUEST:\n            return { loading: true };\n        case PXX_IMPORT_MASS_SUCCESS:\n            return { \n                loading: false, \n                success:true, \n                message: action.payload.message,\n                datas: action.payload.datas\n            };\n        case PXX_IMPORT_MASS_FAIL:\n            return { loading: false, error: action.payload };\n        case PXX_IMPORT_MASS_RESET:\n            return { pxx: [] };\n        default:\n            return state ;\n    }\n}; */\n\nexport const pxxImportLineReducer = (state= { pxx: [] }, action) => {\n    switch(action.type) {\n        case PXX_IMPORT_LINE_REQUEST:\n            return { loading: true };\n        case PXX_IMPORT_LINE_SUCCESS:\n            return { loading: false, success:true, updatedLine: action.payload };\n        case PXX_IMPORT_LINE_FAIL:\n            return { loading: false, error: action.payload };\n        case PXX_IMPORT_LINE_RESET:\n            return { pxx: [] };\n        default:\n            return state ;\n    }\n};\n\nexport const pxxUploadFileReducer = (state= { }, action) => {\n    switch(action.type) {\n        case PXX_UPLOAD_FILE_REQUEST:\n            return { loading: true };\n        case PXX_UPLOAD_FILE_SUCCESS:\n            return { loading: false, success:true, path: action.payload };\n        case PXX_UPLOAD_FILE_FAIL:\n            return { loading: false, error: action.payload };\n        case PXX_UPLOAD_FILE_RESET:\n            return { };\n        default:\n            return state ;\n    }\n};\n\nexport const updatePxxReducer = (state= { }, action) => {\n    switch(action.type) {\n        case PXX_UPDATE_PXX_REQUEST:\n            return { loading: true };\n        case PXX_UPDATE_PXX_SUCCESS:\n            return { loading: false, success:true, message: action.payload };\n        case PXX_UPDATE_PXX_FAIL:\n            return { loading: false, error: action.payload };\n        case PXX_UPDATE_PXX_RESET:\n            return { };\n        default:\n            return state ;\n    }\n};\n\n\n// TO DELETE //\n\nexport const pxxListReducer = (state= { pxxs: { pxxMonthInformation: [], pxxUserList: [] } }, action) => {\n    switch(action.type) {\n        case PXX_LIST_REQUEST:\n            return { loading: true, pxxs: {} };\n        case PXX_LIST_SUCCESS:\n            return { loading: false, pxxs: action.payload };\n        case PXX_LIST_FAIL:\n            return { loading: false, error: action.payload };\n        case PXX_LIST_RESET:\n            return { pxxs: { pxxMonthInformation: [], pxxUserList: [] } };\n        default:\n            return state ;\n    }\n};","import { \n    SKILL_LIST_REQUEST, \n    SKILL_LIST_RESET, \n    SKILL_LIST_SUCCESS, \n    SKILL_LIST_FAIL, \n    SKILL_DELETE_REQUEST,\n    SKILL_DELETE_SUCCESS,\n    SKILL_DELETE_FAIL,\n    SKILL_DELETE_RESET,\n    SKILL_CREATE_REQUEST,\n    SKILL_CREATE_SUCCESS,\n    SKILL_CREATE_FAIL,\n    SKILL_CREATE_RESET\n} from \"../constants/skillsConstants\";\n\nexport const skillListReducer = (state= {}, action) => {\n    switch(action.type) {\n        case SKILL_LIST_REQUEST:\n            return { loading: true, success: false };\n        case SKILL_LIST_SUCCESS:\n            return { \n                loading: false, \n                success: true, \n                skills: action.payload.skills,\n                pages: action.payload.pages,\n                page: action.payload.page,\n                count: action.payload.count\n             };\n        case SKILL_LIST_FAIL:\n            return { loading: false, error: action.payload };\n        case SKILL_LIST_RESET:\n            return {};\n        default:\n            return state ;\n    }\n};\n\nexport const skillDelteReducer = (state= {}, action) => {\n    switch(action.type) {\n        case SKILL_DELETE_REQUEST:\n            return { loading: true, success: false };\n        case SKILL_DELETE_SUCCESS:\n            return { loading: false, success: true };\n        case SKILL_DELETE_FAIL:\n            return { loading: false, error: action.payload };\n        case SKILL_DELETE_RESET:\n            return {};\n        default:\n            return state ;\n    }\n};\n\nexport const skillCreateReducer = (state= {}, action) => {\n    switch(action.type) {\n        case SKILL_CREATE_REQUEST:\n            return { loading: true, success: false };\n        case SKILL_CREATE_SUCCESS:\n            return { loading: false, success: true };\n        case SKILL_CREATE_FAIL:\n            return { loading: false, error: action.payload };\n        case SKILL_CREATE_RESET:\n            return {};\n        default:\n            return state ;\n    }\n};","import { \n    DEAL_ALL_LIST_FAIL,\n    DEAL_ALL_LIST_REQUEST,\n    DEAL_ALL_LIST_RESET,\n    DEAL_ALL_LIST_SUCCESS,\n    DEAL_CREATE_FAIL, \n    DEAL_CREATE_REQUEST, \n    DEAL_CREATE_RESET, \n    DEAL_CREATE_SUCCESS, \n    DEAL_DELETE_FAIL, \n    DEAL_DELETE_REQUEST,\n    DEAL_DELETE_RESET,\n    DEAL_DELETE_SUCCESS,\n    DEAL_EDIT_FAIL,\n    DEAL_EDIT_REQUEST,\n    DEAL_EDIT_RESET,\n    DEAL_EDIT_SUCCESS,\n    DEAL_MASS_IMPORT_FAIL,\n    DEAL_MASS_IMPORT_REQUEST,\n    DEAL_MASS_IMPORT_RESET,\n    DEAL_MASS_IMPORT_SUCCESS,\n    DEAL_OLD_FAIL,\n    DEAL_OLD_REQUEST,\n    DEAL_OLD_RESET,\n    DEAL_OLD_SUCCESS,\n    DEAL_UPDATE_FAIL,\n    DEAL_UPDATE_REQUEST,\n    DEAL_UPDATE_RESET,\n    DEAL_UPDATE_SUCCESS\n} from \"../constants/dealConstants\";\n\nexport const dealCreateReducer = (state = {}, action) => {\n    switch (action.type) {\n        case DEAL_CREATE_REQUEST:\n            return { loading: true };\n        case DEAL_CREATE_SUCCESS:\n            return { loading: false, success: true, createId: action.payload };\n        case DEAL_CREATE_FAIL:\n            return { loading: false, error: action.payload };\n        case DEAL_CREATE_RESET:\n            return {}\n        default:\n            return state;\n    }\n};\n\nexport const dealUpdateReducer = (state = {}, action) => {\n    switch (action.type) {\n        case DEAL_UPDATE_REQUEST:\n            return { loading: true };\n        case DEAL_UPDATE_SUCCESS:\n            return { loading: false, success: true };\n        case DEAL_UPDATE_FAIL:\n            return { loading: false, error: action.payload };\n        case DEAL_UPDATE_RESET:\n            return {}\n        default:\n            return state;\n    }\n};\n\nexport const dealAllListReducer = (state = {}, action) => {\n    switch (action.type) {\n        case DEAL_ALL_LIST_REQUEST:\n            return { loading: true };\n        case DEAL_ALL_LIST_SUCCESS:\n            return { \n                loading: false, \n                success: true,\n                deals: action.payload.deals,\n                pages: action.payload.pages,\n                page: action.payload.page,\n                count: action.payload.count\n            };\n        case DEAL_ALL_LIST_FAIL:\n            return { loading: false, error: action.payload };\n        case DEAL_ALL_LIST_RESET:\n            return {}\n        default:\n            return state;\n    }\n};\n\nexport const dealDeleteReducer = (state = {}, action) => {\n    switch (action.type) {\n        case DEAL_DELETE_REQUEST:\n            return { loading: true };\n        case DEAL_DELETE_SUCCESS:\n            return { loading: false, success: true };\n        case DEAL_DELETE_FAIL:\n            return { loading: false, error: action.payload };\n        case DEAL_DELETE_RESET:\n            return {}\n        default:\n            return state;\n    }\n};\n\nexport const dealEditeReducer = (state = {}, action) => {\n    switch (action.type) {\n        case DEAL_EDIT_REQUEST:\n            return { loading: true };\n        case DEAL_EDIT_SUCCESS:\n            return { loading: false, success: true, deal: action.payload };\n        case DEAL_EDIT_FAIL:\n            return { loading: false, error: action.payload };\n        case DEAL_EDIT_RESET:\n            return {}\n        default:\n            return state;\n    }\n};\n\nexport const dealOldReducer = (state = {}, action) => {\n    switch (action.type) {\n        case DEAL_OLD_REQUEST:\n            return { loading: true };\n        case DEAL_OLD_SUCCESS:\n            return { loading: false, success: true, oldDeals: action.payload };\n        case DEAL_OLD_FAIL:\n            return { loading: false, error: action.payload };\n        case DEAL_OLD_RESET:\n            return {}\n        default:\n            return state;\n    }\n};\n\nexport const dealsImportMassReducer = (state = {}, action) => {\n    switch (action.type) {\n        case DEAL_MASS_IMPORT_REQUEST:\n            return { loading: true };\n        case DEAL_MASS_IMPORT_SUCCESS:\n            return { loading: false, success: true, datas: action.payload.datas };\n        case DEAL_MASS_IMPORT_FAIL:\n            return { loading: false, error: action.payload };\n        case DEAL_MASS_IMPORT_RESET:\n            return {}\n        default:\n            return state;\n    }\n};","import { \n    ACCESS_LIST_FAIL, \n    ACCESS_LIST_REQUEST, \n    ACCESS_LIST_RESET, \n    ACCESS_LIST_SUCCESS, \n    ACCESS_UPDATE_FRONTACCESS_FAIL, \n    ACCESS_UPDATE_FRONTACCESS_REQUEST,\n    ACCESS_UPDATE_FRONTACCESS_SUCCESS,\n    ACCESS_UPDATE_FRONTACCESS_RESET\n} from \"../constants/accessConstants\";\n\nexport const accessListReducer = (state = {}, action) => {\n    switch (action.type) {\n        case ACCESS_LIST_REQUEST:\n            return { loading: true };\n        case ACCESS_LIST_SUCCESS:\n            return { loading: false, access: action.payload };\n        case ACCESS_LIST_FAIL:\n            return { loading: false, error: action.payload };\n        case ACCESS_LIST_RESET:\n            return {}\n        default:\n            return state;\n    }\n};\n\nexport const accessFrontUpdateReducer = (state = {}, action) => {\n    switch (action.type) {\n        case ACCESS_UPDATE_FRONTACCESS_REQUEST:\n            return { loading: true };\n        case ACCESS_UPDATE_FRONTACCESS_SUCCESS:\n            return { loading: false, success: true };\n        case ACCESS_UPDATE_FRONTACCESS_FAIL:\n            return { loading: false, error: action.payload };\n        case ACCESS_UPDATE_FRONTACCESS_RESET:\n            return {}\n        default:\n            return state;\n    }\n};","import { \n    CLIENT_ALL_FAIL, \n    CLIENT_ALL_REQUEST, \n    CLIENT_ALL_RESET, \n    CLIENT_ALL_SUCCESS, \n    CLIENT_CREATE_FAIL, \n    CLIENT_CREATE_REQUEST,\n    CLIENT_CREATE_RESET,\n    CLIENT_CREATE_SUCCESS,\n    CLIENT_UPDATE_FAIL,\n    CLIENT_UPDATE_REQUEST,\n    CLIENT_UPDATE_SUCCESS,\n    CLIENT_UPDATE_RESET,\n    CLIENT_DELETE_REQUEST,\n    CLIENT_DELETE_SUCCESS,\n    CLIENT_DELETE_FAIL,\n    CLIENT_DELETE_RESET\n} from \"../constants/clientConstants\";\n\nexport const clientAllReducer = (state = { }, action) => {\n    switch (action.type) {\n        case CLIENT_ALL_REQUEST:\n            return { loading: true };\n        case CLIENT_ALL_SUCCESS:\n            return { \n                loading: false, \n                success: true, \n                clients: action.payload.clients,\n                page: action.payload.page,\n                pages: action.payload.pages,\n                count: action.payload.count\n            };\n        case CLIENT_ALL_FAIL:\n            return { loading: false, error: action.payload };\n        case CLIENT_ALL_RESET:\n            return {}\n        default:\n            return state;\n    }\n};\n\nexport const clientCreateReducer = (state = { }, action) => {\n    switch (action.type) {\n        case CLIENT_CREATE_REQUEST:\n            return { loading: true };\n        case CLIENT_CREATE_SUCCESS:\n            return { loading: false, success: true };\n        case CLIENT_CREATE_FAIL:\n            return { loading: false, error: action.payload };\n        case CLIENT_CREATE_RESET:\n            return {}\n        default:\n            return state;\n    }\n};\n\nexport const clientUpdateReducer = (state = { }, action) => {\n    switch (action.type) {\n        case CLIENT_UPDATE_REQUEST:\n            return { loading: true };\n        case CLIENT_UPDATE_SUCCESS:\n            return { loading: false, success: true };\n        case CLIENT_UPDATE_FAIL:\n            return { loading: false, error: action.payload };\n        case CLIENT_UPDATE_RESET:\n            return {}\n        default:\n            return state;\n    }\n};\n\nexport const clientDeleteReducer = (state = { }, action) => {\n    switch (action.type) {\n        case CLIENT_DELETE_REQUEST:\n            return { loading: true };\n        case CLIENT_DELETE_SUCCESS:\n            return { loading: false, success: true };\n        case CLIENT_DELETE_FAIL:\n            return { loading: false, error: action.payload };\n        case CLIENT_DELETE_RESET:\n            return {}\n        default:\n            return state;\n    }\n};","import { \n    TACE_CREATE_FAIL,\n    TACE_CREATE_REQUEST,\n    TACE_CREATE_RESET,\n    TACE_CREATE_SUCCESS,\n} from \"../constants/taceConstants\";\n\nexport const createTaceReducer = (state= {}, action) => {\n    switch(action.type) {\n        case TACE_CREATE_REQUEST:\n            return { loading: true, success: false };\n        case TACE_CREATE_SUCCESS:\n            return { loading: false, taceData: action.payload };\n        case TACE_CREATE_FAIL:\n            return { loading: false, error: action.payload };\n        case TACE_CREATE_RESET:\n            return {};\n        default:\n            return state ;\n    }\n};","import { \n    EMAIL_CONTACTS_LIST_FAIL, \n    EMAIL_CONTACTS_LIST_REQUEST, \n    EMAIL_CONTACTS_LIST_RESET, \n    EMAIL_CONTACTS_LIST_SUCCESS, \n    EMAIL_SEND_DECISION_FAIL, \n    EMAIL_SEND_DECISION_REQUEST,\n    EMAIL_SEND_DECISION_SUCCESS,\n    EMAIL_SEND_DECISION_RESET\n} from \"../constants/emailConstants\";\n\nexport const contactsListReducer = (state= { }, action) => {\n    switch(action.type) {\n        case EMAIL_CONTACTS_LIST_REQUEST:\n            return { loading: true };\n        case EMAIL_CONTACTS_LIST_SUCCESS:\n            return { loading: false, contacts: action.payload };\n        case EMAIL_CONTACTS_LIST_FAIL:\n            return { loading: false, error: action.payload };\n        case EMAIL_CONTACTS_LIST_RESET:\n            return { };\n        default:\n            return state ;\n    }\n};\n\nexport const sendOneEmailReducer = (state= { }, action) => {\n    switch(action.type) {\n        case EMAIL_SEND_DECISION_REQUEST:\n            return { loading: true };\n        case EMAIL_SEND_DECISION_SUCCESS:\n            return { success:true, loading: false, email: action.payload.email };\n        case EMAIL_SEND_DECISION_FAIL:\n            return { loading: false, error: action.payload };\n        case EMAIL_SEND_DECISION_RESET:\n            return { };\n        default:\n            return state ;\n    }\n};","import axios from 'axios';\nimport { CONSULTANTS_MY_DETAILS_RESET, CONSULTANT_MY_RESET } from '../constants/consultantConstants';\nimport { PXX_LIST_RESET, PXX_MY_TO_EDIT_RESET, PXX_UPDATE_RESET } from '../constants/pxxConstants';\nimport { \n\n    USER_REGISTER_REQUEST,\n    USER_REGISTER_SUCCESS,\n    USER_REGISTER_FAIL,\n    USER_DELETE_REQUEST, \n    USER_DELETE_SUCCESS,\n    USER_DELETE_FAIL,\n    USER_DETAILS_REQUEST,\n    USER_DETAILS_SUCCESS, \n    USER_DETAILS_FAIL, \n    USER_LIST_REQUEST,\n    USER_LIST_SUCCESS,\n    USER_LIST_FAIL, \n    USER_LOGIN_REQUEST,\n    USER_LOGIN_SUCCESS,\n    USER_LOGIN_FAIL,\n    USER_LOGOUT,\n    USER_UPDATE_PROFILE_REQUEST,\n    USER_UPDATE_PROFILE_SUCCESS,\n    USER_UPDATE_PROFILE_FAIL,\n    USER_UPDATE_REQUEST,\n    USER_UPDATE_SUCCESS,\n    USER_UPDATE_FAIL,\n    USER_REGISTER_RESET,\n    USER_REDIRECT_AZ_REQUEST,\n    USER_REDIRECT_AZ_SUCCESS,\n    USER_REDIRECT_AZ_FAIL\n} from \"../constants/userConstants\";\n\n\n//export const login = (email, password) => async(dispatch) => {\nexport const login = (type, param) => async (dispatch) => {\n    try {\n        dispatch({\n            type: USER_LOGIN_REQUEST,\n        });\n\n        const config = {\n            headers:{\n                'Content-type': 'Application/json'\n            }\n        };\n\n        let data = '';\n        if (type === 'LOCAL') {\n            // data contains all shared user informations\n            data  = await axios.post('/api/users/login', {email: param.email, password: param.password}, config);\n        }\n\n        if (type === 'AZ') {\n            data = await axios.get(`/api/users/loginAz?code=${param.code}`, config);\n        }\n\n        const userInfo = {\n            ...data.data,\n            accountType: type,\n        }\n\n        dispatch({\n            type: USER_LOGIN_SUCCESS,\n            payload: userInfo\n        });\n\n        localStorage.setItem('userInfo', JSON.stringify(userInfo))\n\n    } catch (error) {\n        dispatch({\n            type: USER_LOGIN_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\nexport const getRedirectAz = () => async(dispatch) => {\n    try {\n        dispatch({\n            type: USER_REDIRECT_AZ_REQUEST,\n        });\n\n        const config = {\n            headers:{\n                'Content-type': 'Application/json'\n            }\n        };\n\n        // Check if user is configured in app\n        const { data } = await axios.get('/api/users/redirectAz', config);\n\n        dispatch({\n            type: USER_REDIRECT_AZ_SUCCESS,\n            payload: data\n        });\n\n    } catch (error) {\n        dispatch({\n            type: USER_REDIRECT_AZ_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\nexport const logout = () => (dispatch) => {\n    //localStorage.removeItem('userInfo');\n    localStorage.clear();\n    dispatch({type: USER_LOGOUT});\n    dispatch({type: USER_REGISTER_RESET});\n    dispatch({type: CONSULTANTS_MY_DETAILS_RESET});\n    dispatch({type: CONSULTANT_MY_RESET});\n    dispatch({type: PXX_LIST_RESET});\n    dispatch({type: PXX_MY_TO_EDIT_RESET});\n    dispatch({type: PXX_UPDATE_RESET});\n};\n\nexport const register = (name, email, password) => async(dispatch) => {\n    try {\n        dispatch({\n            type: USER_REGISTER_REQUEST,\n        });\n\n        const config = {\n            headers:{\n                'Content-type': 'Application/json'\n            }\n        };\n\n        // data contains all shared user informations\n        const { data } = await axios.post('/api/users', {name, email, password}, config);\n\n        dispatch({\n            type: USER_REGISTER_SUCCESS,\n            payload: data\n        });\n\n        /*\n        // we also want to inform user is logged\n        dispatch({\n            type: USER_LOGIN_SUCCESS,\n            payload: data\n        });\n        localStorage.setItem('userInfo', JSON.stringify(data))\n        */\n\n\n    } catch (error) {\n        dispatch({\n            type: USER_REGISTER_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\nexport const getUserDetails = (id) => async(dispatch, getState) => {\n    try {\n        dispatch({\n            type: USER_DETAILS_REQUEST,\n        });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers:{\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        // data contains all shared user informations\n        const { data } = await axios.get(`/api/users/${id}`, config);\n\n        dispatch({\n            type: USER_DETAILS_SUCCESS,\n            payload: data\n        });\n\n    } catch (error) {\n        dispatch({\n            type: USER_DETAILS_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\nexport const updateUserProfile = (user) => async(dispatch, getState) => {\n    try {\n\n        dispatch({\n            type: USER_UPDATE_PROFILE_REQUEST,\n        });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers:{\n                'Content-type': 'Application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        // data contains all shared user informations\n        const { data } = await axios.put(`/api/users/profile`, user, config);\n\n        dispatch({\n            type: USER_UPDATE_PROFILE_SUCCESS,\n            payload: data\n        });\n\n        // dispatch({\n        //     type: USER_LOGIN_SUCCESS,\n        //     payload: data,\n        // });\n\n        // dispatch({\n        //     type: USER_DETAILS_SUCCESS,\n        //     payload: data,\n        // });\n\n        //localStorage.setItem('userInfo', JSON.stringify(data));\n\n    } catch (error) {\n        dispatch({\n            type: USER_UPDATE_PROFILE_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\nexport const listUsers = (practice='', keyword='', pageNumber='', pageSize='15') => async(dispatch, getState) => {\n    try {\n\n        dispatch({\n            type: USER_LIST_REQUEST,\n        });\n\n        const { userLogin: { userInfo } } = getState();\n        //const userPractice = userInfo.consultantProfil.practice;\n\n        const config = {\n            headers:{\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        //const { data } = await axios.get(`/api/users`, config);\n        const { data } = await axios.get(`/api/users?practice=${practice}&keyword=${keyword}&pageNumber=${pageNumber}&pageSize=${pageSize}`, config);\n\n        dispatch({\n            type: USER_LIST_SUCCESS,\n            payload: data\n        });\n\n    } catch (error) {\n        dispatch({\n            type: USER_LIST_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\n\nexport const deleteUser = (id) => async(dispatch, getState) => {\n    try {\n\n        dispatch({\n            type: USER_DELETE_REQUEST,\n        });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers:{\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        await axios.delete(`/api/users/${id}`, config);\n\n        dispatch({\n            type: USER_DELETE_SUCCESS,\n        });\n\n    } catch (error) {\n        dispatch({\n            type: USER_DELETE_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\n\nexport const updateUser = (user) => async(dispatch, getState) => {\n    try {\n\n        dispatch({\n            type: USER_UPDATE_REQUEST,\n        });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers:{\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        await axios.put(`/api/users/${user._id}`, user, config);\n\n        dispatch({ type: USER_UPDATE_SUCCESS });\n\n    } catch (error) {\n        dispatch({\n            type: USER_UPDATE_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nconst DisplayChildren = ({ access, children }) => {\n\n    const userLogin = useSelector(state => state.userLogin);\n    const { userInfo } = userLogin;\n    let grantedAccess = false;\n\n    if (userInfo) {\n        const rule = userInfo.profil.frontAccess.filter(x => x.id === access);\n        if (rule.length > 0) {\n            grantedAccess = rule[0].mode !== 'no' ? true : false\n        }\n    }\n\n    return (\n        <span>\n            {grantedAccess && children}\n        </span>\n    )\n}\n\nexport default DisplayChildren;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { LinkContainer } from 'react-router-bootstrap';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport NavDropdown from 'react-bootstrap/NavDropdown';\nimport Container from 'react-bootstrap/Container';\nimport { logout } from '../actions/userActions';\nimport DisplayChildren from './DisplayChildren';\n\n// MSAL\nimport { useMsal } from \"@azure/msal-react\";\nimport { AuthenticatedTemplate, UnauthenticatedTemplate } from \"@azure/msal-react\";\n\n\nconst Header = () => {\n\n    // MSAL\n    const { instance } = useMsal();\n    \n    const dispatch = useDispatch();\n\n    const userLogin = useSelector(state => state.userLogin);\n    const { userInfo } = userLogin;\n\n    const logoutHandler = () => {\n        dispatch(logout());\n    };\n\n    const logoutHandlerMSAL = (logoutType) => {\n\n        if (logoutType === \"popup\") {\n            instance.logoutPopup();\n        } else if (logoutType === \"redirect\") {\n            instance.logoutRedirect();\n        }\n    }\n\n    return (\n        <header>\n            <Navbar bg=\"primary\" variant=\"dark\" expand=\"lg\" collapseOnSelect fixed=\"top\">\n                <Container>\n                    <LinkContainer to='/'>\n                        <Navbar.Brand>Performance App</Navbar.Brand>\n                    </LinkContainer>\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\n                        <Nav className=\"ml-auto\">\n\n                            <DisplayChildren access='staffingRequest'>\n                                <LinkContainer to='/staffing'>\n                                    <Nav.Link>Staffing Request</Nav.Link>\n                                </LinkContainer>\n                            </DisplayChildren>\n\n                            <DisplayChildren access='editMyPxx'>\n                                <LinkContainer to='/pxx'>\n                                    <Nav.Link>Edit My Pxx</Nav.Link>\n                                </LinkContainer>\n                            </DisplayChildren>\n\n                            {userInfo ? (\n\n                                <NavDropdown title={`${userInfo.name} (${userInfo.profil.profil && userInfo.profil.profil})` || 'no user'} id=\"username\">\n\n                                    <DisplayChildren access='editMyProfil'>\n                                        <LinkContainer to='/profile'>\n                                            <NavDropdown.Item>Edit My Profil</NavDropdown.Item>\n                                        </LinkContainer>\n                                    </DisplayChildren>\n\n                                    <DisplayChildren access={'manageConsultants'}>\n                                        <NavDropdown.Divider />\n                                        <LinkContainer to='/admin/consultants'>\n                                            <NavDropdown.Item>Manage Consultant</NavDropdown.Item>\n                                        </LinkContainer>\n                                    </DisplayChildren>\n\n                                    <DisplayChildren access={'manageDeals'}>\n                                        <NavDropdown.Divider />\n                                        <LinkContainer to='/admin/deals'>\n                                            <NavDropdown.Item>Manage Deals</NavDropdown.Item>\n                                        </LinkContainer>\n                                    </DisplayChildren>\n\n                                    <NavDropdown.Divider />\n                                    <UnauthenticatedTemplate>\n                                        <LinkContainer to='/login'>\n                                            <NavDropdown.Item onClick={logoutHandler}>Logout</NavDropdown.Item>\n                                        </LinkContainer>\n                                    </UnauthenticatedTemplate>\n                                    <AuthenticatedTemplate>\n                                        <LinkContainer to='/login'>\n                                            <NavDropdown.Item onClick={() => logoutHandlerMSAL('popup')}>Logout</NavDropdown.Item>\n                                        </LinkContainer>\n                                    </AuthenticatedTemplate>\n                                </NavDropdown>\n\n                            ) : (\n                                    <LinkContainer to='/login'>\n                                        <Nav.Link><i className='fas fa-user'></i>Sign In</Nav.Link>\n                                    </LinkContainer>)}\n\n                            <DisplayChildren access='adminMenu'>\n                                <NavDropdown title='admin'>\n\n                                    <DisplayChildren access='manageUsers'>\n                                        <LinkContainer to='/admin/users'>\n                                            <NavDropdown.Item>Manage Users</NavDropdown.Item>\n                                        </LinkContainer>\n                                    </DisplayChildren>\n\n                                    <DisplayChildren access='manageSkills'>\n                                        <NavDropdown.Divider />\n                                        <LinkContainer to='/admin/skills'>\n                                            <NavDropdown.Item>Manage Skills</NavDropdown.Item>\n                                        </LinkContainer>\n                                    </DisplayChildren>\n\n                                    <DisplayChildren access='manageProfils'>\n                                        <NavDropdown.Divider />\n                                        <LinkContainer to='/admin/profils'>\n                                            <NavDropdown.Item>Manage Profils</NavDropdown.Item>\n                                        </LinkContainer>\n                                    </DisplayChildren>\n\n                                    <DisplayChildren access='manageCompanies'>\n                                        <NavDropdown.Divider />\n                                        <LinkContainer to='/admin/companies'>\n                                            <NavDropdown.Item>Manage companies</NavDropdown.Item>\n                                        </LinkContainer>\n                                    </DisplayChildren>\n\n                                </NavDropdown>\n                            </DisplayChildren>\n                        </Nav>\n                    </Navbar.Collapse>\n                </Container>\n            </Navbar>\n        </header>\n    )\n}\n\nexport default Header\n","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nconst Footer = () => {\n    return (\n        <footer>\n            <Container>\n                <Row>\n                    <Col className='text-center py-3'>\n                        Copyright &copy; byJPR\n                    </Col>\n                </Row>\n            </Container>\n        </footer>\n    )\n}\n\nexport default Footer\n","import React from 'react';\nimport { Alert } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\n\nconst Message = ({ variant, children }) => {\n    return (\n        <Alert variant={variant} className='my-1'>\n            {children}\n        </Alert>\n    )\n};\n\nMessage.defaultProps = {\n    variant: 'info',\n};\n\nMessage.propTypes = {\n    variant: PropTypes.string\n}\n\nexport default Message;\n","import React from 'react';\nimport { Spinner } from 'react-bootstrap';\n\nconst Loader = () => {\n    return (\n        <Spinner \n            animation='border' \n            role='status' \n            stype={{ \n                width:'100px', \n                height: '100px',\n                margin: 'auto',\n                display: 'block'\n            }}>\n                <span className='sr-only'>Loading...</span>\n        </Spinner>\n    )\n};\n\nexport default Loader;\n","import React from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\n\nconst FormContainer = ({ children }) => {\n    return (\n        <Container>\n            <Row className='justify-content-md-center'>\n                <Col xs={12} md={6}>\n                    {children}\n                </Col>\n            </Row>\n        </Container>\n    )\n};\n\nexport default FormContainer;\n","import React, { useState, useEffect } from 'react';\n//import  { Redirect } from 'react-router-dom'\nimport { Link, Redirect } from 'react-router-dom';\nimport { Form, Button, Row, Col, Container, Table } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\nimport FormContainer from '../components/FormContainer';\nimport { login, getRedirectAz } from '../actions/userActions';\n\nconst LoginScreen = ({ location, history }) => {\n\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [message, setMessage] = useState(null);\n\n    const dispatch = useDispatch();\n\n    const userLogin = useSelector(state => state.userLogin);\n    const { loading, error, userInfo } = userLogin;\n\n    const userRedirectAz = useSelector(state => state.userRedirectAz);\n    const { redirectURL } = userRedirectAz;\n\n    const redirect = location.search ? location.search.split('=')[1] : '/';\n\n    useEffect(() => {\n        if (userInfo && userInfo.status === 'Validated') {\n            history.push(redirect);\n            // If user is authenticate, there is no search and user is redirect to home page\n        }\n    });\n\n    // effect to redirect to AZ authentication\n    useEffect(() => {\n        if (redirectURL) {\n            window.location.href = redirectURL\n        }\n    },[redirectURL]);\n\n    useEffect(() => {\n        if (location.search && location.search.split('code=').length > 0) {\n            //console.log('authentication code find, add request to get token');\n            //console.log(location.search.split('code=')[1]);\n            dispatch(login('AZ', {code: location.search.split('code=')[1]}));\n            history.push('/');\n        }\n    })\n\n\n    const submitHandler = (e) => {\n        const form = e.currentTarget;\n        // Verification of validity of data\n        if (form.checkValidity() === false) {\n            setMessage('Please check your information');\n        } else {\n            e.preventDefault(); // to avoid page to refresh\n            // Dispatch Login\n            dispatch(login('LOCAL', {email:email, password:password}));\n        }\n    };\n\n    const azAuthentClick = () => {\n        dispatch(getRedirectAz());\n    }\n\n\n    return (\n        <>\n            <FormContainer>\n\n                <h1>Sign In</h1>\n                {message && <Message variant='danger'>{message}</Message>}\n                {error && <Message variant='danger'>{error}</Message>}\n                {loading && <Loader />}\n                <Form onSubmit={submitHandler}>\n                    <Form.Group controlId='email'>\n                        <Form.Label>Email Address</Form.Label>\n                        <Form.Control\n                            type='email'\n                            placeholder='Enter Email'\n                            value={email}\n                            onChange={(e) => setEmail(e.target.value)}\n                        ></Form.Control>\n                    </Form.Group>\n                    <Form.Group controlId='password'>\n                        <Form.Label>Password</Form.Label>\n                        <Form.Control\n                            type='password'\n                            placeholder='Enter password'\n                            value={password}\n                            onChange={(e) => setPassword(e.target.value)}\n                        ></Form.Control>\n                    </Form.Group>\n\n                    <Row>\n                        <Col>\n                            <Button type='submit' variant='primary' block>\n                                Sign In\n                            </Button>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col className='mt-3'>\n                            <Button \n                                variant=\"success\"\n                                onClick={azAuthentClick}\n                                block\n                            >-- AZ Connect --</Button>\n                        </Col>\n                    </Row>\n\n\n                    <Row className='py-3'>\n                        <Col>\n                            New User ? <Link to={redirect ?\n                                `/register?reditect=${redirect}`\n                                : '/register'}>Register</Link>\n                        </Col>\n                    </Row>\n                </Form>\n\n            </FormContainer>\n\n            <Container>\n                <Row className='justify-content-md-center'>\n                    <Col xs={12} md={6} className='mt-5'>\n                        <h3>Disclaimer</h3>\n                        <p>Welcome on this demo! Please note that this is not an official Wavestone product.<br />\n                        On this online resource management application, you'll be able to:</p>\n                        <ul>\n                            <li>Login with different profiles (admin, coordinator, CDM, manager)</li>\n                            <li>Edit your Pxx</li>\n                            <li>Edit your consultants' profiles (position, expertise, partial time, etc.)</li>\n                            <li>Create, edit and keep track of your staffing requests</li>\n                            <li>Staff your available consultants on staffing requests</li>\n                            <li>Check where a consultant is staffed</li>\n                            <li>Create and manage a dataset of skills for your consultants</li>\n                            <li>Get access to latest KPIs and export the data on Excel</li>\n                        </ul>\n                        <h4>Test acounts logins:</h4>\n                        <Table hover striped>\n                            <thead>\n                                <tr className='table-secondary'>\n                                    <th className='align-middle text-light text-center'>Email</th>\n                                    <th className='align-middle text-light text-center'>Password</th>\n                                    <th className='align-middle text-light text-center'>Description</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                <tr>\n                                    <td className='align-middle text-center'>cdmptc11000@mail.com</td>\n                                    <td className='align-middle text-center'>123456</td>\n                                    <td className='align-middle text-center'>Admin account with all accreditation on application</td>\n                                </tr>\n                                <tr>\n                                    <td className='align-middle text-center'>cdmptc11001@mail.com</td>\n                                    <td className='align-middle text-center'>123456</td>\n                                    <td className='align-middle text-center'>Coordinator of practice PTC1 account</td>\n                                </tr>\n                                <tr>\n                                    <td className='align-middle text-center'>cdmptc11004@mail.com</td>\n                                    <td className='align-middle text-center'>123456</td>\n                                    <td className='align-middle text-center'>CDM of practice PTC1 account</td>\n                                </tr>\n                                <tr>\n                                    <td className='align-middle text-center'>jessicamichelptc179@mail.com</td>\n                                    <td className='align-middle text-center'>123456</td>\n                                    <td className='align-middle text-center'>Manager of practice PTC1 account</td>\n                                </tr>\n                                <tr>\n                                    <td className='align-middle text-center'>arthurthomasptc112@mail.com</td>\n                                    <td className='align-middle text-center'>123456</td>\n                                    <td className='align-middle text-center'>Consultant of practice PTC1 account</td>\n                                </tr>\n                            </tbody>\n                        </Table>\n                    </Col>\n                </Row>\n            </Container>\n\n            {/* </MsalAuthenticationTemplate> */}\n        </>\n    );\n};\n\nexport default LoginScreen;\n","import axios from 'axios';\n//import fetch from 'fetch';\n//import fs from 'fs';\n//import path from 'path';\nimport {\n    PXX_LIST_REQUEST,\n    PXX_LIST_SUCCESS,\n    PXX_LIST_FAIL,\n    PXX_MY_TO_EDIT_REQUEST,\n    PXX_MY_TO_EDIT_FAIL,\n    PXX_MY_TO_EDIT_SUCCESS,\n    PXX_UPDATE_REQUEST,\n    PXX_UPDATE_SUCCESS,\n    PXX_UPDATE_FAIL,\n    PXX_TACE_REQUEST,\n    PXX_TACE_SUCCESS,\n    PXX_TACE_FAIL,\n    PXX_AVAILABILITIES_REQUEST,\n    PXX_AVAILABILITIES_SUCCESS,\n    PXX_AVAILABILITIES_FAIL,\n    PXX_ALL_REQUEST,\n    PXX_ALL_FAIL,\n    PXX_ALL_SUCCESS,\n    PXX_IMPORT_MASS_SUCCESS,\n    PXX_IMPORT_MASS_FAIL,\n    PXX_IMPORT_MASS_REQUEST,\n    PXX_IMPORT_LINE_REQUEST,\n    PXX_IMPORT_LINE_SUCCESS,\n    PXX_IMPORT_LINE_FAIL,\n    PXX_UPLOAD_FILE_REQUEST,\n    PXX_UPLOAD_FILE_SUCCESS,\n    PXX_UPLOAD_FILE_FAIL,\n    PXX_UPDATE_PXX_REQUEST,\n    PXX_UPDATE_PXX_SUCCESS,\n    PXX_UPDATE_PXX_FAIL\n} from '../constants/pxxConstants';\n\nexport const getMyConsultantPxxToEdit = (consultantId, searchDate, numberOfMonth) => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: PXX_MY_TO_EDIT_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                'Content-type': 'Application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        searchDate.setUTCDate(1);\n        const month = searchDate.toISOString().substring(0,10);\n\n        const { data } = await axios.get(`/api/pxx/edit?consultantId=${consultantId}&month=${month}&numberOfMonth=${numberOfMonth}`, config)\n        \n        /*\n        const functionDate = new Date(searchDate);\n        functionDate.setDate(1);\n        const pxx = [];\n        for (let incr = 0; incr < numberOfMonth; incr++){\n            \n            const transformDate = functionDate.toISOString().substring(0,10);\n            const { data } = await axios.get(`/api/pxx/consultantId/${consultantId}/month/${transformDate}`, config);\n            pxx.push(data);\n            functionDate.setMonth(functionDate.getMonth()+1);\n        }\n        dispatch({ type: PXX_MY_TO_EDIT_SUCCESS, payload: pxx });\n        */\n\n       dispatch({ type: PXX_MY_TO_EDIT_SUCCESS, payload: data });\n\n    } catch (error) {\n        dispatch({\n            type: PXX_MY_TO_EDIT_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\nexport const updatePxx = (pxx) => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: PXX_UPDATE_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                'Content-type': 'Application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        await axios.put(`/api/pxx`, pxx, config);    \n\n        dispatch({ type: PXX_UPDATE_SUCCESS });\n\n    } catch (error) {\n        dispatch({\n            type: PXX_UPDATE_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\n\n// TO DELETE //\n\nconst transformListPxxToDisplay = (pxxData, pxxInfo) => {\n\n    const listConsultant = pxxData.data.map(pxx => (pxx.name));\n\n    // collect unique _id for consultant\n    const tampon = []\n    for (let incr = listConsultant.length - 1; incr >= 0; incr--) {\n        if (tampon.includes(listConsultant[incr]._id)) {\n            listConsultant.splice(incr, 1);\n        } else {\n            tampon.push(listConsultant[incr]._id);\n        }\n    }\n\n    const listPxx = [];\n    for (let incr = 0; incr < listConsultant.length; incr++) {\n\n        let pxx = [];\n\n        pxx.push({\n            type: \"lineInformation\",\n            value: listConsultant[incr].name,\n            userId: listConsultant[incr]._id,\n            information: \"consultantName\"\n        });\n        pxx.push({\n            type: \"lineInformation\",\n            value: listConsultant[incr].arrival,\n            userId: listConsultant[incr]._id,\n            information: \"consultantArrivalDate\"\n        });\n        pxx.push({\n            type: \"lineInformation\",\n            value: listConsultant[incr].leaving,\n            userId: listConsultant[incr]._id,\n            information: \"consultantLeavingDate\"\n        });\n        pxx.push({\n            type: \"lineInformation\",\n            value: listConsultant[incr].seniority,\n            userId: listConsultant[incr]._id,\n            information: \"consultantSeniority\"\n        });\n\n        for (let incrMonth = 0; incrMonth < pxxInfo.data.length; incrMonth++) {\n\n            let val = pxxData.data.filter(x => (x.name._id === listConsultant[incr]._id && x.month._id === pxxInfo.data[incrMonth]._id))[0];\n            if (val.length > 1) {\n                throw new Error({ message: 'number of value can not be up to 1' })\n            }\n            pxx.push({\n                type: \"day\",\n                value: val.prodDay,\n                userId: listConsultant[incr]._id,\n                pxxId: pxxInfo.data[incrMonth]._id,\n                information: 'productionDay'\n            });\n            pxx.push({\n                type: \"day\",\n                value: val.notProdDay,\n                userId: listConsultant[incr]._id,\n                pxxId: pxxInfo.data[incrMonth]._id,\n                information: 'notProductionDay'\n            });\n            pxx.push({\n                type: \"day\",\n                value: val.leavingDay,\n                userId: listConsultant[incr]._id,\n                pxxId: pxxInfo.data[incrMonth]._id,\n                information: 'leavingDay'\n            });\n            pxx.push({\n                type: \"day\",\n                value: val.availableDay,\n                userId: listConsultant[incr]._id,\n                pxxId: pxxInfo.data[incrMonth]._id,\n                information: 'availableDay'\n            });\n        }\n\n        listPxx.push(pxx);\n    }\n\n    return listPxx;\n\n}\n\nconst transformPxxMonthInfoToDisplay = (pxxInfo) => {\n    const pxxMonthInfoList = []\n    const firstLine = [];\n    const secondLine = [];\n\n    for (let incr = 0; incr < pxxInfo.data.length; incr++){\n        \n        firstLine.push({\n            name: pxxInfo.data[incr].name,\n            value: pxxInfo.data[incr].workingday\n        });\n        firstLine.push({ name:'', value:'' });\n        firstLine.push({ name:'', value:'' });\n        firstLine.push({ name:'', value:'' });\n    }\n\n    for (let incr = 0; incr < pxxInfo.data.length; incr++){\n        secondLine.push({ name:'Prod', value: 'P'});\n        secondLine.push({ name: 'Not Prod', value: 'NP'});\n        secondLine.push({ name: 'Hollidays', value: 'H'});\n        secondLine.push({ name: 'Availability', value: 'A'});\n    }\n    pxxMonthInfoList.push(firstLine, secondLine);\n\n    return pxxMonthInfoList;\n}\n\nexport const getPxxList = (searchDate, numberOfMonth) => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: PXX_LIST_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers:{\n                'Content-type': 'Application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n        \n        const pxxInfo = await axios.get(`/api/monthdata?searchdate=${searchDate}&numberofmonths=${numberOfMonth}`);\n        const pxxMonthInfoList = transformPxxMonthInfoToDisplay(pxxInfo);\n\n        let monthId = \"\";\n        for (let incr = 0; incr < pxxInfo.data.length; incr++) {\n            if (incr === 0) {\n                monthId = pxxInfo.data[incr]._id;\n            }\n            monthId = monthId + '_' + pxxInfo.data[incr]._id;\n        }\n\n        const pxxData = await axios.get(`/api/pxx/${monthId}`, config);\n        const listPxx = transformListPxxToDisplay(pxxData, pxxInfo);\n\n        dispatch({ type: PXX_LIST_SUCCESS, payload: { pxxMonthInformation: pxxMonthInfoList, pxxUserList: listPxx } });\n\n\n    } catch (error) {\n        dispatch({\n            type: PXX_LIST_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\nexport const getTace = (practice, start, end) => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: PXX_TACE_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers:{\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n        const { data } = await axios.get(`/api/pxx/chart/tace?practice=${practice}&start=${start}&end=${end}`, config);\n\n        dispatch({ type: PXX_TACE_SUCCESS, payload: data });\n\n\n    } catch (error) {\n        dispatch({\n            type: PXX_TACE_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\nexport const getAvailabilities = (practice='', start, end, skills='', experienceStart='', experienceEnd='', searchMode) => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: PXX_AVAILABILITIES_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers:{\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        let searchExperience = experienceStart.toString();\n        if (experienceEnd) {\n            searchExperience = searchExperience + '-' + experienceEnd.toString()\n        }\n\n        const { data } = await axios.get(`/api/pxx/chart/availability?practice=${practice}&start=${start}&end=${end}&skills=${skills}&experience=${searchExperience}&filterMode=${searchMode}`, config);\n\n        dispatch({ type: PXX_AVAILABILITIES_SUCCESS, payload: data });\n\n\n    } catch (error) {\n        dispatch({\n            type: PXX_AVAILABILITIES_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\nexport const getAllPxx = (practice = '', month = '', keywork = '', pageSize = '10', pageNumber = '1') => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: PXX_ALL_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers:{\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n        const { data } = await axios.get(`/api/pxx?practice=${practice}&month=${month}&keyword=${keywork}&pageSize=${pageSize}&pageNumber=${pageNumber}`, config);\n\n        dispatch({ type: PXX_ALL_SUCCESS, payload: data });\n\n\n    } catch (error) {\n        dispatch({\n            type: PXX_ALL_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\n/* export const pxxImportInMass = (datas) => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: PXX_IMPORT_MASS_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers:{\n                'Content-type': 'Application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n        const { data } = await axios.put(`/api/pxx/admin/mass-import`, datas, config);\n\n        dispatch({ type: PXX_IMPORT_MASS_SUCCESS, payload: data });\n\n\n    } catch (error) {\n        dispatch({\n            type: PXX_IMPORT_MASS_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n}; */\n\nexport const pxxUpdateALine = (line) => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: PXX_IMPORT_LINE_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers:{\n                'Content-type': 'Application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n        const { data } = await axios.put(`/api/pxx/admin/line-import`, line, config);\n\n        dispatch({ type: PXX_IMPORT_LINE_SUCCESS, payload: data });\n\n\n    } catch (error) {\n        dispatch({\n            type: PXX_IMPORT_LINE_FAIL,\n            payload: {\n                message: error.response && error.response.data.message\n                    ? error.response.data.message\n                    : error.message\n            }\n        });\n    }\n};\n\nexport const pxxUploadFiles = (files) => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: PXX_UPLOAD_FILE_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers:{\n                \"Content-Type\": \"application/vnd.ms-excel\",\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        let result = '';\n        for (let incr=0 ; incr < files.length ; incr++) {\n            const file = files[incr];\n            const { data } = await axios.post(`/api/upload/pxx`, file, config);\n            result = data;\n        }\n\n\n        dispatch({ type: PXX_UPLOAD_FILE_SUCCESS, payload: result });\n\n\n    } catch (error) {\n        dispatch({\n            type: PXX_UPLOAD_FILE_FAIL,\n            payload: {\n                message: error.response && error.response.data.message\n                    ? error.response.data.message\n                    : error.message\n            }\n        });\n    }\n};\n\nexport const updatePxxFiles = (path) => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: PXX_UPDATE_PXX_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers:{\n                \"Content-Type\": \"application/json\",\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        const { data } = await axios.put(`/api/pxx/admin/line-import-wk`, path, config);\n\n        dispatch({ type: PXX_UPDATE_PXX_SUCCESS, payload: data });\n\n    } catch (error) {\n        dispatch({\n            type: PXX_UPDATE_PXX_FAIL,\n            payload: {\n                message: error.response && error.response.data.message\n                    ? error.response.data.message\n                    : error.message\n            }\n        });\n    }\n};","import React, { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nimport { updatePxx } from '../actions/pxxActions';\n\nconst PxxUserLine = ({ data }) => {\n\n    const dispatch = useDispatch();\n\n    const [prodDayComponent, setProdDayComponent] = useState(Number(data.prodDay) || 0);\n    const [notProdDayComponent, setNotProdDayComponent] = useState(Number(data.notProdDay) || 0);\n    const [leavingDayComponent, setLeavingDayComponent] = useState(Number(data.leavingDay) || 0);\n    const [availableDayComponent, setAvailableDayComponent] = useState(Number(data.availableDay) || 0);\n    const [workingDay] = useState(Number(data.prodDay) + Number(data.notProdDay) + Number(data.leavingDay) + Number(data.availableDay));\n\n    const [hasChange, setHasChange] = useState(false);\n\n    // Calculate firstday of current month to compare with firstDayMonth of displayed Pxx\n    let firstDayOfCurrentMonth = new Date(Date.now());\n    firstDayOfCurrentMonth.setDate(1);\n    firstDayOfCurrentMonth = firstDayOfCurrentMonth.toISOString().substring(0, 10);\n\n    const editable = data.month ? (data.month.firstDay >= firstDayOfCurrentMonth) : false;\n\n    useEffect(() => {\n        if (hasChange && workingDay >= (prodDayComponent + notProdDayComponent + leavingDayComponent)) {\n            setAvailableDayComponent(workingDay - (prodDayComponent + notProdDayComponent + leavingDayComponent))\n            dispatch(updatePxx({\n                _id: data._id,\n                name: data.name,\n                month: data.month._id,\n                prodDay: prodDayComponent,\n                notProdDay: notProdDayComponent,\n                leavingDay: leavingDayComponent,\n                availableDay: workingDay - (prodDayComponent + notProdDayComponent + leavingDayComponent)\n            }));\n            setHasChange(false);\n        }\n    // eslint-disable-next-line\n    },[workingDay, prodDayComponent, notProdDayComponent, leavingDayComponent, data]);\n\n    return (\n        <>\n            <Row className=\"py-1\">\n                <Col xs={4} className=\"text-center align-middle\"><b>{data.month ? data.month.name : 'Not created Yeat'}</b> <i>{workingDay ? `(${workingDay}d)` : null}</i></Col>\n                <Col xs={2} className=\"text-center align-middle px-1\">\n                    <InputGroup>\n                        <FormControl\n                            type=\"number\"\n                            min={0}\n                            max={(workingDay - notProdDayComponent - leavingDayComponent) ? (workingDay - notProdDayComponent - leavingDayComponent) : '-'}\n                            step={0.5}\n                            disabled={!editable || !workingDay}\n                            className=\"align-middle text-center p-0\"\n                            value={prodDayComponent && prodDayComponent.toString()}\n                            onChange={(e) => {\n                                setProdDayComponent(Number(e.target.value));\n                                setHasChange(true);\n                            }}\n                        />\n                    </InputGroup>\n                </Col>\n                <Col xs={2} className=\"text-center align-middle px-1\">\n                    <InputGroup>\n                        <FormControl\n                            type=\"number\"\n                            min={0}\n                            max={(workingDay - prodDayComponent - leavingDayComponent) ? (workingDay - prodDayComponent - leavingDayComponent) : '-'}\n                            step={0.5}\n                            disabled={!editable || !workingDay}\n                            className=\"align-middle text-center p-0\"\n                            value={notProdDayComponent && notProdDayComponent.toString()}\n                            onChange={(e) => {\n                                if (!e.target.value.toString().match(/[0-9]*[,.]$/g)) {\n                                    setNotProdDayComponent(Number(e.target.value));\n                                    setHasChange(true);\n                                }\n                            }}\n                        />\n                    </InputGroup>\n                </Col>\n                <Col xs={2} className=\"text-center align-middle px-1\">\n                    <InputGroup>\n                        <FormControl\n                            type=\"number\"\n                            min={0}\n                            max={(workingDay - prodDayComponent - notProdDayComponent) ? (workingDay - prodDayComponent - notProdDayComponent) : '-'}\n                            step={0.5}\n                            disabled={!editable || !workingDay}\n                            className=\"align-middle text-center p-0\"\n                            value={leavingDayComponent && leavingDayComponent.toString()}\n                            onChange={(e) => {\n                                setLeavingDayComponent(Number(e.target.value));\n                                setHasChange(true);\n                            }}\n                        />\n                    </InputGroup>\n                </Col>\n                <Col xs={2} className=\"text-center align-middle px-1\">\n                    <InputGroup>\n                        <FormControl\n                            type=\"number\"\n                            min={0}\n                            max={workingDay ? workingDay : '-'}\n                            step={0.5}\n                            className=\"align-middle text-center p-0\"\n                            value={availableDayComponent && availableDayComponent.toString()}\n                            disabled\n                        />\n                    </InputGroup>\n                </Col>\n\n            </Row>\n        </>\n    )\n}\n\nexport default PxxUserLine;\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport Button from 'react-bootstrap/Button';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\nimport PxxUserLine from '../components/PxxUserLine';\nimport { getMyConsultantPxxToEdit } from '../actions/pxxActions';\nimport ListGroup from 'react-bootstrap/ListGroup';\n\nconst PxxEditor = ({ consultantsMy, consultantFocus, searchDate, navigationMonthHandler }) => {\n\n    const dispatch = useDispatch();\n\n    const [numberOfMonth] = useState(5);\n\n    const pxxMyToEdit = useSelector(state => state.pxxMyToEdit);\n    const { loading: loadingPxx, error: errorPxx, pxx } = pxxMyToEdit;\n\n    const pxxUpdate = useSelector(state => state.pxxUpdate);\n    const { loading: loadingUpdate, error: errorUpdate } = pxxUpdate;\n\n    let consultantId = consultantsMy[consultantFocus]._id;\n    \n    useEffect(() => {\n\n        // Effect when loading component and each time entry parameters change\n        dispatch(getMyConsultantPxxToEdit(consultantId, searchDate, numberOfMonth));\n    }, [dispatch, searchDate, numberOfMonth, consultantId]);\n\n    return (\n        <ListGroup.Item>\n\n            <Row>\n                <Col xs={4} className='text-center align-middle'>\n                    <Button\n                        className='btn btn-primary mt-3'\n                        variant='primary'\n                        size='sm'\n                        onClick={() => navigationMonthHandler(-1)}\n                        style={{width: '8em'}}\n                    ><i className=\"fas fa-caret-up\"></i>  Previous</Button>\n                </Col>\n            </Row>\n            <Row>\n                <Col xs={4} className=\"text-center align-middle px-1 pb-2\" style={{height: '2em'}}> {loadingUpdate && <Loader />}</Col>\n                <Col xs={2} className=\"text-center align-middle px-1 pb-2\"><strong>Prd</strong></Col>\n                <Col xs={2} className=\"text-center align-middle px-1 pb-2\"><strong>NPrd</strong></Col>\n                <Col xs={2} className=\"text-center align-middle px-1 pb-2\"><strong>Hld</strong></Col>\n                <Col xs={2} className=\"text-center align-middle px-1 pb-2\"><strong>Avlb</strong></Col>\n            </Row>\n\n            {loadingPxx ? <Loader /> : errorPxx ? <Message variant=\"danger\">{errorPxx}</Message> : (\n                pxx.map((line, key) => (\n                        <PxxUserLine\n                            key={key}\n                            data={line}\n                        />\n                ))\n            )}\n\n            {errorUpdate && (\n                <Row><Message variant='danger'>{errorUpdate}</Message></Row>\n            )}\n            \n            <Row>\n                <Col xs={4} className='text-center align-middle'>\n                    <Button\n                        className='btn btn-primary mt-3'\n                        variant='primary'\n                        size='sm'\n                        onClick={() => navigationMonthHandler(1)}\n                        style={{width: '8em'}}\n                    >Next  <i className=\"fas fa-caret-down\"></i></Button>\n                </Col>\n                {/* <Col xs={6} md={2} className=\"text-right\">\n                    <Button\n                        className='btn btn-primary mt-3'\n                        variant='primary'\n                        size='sm'\n                        onClick={() => navigationMonthHandler(-1)}\n                        block\n                    ><i className=\"fas fa-caret-left\"></i>  Previous</Button>\n                </Col>\n                <Col xs={6} md={2} className=\"text-left\">\n                    <Button\n                        className='btn btn-primary mt-3'\n                        variant='primary'\n                        size='sm'\n                        onClick={() => navigationMonthHandler(1)}\n                        block\n                    >Next  <i className=\"fas fa-caret-right\"></i></Button>\n                </Col>\n                <Col xs={0} md={2}></Col> */}\n            </Row>\n\n        </ListGroup.Item>\n    )\n}\n\nexport default PxxEditor;\n","import React, {useState} from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nconst DropDownTitleContainer = ({children, title, close}) => {\n\n    const [hide, setHide] = useState(close);\n\n    return (\n        <Row className='mt-3'>\n            <Col>\n                <Button\n                    onClick={() => setHide(!hide)}\n                    variant='light'\n                    className='text-left'\n                    block\n                > <h3>{hide ? (\n                    <><i className=\"fas fa-caret-down\"></i> {title}</>\n                ) : (\n                        <><i className=\"fas fa-caret-up\"></i> {title}</>\n                    )}</h3></Button>\n\n                {!hide && children}\n            </Col>\n        </Row>\n    )\n}\n\nDropDownTitleContainer.defaultProps = {\n    close: true\n};\n\nexport default DropDownTitleContainer\n","import axios from 'axios';\nimport fs from 'fs';\nimport {\n    CONSULTANTS_ALL_ADMIN_DETAILS_FAIL,\n    CONSULTANTS_ALL_ADMIN_DETAILS_REQUEST,\n    CONSULTANTS_ALL_ADMIN_DETAILS_SUCCESS,\n    CONSULTANTS_MY_DETAILS_FAIL,\n    CONSULTANTS_MY_DETAILS_FOCUS,\n    CONSULTANTS_MY_DETAILS_REQUEST,\n    CONSULTANTS_MY_DETAILS_SUCCESS,\n    CONSULTANT_MY_FAIL,\n    CONSULTANT_MY_REQUEST,\n    CONSULTANT_MY_SUCCESS,\n    CONSULTANT_MY_UPDATE_FAIL,\n    CONSULTANT_MY_UPDATE_REQUEST,\n    CONSULTANT_MY_UPDATE_SUCCESS,\n    CONSULTANT_CREATE_REQUEST,\n    CONSULTANT_CREATE_SUCCESS,\n    CONSULTANT_CREATE_FAIL,\n    CONSULTANT_CDM_LIST_REQUEST,\n    CONSULTANT_CDM_LIST_SUCCESS,\n    CONSULTANT_CDM_LIST_FAIL,\n    CONSULTANT_PRACTICE_LIST_REQUEST,\n    CONSULTANT_PRACTICE_LIST_FAIL,\n    CONSULTANT_PRACTICE_LIST_SUCCESS,\n    CONSULTANT_DELETE_REQUEST,\n    CONSULTANT_DELETE_FAIL,\n    CONSULTANT_DELETE_SUCCESS,\n    CONSULTANT_UPDATE_COMMENT_REQUEST,\n    CONSULTANT_UPDATE_COMMENT_SUCCESS,\n    CONSULTANT_UPDATE_COMMENT_FAIL,\n    //CONSULTANT_ALL_ACCESS_REQUEST,\n    //CONSULTANT_ALL_ACCESS_SUCCESS,\n    //CONSULTANT_ALL_ACCESS_FAIL,\n    CONSULTANT_ALL_SKILLS_REQUEST,\n    CONSULTANT_ALL_SKILLS_SUCCESS,\n    CONSULTANT_ALL_SKILLS_FAIL,\n    CONSULTANT_ADD_SKILL_REQUEST,\n    CONSULTANT_ADD_SKILL_SUCCESS,\n    CONSULTANT_ADD_SKILL_FAIL,\n    CONSULTANT_DELETE_SKILL_REQUEST,\n    CONSULTANT_DELETE_SKILL_FAIL,\n    CONSULTANT_UPDATE_SKILL_REQUEST,\n    CONSULTANT_UPDATE_SKILL_FAIL,\n    CONSULTANT_UPDATE_SKILL_SUCCESS,\n    CONSULTANT_ALL_STAFF_REQUEST,\n    CONSULTANT_ALL_STAFF_SUCCESS,\n    CONSULTANT_ALL_STAFF_FAIL,\n    CONSULTANT_DELETE_SKILL_SUCCESS,\n    CONSULTANT_SKILLS_REQUEST,\n    CONSULTANT_SKILLS_FAIL,\n    CONSULTANT_SKILLS_SUCCESS,\n    CONSULTANT_CDM_REQUEST,\n    CONSULTANT_CDM_SUCCESS,\n    CONSULTANT_CDM_FAIL,\n    CONSULTANTS_ALL_LEADERS_REQUEST,\n    CONSULTANTS_ALL_LEADERS_SUCCESS,\n    CONSULTANTS_ALL_LEADERS_FAIL,\n    CONSULTANT_MASS_IMPORT_REQUEST,\n    CONSULTANT_MASS_IMPORT_SUCCESS,\n    CONSULTANT_MASS_IMPORT_FAIL,\n    CONSULTANT_UPLOAD_WK_REQUEST,\n    CONSULTANT_UPLOAD_WK_SUCCESS,\n    CONSULTANT_UPLOAD_WK_FAIL,\n    CONSULTANT_UPDATE_WK_REQUEST,\n    CONSULTANT_UPDATE_WK_SUCCESS,\n    CONSULTANT_UPDATE_WK_FAIL,\n    CONSULTANT_DELEGATE_UPDATE_REQUEST,\n    CONSULTANT_DELEGATE_UPDATE_SUCCESS,\n    CONSULTANT_DELEGATE_UPDATE_FAIL\n} from '../constants/consultantConstants';\n\nexport const getAllMyConsultants = (option = '') => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: CONSULTANTS_MY_DETAILS_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                'Content-type': 'Application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        const { data } = await axios.get(`/api/consultants?option=${option}`, config);        \n\n        dispatch({ type: CONSULTANTS_MY_DETAILS_SUCCESS, payload: data });\n\n} catch (error) {\n    dispatch({\n        type: CONSULTANTS_MY_DETAILS_FAIL,\n        payload: error.response && error.response.data.message\n            ? error.response.data.message\n            : error.message\n    });\n}\n};\n\nexport const setConsultantFocus = (focus) => async(dispatch) => {\n    dispatch({type: CONSULTANTS_MY_DETAILS_FOCUS, payload: focus});\n}\n\nexport const getMyConsultant = (consultantId) => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: CONSULTANT_MY_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                'Content-type': 'Application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        const { data } = await axios.get(`/api/consultants/${consultantId}`, config);\n\n        dispatch({ type: CONSULTANT_MY_SUCCESS, payload: data });\n\n    } catch (error) {\n        dispatch({\n            type: CONSULTANT_MY_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\n\nexport const updateMyConsultant = (consultant) => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: CONSULTANT_MY_UPDATE_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                'Content-type': 'Application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        const { data } = await axios.put(`/api/consultants/${consultant._id}`, consultant, config);\n        if (!data) {\n            throw new Error('Error: your modification is not saved')\n        }\n\n        dispatch({ type: CONSULTANT_MY_UPDATE_SUCCESS });\n\n    } catch (error) {\n        dispatch({\n            type: CONSULTANT_MY_UPDATE_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\nexport const updateDelegateConsultant = (consultantId, delegation) => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: CONSULTANT_DELEGATE_UPDATE_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                'Content-type': 'Application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        const { data } = await axios.put(`/api/consultants/delegate/${consultantId}`, delegation, config);\n        if (!data) {\n            throw new Error('Error: your modification is not saved')\n        }\n\n        dispatch({ type: CONSULTANT_DELEGATE_UPDATE_SUCCESS });\n\n    } catch (error) {\n        dispatch({\n            type: CONSULTANT_DELEGATE_UPDATE_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\nexport const createConsultant = (consultant) => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: CONSULTANT_CREATE_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                'Content-type': 'Application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        const { data } = await axios.post('/api/consultants', consultant, config);\n\n        dispatch({ type: CONSULTANT_CREATE_SUCCESS, payload: data });\n\n} catch (error) {\n    dispatch({\n        type: CONSULTANT_CREATE_FAIL,\n        payload: error.response && error.response.data.message\n            ? error.response.data.message\n            : error.message\n    });\n}\n};\n\nexport const deleteConsultant = (consultantId) => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: CONSULTANT_DELETE_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                'Content-type': 'Application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        await axios.delete(`/api/consultants/${consultantId}`, config);\n\n        dispatch({ type: CONSULTANT_DELETE_SUCCESS });\n\n} catch (error) {\n    dispatch({\n        type: CONSULTANT_DELETE_FAIL,\n        payload: error.response && error.response.data.message\n            ? error.response.data.message\n            : error.message\n    });\n}\n};\n\nexport const getAllCDM = (practice) => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: CONSULTANT_CDM_LIST_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                'Content-type': 'Application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        const { data } = await axios.get(`/api/consultants/cdm/${practice}`, config);\n\n        dispatch({ type: CONSULTANT_CDM_LIST_SUCCESS, payload: data });\n\n    } catch (error) {\n        dispatch({\n            type: CONSULTANT_CDM_LIST_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\nexport const getAllPractice = () => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: CONSULTANT_PRACTICE_LIST_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                'Content-type': 'Application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        const { data } = await axios.get(`/api/consultants/practicelist`, config);\n\n        dispatch({ type: CONSULTANT_PRACTICE_LIST_SUCCESS, payload: data });\n\n    } catch (error) {\n        dispatch({\n            type: CONSULTANT_PRACTICE_LIST_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\nexport const getAllStaffs = (consultantId) => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: CONSULTANT_ALL_STAFF_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        const { data } = await axios.get(`/api/consultants/staffings?consultantId=${consultantId}`, config);\n\n        dispatch({ type: CONSULTANT_ALL_STAFF_SUCCESS, payload: data });\n\n    } catch (error) {\n        dispatch({\n            type: CONSULTANT_ALL_STAFF_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\nexport const updateComment = (consultantId, commentText) => async(dispatch, getState) => {\n    try {\n\n        dispatch({\n            type: CONSULTANT_UPDATE_COMMENT_REQUEST,\n        });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers:{\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n        await axios.put(`/api/consultants/comment/${consultantId}`, {commentText}, config);\n\n        dispatch({ type: CONSULTANT_UPDATE_COMMENT_SUCCESS });\n\n    } catch (error) {\n        dispatch({\n            type: CONSULTANT_UPDATE_COMMENT_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\nexport const getAllLeaders = (searchValue='') => async (dispatch, getState) => {\n    try {\n        dispatch({type: CONSULTANTS_ALL_LEADERS_REQUEST})\n        \n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        const { data } = await axios.get(`/api/consultants/leaderslist?searchLeader=${searchValue}`, config);\n\n        dispatch({ type: CONSULTANTS_ALL_LEADERS_SUCCESS, payload: data });\n\n        \n    } catch (error) {\n\n        dispatch({ \n            type: CONSULTANTS_ALL_LEADERS_FAIL, \n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n}\n\nexport const getAllMyAdminConsultants = (keyword = '', pageNumber = '', pageSize = '15') => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: CONSULTANTS_ALL_ADMIN_DETAILS_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        const { data } = await axios.get(`/api/consultants/admin/consultants?keyword=${keyword}&pageNumber=${pageNumber}&pageSize=${pageSize}`, config);\n        \n        dispatch({ type: CONSULTANTS_ALL_ADMIN_DETAILS_SUCCESS, payload: data });\n\n    } catch (error) {\n        dispatch({\n            type: CONSULTANTS_ALL_ADMIN_DETAILS_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\nexport const getConsultantCdm = (consultantId) => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: CONSULTANT_CDM_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        const { data } = await axios.get(`/api/consultants/${consultantId}/cdm`, config);\n\n        dispatch({ type: CONSULTANT_CDM_SUCCESS, payload: data });\n\n    } catch (error) {\n        dispatch({\n            type: CONSULTANT_CDM_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\nexport const getConsultantSkills = (consultantId) => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: CONSULTANT_SKILLS_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        const { data } = await axios.get(`/api/consultants/${consultantId}/skill`, config);\n\n        dispatch({ type: CONSULTANT_SKILLS_SUCCESS, payload: data.quality });\n\n    } catch (error) {\n        dispatch({\n            type: CONSULTANT_SKILLS_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\nexport const getAllConsultantSkills = () => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: CONSULTANT_ALL_SKILLS_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        const { data } = await axios.get(`/api/consultants/skills`, config);\n\n        dispatch({ type: CONSULTANT_ALL_SKILLS_SUCCESS, payload: data.skills });\n\n    } catch (error) {\n        dispatch({\n            type: CONSULTANT_ALL_SKILLS_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\nexport const consultantAddASkill = (consultantId, skillId, level) => async (dispatch, getState) => {\n\n    //console.log(\"consultantId\", consultantId, 'skillId', skillId, 'level', level);\n\n    try {\n        const skill = {\n            skill: skillId,\n            level: level\n        }\n\n        dispatch({ type: CONSULTANT_ADD_SKILL_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        await axios.put(`/api/consultants/${consultantId}/skill`, skill, config);\n\n        dispatch({ type: CONSULTANT_ADD_SKILL_SUCCESS });\n\n    } catch (error) {\n        dispatch({\n            type: CONSULTANT_ADD_SKILL_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\nexport const consultantDeleteSkill = (consultantId, skillId) => async (dispatch, getState) => {\n\n    //console.log(\"consultantId\", consultantId, 'skillId', skillId);\n\n    try {\n\n        dispatch({ type: CONSULTANT_DELETE_SKILL_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        await axios.delete(`/api/consultants/${consultantId}/skill/${skillId}`, config);\n\n        dispatch({ type: CONSULTANT_DELETE_SKILL_SUCCESS });\n\n    } catch (error) {\n        dispatch({\n            type: CONSULTANT_DELETE_SKILL_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\nexport const consultantUpdateASkillLevel = (consultantId, skillId, level) => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: CONSULTANT_UPDATE_SKILL_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        await axios.put(`/api/consultants/${consultantId}/skill/${skillId}`, { level }, config);\n\n        dispatch({ type: CONSULTANT_UPDATE_SKILL_SUCCESS });\n\n    } catch (error) {\n        dispatch({\n            type: CONSULTANT_UPDATE_SKILL_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\nexport const consultantImportInMass = (data) => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: CONSULTANT_MASS_IMPORT_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                'Content-type': 'Application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        await axios.put(`/api/consultants/admin/mass-import`, data, config);\n\n        dispatch({ type: CONSULTANT_MASS_IMPORT_SUCCESS });\n\n    } catch (error) {\n        dispatch({\n            type: CONSULTANT_MASS_IMPORT_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\nexport const uploadConsultantWk = (file) => async (dispatch, getState) => {\n    try {\n        dispatch({type: CONSULTANT_UPLOAD_WK_REQUEST})\n        \n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        const { data } = await axios.post(`/api/upload/consultant`, file, config);\n\n        dispatch({ type: CONSULTANT_UPLOAD_WK_SUCCESS, payload: data });\n\n        \n    } catch (error) {\n\n        dispatch({ \n            type: CONSULTANT_UPLOAD_WK_FAIL, \n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n}\n\nexport const updateConsultantWk = (path) => async (dispatch, getState) => {\n    try {\n        dispatch({type: CONSULTANT_UPDATE_WK_REQUEST})\n        \n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                'Content-type': 'Application/json',\n                'responseType': 'stream',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        const { data } = await axios.put(`/api/consultants/admin/wk`, path, config);\n        /* axios.put(`/api/consultants/admin/wk`, path, config)\n            .then((response) => {\n                response.data.pipe(fs.createWriteStream(\"tempsfile.txt\"))\n            })\n            .catch(error => console.log(error)); */\n        \n        dispatch({ type: CONSULTANT_UPDATE_WK_SUCCESS, payload: data });\n        //dispatch({ type: CONSULTANT_UPDATE_WK_SUCCESS, payload: 'OK' });\n\n        \n    } catch (error) {\n\n        dispatch({ \n            type: CONSULTANT_UPDATE_WK_FAIL, \n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n}","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport Table from 'react-bootstrap/Table';\nimport { setConsultantFocus } from '../actions/consultantActions';\nimport Button from 'react-bootstrap/Button';\n\nconst ConsultantsTab = ({ history, consultantsMy, focusActive }) => {\n\n    const dispatch = useDispatch();\n\n    const onClickHandler = (focus, consultantId) => {\n        focusActive && dispatch(setConsultantFocus(focus));\n        //focusActive && setFocus(focus);\n        history.push(`/editconsultant/${consultantId}`);\n    };\n\n    return (\n\n        <Table responsive hover striped className='mt-3'>\n            <thead>\n                <tr className='table-light'>\n                    <th className='align-middle text-dark'>Consultant name</th>\n                    <th className='align-middle text-dark'>Matricule</th>\n                    <th className='align-middle text-dark'>Practice</th>\n                    <th className='align-middle text-dark'>Valued</th>\n                    <th className='align-middle text-dark'>Arrival</th>\n                    <th className='align-middle text-dark'>Leaving</th>\n                    <th className='align-middle text-dark'>Seniority</th>\n                    <th className='align-middle text-dark'>Comment</th>\n                    <th className='align-middle text-dark'></th>\n                </tr>\n            </thead>\n\n            <tbody>\n                {consultantsMy.map((consultant, focus) => (\n                    <tr key={consultant._id} onClick={() => focusActive && dispatch(setConsultantFocus(focus))}>\n                        <td className='align-middle'>{consultant.name}</td>\n                        <td className='align-middle'>{consultant.matricule}</td>\n                        <td className='align-middle'>{consultant.practice}</td>\n                        <td className='align-middle'>{consultant.valued ? consultant.valued.substring(0,10) : ''}</td>\n                        <td className='align-middle'>{consultant.arrival ? consultant.arrival.substring(0,10) : ''}</td>\n                        <td className='align-middle'>{consultant.leaving ? consultant.leaving.substring(0,10) : ''}</td>\n                        <td className='align-middle'>{\n                                consultant.valued ? ((new Date(Date.now()) - new Date(consultant.valued.substring(0,10)))/(1000*3600*24*365.25)).toString().substring(0,4) : 0\n                            } years</td>\n                        <td className='align-middle'>{consultant.comment}</td>\n                        <td className='align-middle'>\n                            <Button className='btn btn-light p-1' onClick={() => onClickHandler(focus, consultant._id)}>\n                                <i className=\"fas fa-user-edit\"></i>\n                            </Button>\n                        </td>\n                    </tr>\n                ))}\n            </tbody>\n        </Table>\n    )\n}\n\nexport default ConsultantsTab;\n","import React from 'react'\nimport { Helmet } from 'react-helmet';\n\nconst Meta = ({ title }) => {\n    return (\n        <Helmet>\n            <title>{title}</title>\n        </Helmet>\n    )\n}\n\nMeta.defaultProps = {\n    title: 'Performance App'\n}\n\nexport default Meta\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Table from 'react-bootstrap/Table';\nimport Button from 'react-bootstrap/Button';\nimport Loader from './Loader';\nimport { getAllStaffs } from '../actions/consultantActions';\n\nconst ViewStaffs = ({ history, consultantId, displayedDeal = '', onNavigate = () => ('') }) => {\n\n    const dispatch = useDispatch();\n    const consultantAllStaffs = useSelector(state => state.consultantAllStaffs);\n    const { loading, staffings } = consultantAllStaffs;\n\n    useEffect(() => {\n        if (consultantId) {\n            dispatch(getAllStaffs(consultantId));\n        }\n    }, [dispatch, consultantId]);\n\n    return (\n        <Row>\n            <Col>\n                {loading && <Loader />}\n                <Table responsive hover striped className='mt-3'>\n                    <thead>\n                        <tr className='table-light'>\n                            <th className='align-middle text-dark'>Company</th>\n                            <th className='align-middle text-dark'>Title</th>\n                            <th className='align-middle text-dark'>Practice</th>\n                            <th className='align-middle text-dark'>Probability</th>\n                            <th className='align-middle text-dark'>Start</th>\n                            <th className='align-middle text-dark'>Deal status</th>\n                            <th className='align-middle text-dark'>Request status</th>\n                            <th></th>\n                        </tr>\n                    </thead>\n\n                    <tbody>\n                        {staffings && staffings.map(deal => (deal._id.toString() !== displayedDeal.toString()) && (\n                            <tr key={deal._id}>\n                                <td className='align-middle'>{deal.company}</td>\n                                <td className='align-middle'>{deal.title}</td>\n                                <td className='align-middle'>{deal.mainPractice}</td>\n                                <td className='align-middle'>{deal.probability} %</td>\n                                <td className='align-middle'>{deal.startDate.substring(0, 10)}</td>\n                                <td className='align-middle'>{deal.status}</td>\n                                <td className='align-middle'>{deal.requestStatus}</td>\n                                <td className='align-middle'>\n                                        <Button\n                                            onClick={() => {\n                                                history.push(`/staffing/${deal._id}`);\n                                                onNavigate();\n                                            }}\n                                            variant='light'\n                                        ><i className=\"fas fa-edit\"></i></Button>\n                                </td>\n                            </tr>\n                        ))}\n                    </tbody>\n\n                </Table>\n            </Col>\n        </Row>\n    )\n}\n\nexport default ViewStaffs;\n","import axios from 'axios';\nimport { \n    DEAL_ALL_LIST_FAIL,\n    DEAL_ALL_LIST_REQUEST,\n    DEAL_ALL_LIST_SUCCESS,\n    DEAL_CREATE_FAIL, \n    DEAL_CREATE_REQUEST, \n    DEAL_CREATE_SUCCESS, \n    DEAL_DELETE_FAIL, \n    DEAL_DELETE_REQUEST,\n    DEAL_DELETE_SUCCESS,\n    DEAL_EDIT_FAIL,\n    DEAL_EDIT_REQUEST,\n    DEAL_EDIT_SUCCESS,\n    DEAL_MASS_IMPORT_FAIL,\n    DEAL_MASS_IMPORT_REQUEST,\n    DEAL_MASS_IMPORT_SUCCESS,\n    DEAL_OLD_FAIL,\n    DEAL_OLD_REQUEST,\n    DEAL_OLD_SUCCESS,\n    DEAL_UPDATE_FAIL,\n    DEAL_UPDATE_REQUEST,\n    DEAL_UPDATE_SUCCESS\n} from '../constants/dealConstants';\n\n\nexport const createDeal = (deal) => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: DEAL_CREATE_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                'Content-type': 'Application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        const { data } = await axios.post(`/api/deals`, deal, config);\n\n       dispatch({ type: DEAL_CREATE_SUCCESS, payload: data._id });\n\n    } catch (error) {\n        dispatch({\n            type: DEAL_CREATE_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\nexport const updateDeal = (dealId, deal) => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: DEAL_UPDATE_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                'Content-type': 'Application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        await axios.put(`/api/deals/${dealId}`, deal, config);\n\n       dispatch({ type: DEAL_UPDATE_SUCCESS });\n\n    } catch (error) {\n        dispatch({\n            type: DEAL_UPDATE_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\nexport const getAllDeals = (keyword, pageNumber = 1, pageSize = 20, state = '', filter = '') => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: DEAL_ALL_LIST_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        const { data } = await axios.get(`/api/deals?title=${keyword.title}&company=${keyword.company}&contact=${keyword.contact}&status=${keyword.status}&request=${keyword.request}&pageNumber=${pageNumber}&pageSize=${pageSize}&state=${state}&filterMy=${keyword.filterMy}&staff=${keyword.staff}`, config);\n\n       dispatch({ type: DEAL_ALL_LIST_SUCCESS, payload: data });\n\n    } catch (error) {\n        dispatch({\n            type: DEAL_ALL_LIST_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\nexport const deleteDeal = (id) => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: DEAL_DELETE_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        //await axios.delete(`/api/deals?id=${id}`, config);\n        await axios.delete(`/api/deals/${id}`, config);\n\n       dispatch({ type: DEAL_DELETE_SUCCESS });\n\n    } catch (error) {\n        dispatch({\n            type: DEAL_DELETE_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\nexport const getDealToEdit = (id) => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: DEAL_EDIT_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        const { data } = await axios.get(`/api/deals/${id}`, config);\n\n       dispatch({ type: DEAL_EDIT_SUCCESS, payload: data });\n\n    } catch (error) {\n        dispatch({\n            type: DEAL_EDIT_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\nexport const getOldDeals = (consultantId) => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: DEAL_OLD_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        const { data } = await axios.get(`/api/deals/old?consultantId=${consultantId}`, config);\n\n       dispatch({ type: DEAL_OLD_SUCCESS, payload: data });\n\n    } catch (error) {\n        dispatch({\n            type: DEAL_OLD_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\nexport const dealsImportInMass = (datas) => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: DEAL_MASS_IMPORT_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                'Content-type': 'Application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        const { data } = await axios.put(`/api/deals/admin/mass-import`, datas, config);\n\n       dispatch({ type: DEAL_MASS_IMPORT_SUCCESS, payload: data });\n\n    } catch (error) {\n        dispatch({\n            type: DEAL_MASS_IMPORT_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Table from 'react-bootstrap/Table';\nimport Button from 'react-bootstrap/Button';\nimport Loader from './Loader';\nimport { getOldDeals } from '../actions/dealActions';\n\nconst ViewOldStaffs = ({ history, consultantId, displayedDeal = '', onNavigate = () => ('') }) => {\n\n    const dispatch = useDispatch();\n\n    const dealOld = useSelector(state => state.dealOld);\n    const { loading, oldDeals } = dealOld;\n\n    /*const consultantAllStaffs = useSelector(state => state.consultantAllStaffs);\n    const { loading, staffings } = consultantAllStaffs;*/\n\n    useEffect(() => {\n        if (consultantId) {\n            dispatch(getOldDeals(consultantId));\n        }\n    }, [dispatch, consultantId]);\n\n    return (\n        <Row>\n            <Col>\n                {loading && <Loader />}\n                <Table responsive hover striped className='mt-3'>\n                    <thead>\n                        <tr className='table-light'>\n                            <th className='align-middle text-dark'>Company</th>\n                            <th className='align-middle text-dark'>Title</th>\n                            <th className='align-middle text-dark'>Practice</th>\n                            <th className='align-middle text-dark'>Probability</th>\n                            <th className='align-middle text-dark'>Start</th>\n                            <th className='align-middle text-dark'>Deal status</th>\n                            <th className='align-middle text-dark'>Request status</th>\n                            <th></th>\n                        </tr>\n                    </thead>\n\n                    <tbody>\n                        {oldDeals && oldDeals.map(deal => (\n                            <tr key={deal._id}>\n                                <td className='align-middle'>{deal.company}</td>\n                                <td className='align-middle'>{deal.title}</td>\n                                <td className='align-middle'>{deal.mainPractice}</td>\n                                <td className='align-middle'>{deal.probability} %</td>\n                                <td className='align-middle'>{deal.startDate.substring(0, 10)}</td>\n                                <td className='align-middle'>{deal.status}</td>\n                                <td className='align-middle'>{deal.staffingRequest.requestStatus}</td>\n                                <td className='align-middle'>\n                                        <Button\n                                            onClick={() => {\n                                                history.push(`/staffing/${deal._id}`);\n                                                onNavigate();\n                                            }}\n                                            variant='light'\n                                        ><i className=\"fas fa-edit\"></i></Button>\n                                </td>\n                            </tr>\n                        ))}\n                    </tbody>\n\n                </Table>\n            </Col>\n        </Row>\n    )\n}\n\nexport default ViewOldStaffs;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\n\nconst Rating = ({ value, setValue, text, color, editable }) => {\n\n    const valueList = [...new Array(Math.floor(value)).fill(1)];\n    if (value % 1 >= 0.5) {\n        valueList.push(value % 1)\n    }\n    while (valueList.length < 5) {\n        valueList.push(0)\n    }\n\n    return (\n        \n            <Form.Group className='mb-0'>\n                <InputGroup>\n                    {valueList && valueList.map((x, val) => (\n                        <span key={val}>\n                            <Button\n                                className='mx-0 px-0'\n                                variant='ligth'\n                                onClick={() => { editable && (\n                                    x >= 1\n                                        ? setValue(val)\n                                        : x >= 0.5\n                                            ? setValue(val + 1)\n                                            : setValue(val + 0.5)\n                                )}}\n                            ><i style={{ color }}\n                                className={\n                                    x >= 1\n                                        ? 'fas fa-star'\n                                        : x >= 0.5\n                                            ? 'fas fa-star-half-alt'\n                                            : 'far fa-star'\n                                }>\n                                </i></Button>\n\n                        </span>\n                    ))}\n                    <span>{text && text}</span>\n                </InputGroup>\n            </Form.Group>\n\n        \n\n    )\n};\n\nRating.defaultProps = {\n    color: '#f8e825',\n    text: '',\n    editable: true,\n};\n\n\nRating.propTypes = {\n    value: PropTypes.number.isRequired,\n    text: PropTypes.string.isRequired,\n    color: PropTypes.string,\n};\n\nexport default Rating;","import React, {useEffect, useState} from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport DropDownTitleContainer from '../components/DropDownTitleContainer';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Button from 'react-bootstrap/Button';\nimport Tooltip from 'react-bootstrap/Tooltip';\n\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport { consultantAddASkill, consultantDeleteSkill, consultantUpdateASkillLevel, getAllConsultantSkills, getConsultantSkills } from '../actions/consultantActions';\nimport Rating from './Rating';\nimport { CONSULTANT_UPDATE_SKILL_RESET } from '../constants/consultantConstants';\n\nconst SkillsDetails = ({consultantId, close=true, editable=true}) => {\n\n    const dispatch = useDispatch();\n\n    const [skillCategory, setSkillCategory] = useState('default');\n    const [skillId, setSkillId] = useState('default');\n    const [skillLevel, setSkillLevel] = useState(1);\n    const [skillCategoryList, setSkillCategoryList] = useState([]);\n\n    const [qualityOrdonned, setQualityOrdonned] = useState([]);\n\n    const [update, setUpdate] = useState(false);\n\n\n    const consultantAllSkills = useSelector(state => state.consultantAllSkills);\n    const { skills: skillsAll } = consultantAllSkills;\n\n    const consultantSkills = useSelector(state => state.consultantSkills);\n    const { loading, skills } = consultantSkills;\n\n    const consultantAddSkill = useSelector(state => state.consultantAddSkill);\n    const { loading: loadingConsultantAddSkill, success: successConsultantAddSkill, error: errorConsultantAddSkill } = consultantAddSkill;\n\n    /* const consultantUpdateSkill = useSelector(state => state.consultantUpdateSkill);\n    const { error: errorConsultantUpdateSkill } = consultantUpdateSkill;\n\n    const consultantDeleteSkillReducer = useSelector(state => state.consultantDeleteSkill);\n    const { success: successConsultantDeleteSkill } = consultantDeleteSkillReducer; */\n\n    useEffect(() => {\n        if (!skillsAll) {\n            dispatch(getAllConsultantSkills());\n        }\n    }, [dispatch, skillsAll]);\n\n    useEffect(() => {\n        dispatch(getConsultantSkills(consultantId));\n        //if(!skills) {\n        //}\n    }, [dispatch, consultantId]);\n\n    useEffect(() => {\n        if (skills) {\n            //setQuality(skills)\n            const ordonnedSkills = orderSkills(skills);\n            setQualityOrdonned(ordonnedSkills);\n        }\n    }, [dispatch, skills, consultantId]);\n\n    useEffect(() => {\n        if(update && !loading) {\n            dispatch(getConsultantSkills(consultantId));\n            setUpdate(false);\n        }\n    }, [dispatch, update, consultantId, loading])\n\n    useEffect(() => {\n        if (skillsAll) {\n            let categoryList = skillsAll.map(x => x.category);\n            categoryList = [...new Set(categoryList)];\n            setSkillCategoryList(categoryList);\n        }\n    }, [skillsAll]);\n\n    useEffect(() => {\n        //if ((successConsultantAddSkill || successConsultantDeleteSkill)) {\n        if (successConsultantAddSkill) {\n            setUpdate(true);\n        }\n    }, [\n        successConsultantAddSkill,\n        //successConsultantDeleteSkill,\n    ]);\n\n    const orderSkills = (skills) => {\n        const categoryList = [...new Set(skills.map(x => x.skill.category))]\n        const orderSkills = []\n        for (let incr = 0 ; incr < categoryList.length ; incr++) {\n            orderSkills.push({\n                category: categoryList[incr],\n                data: skills.filter( x => x.skill.category === categoryList[incr])\n            })\n        }\n        return orderSkills;\n    }\n\n    const handleAddSkill = (consultantId, skillId, skillLevel) => {\n        dispatch(consultantAddASkill(consultantId, skillId, skillLevel));\n    }\n\n    /* const handlerDeleteConsultantSkill = (consultantId, skillId) => {\n        dispatch(consultantDeleteSkill(consultantId, skillId));\n    }\n\n    const handleUpdateSkillLevel = (consultantId, skillId, level) => {\n        dispatch(consultantUpdateASkillLevel(consultantId, skillId, level));\n    } */\n\n    return (\n\n        <DropDownTitleContainer title='Skills' close={close}>\n\n            {editable && (\n                <ListGroup.Item>\n                    <h4>Add skills</h4>\n\n                    <Form.Row className='mt-3 align-items-end'>\n                        <Col xs={12} md={3}>\n                            <Form.Group controlId='skillCategory'>\n                                <Form.Label><strong>Category</strong></Form.Label>\n                                <Form.Control\n                                    as='select'\n                                    value={skillCategory ? skillCategory : 'default'}\n                                    onChange={(e) => setSkillCategory(e.target.value)}\n                                    required\n                                >\n                                    <option value='default'>Please Select</option>\n                                    {skillCategoryList && (\n                                        skillCategoryList.map((x, val) => (\n                                            <option\n                                                value={x}\n                                                key={val}\n                                            >{x}</option>\n                                        )))}\n                                </Form.Control>\n                            </Form.Group>\n                        </Col>\n                        <Col xs={12} md={3} >\n                            <Form.Group controlId='skillName'>\n                                <Form.Label><strong>Skill</strong></Form.Label>\n                                <OverlayTrigger\n                                    placement=\"top\"\n                                    overlay={<Tooltip id=\"button-tooltip-2\">{skillId && skillsAll ? skillsAll.map(x => (x._id === skillId) && x.description) : 'no description'}</Tooltip>}\n                                >\n                                    <Form.Control\n                                        as='select'\n                                        value={skillId ? skillId : 'default'}\n                                        onChange={(e) => setSkillId(e.target.value)}\n                                        required\n                                    >\n                                        <option value='default'>Please Select</option>\n                                        {skillsAll && skillCategory && (\n                                            skillsAll.map((x, val) => (\n                                                x.category === skillCategory && (\n                                                    <option\n                                                        value={x._id}\n                                                        key={val}\n                                                    >{x.name}</option>\n                                                )\n                                            )))}\n\n                                    </Form.Control>\n                                </OverlayTrigger>\n                            </Form.Group>\n                        </Col>\n                        <Col xs={12} md={3} >\n                            <Form.Group controlId='skillLevel'>\n                                <Form.Label><strong>Level</strong></Form.Label>\n                                <Form.Control\n                                    type='number'\n                                    min={0}\n                                    max={5}\n                                    step={0.5}\n                                    value={skillLevel ? skillLevel : 1}\n                                    onChange={(e) => setSkillLevel(e.target.value)}\n                                    required\n                                ></Form.Control>\n                            </Form.Group>\n                        </Col>\n                        <Col xs={12} md={3} className='align-items-bottom'>\n                            <Form.Group>\n                                <InputGroup>\n                                    <Button\n                                        block\n                                        onClick={() => handleAddSkill(consultantId, skillId, skillLevel)}\n                                    >{loadingConsultantAddSkill ? <Loader /> : 'Add'}</Button>\n                                </InputGroup>\n                            </Form.Group>\n                        </Col>\n                    </Form.Row>\n\n                    {/*errorConsultantUpdateSkill && <Message variant='danger'>{errorConsultantUpdateSkill}</Message>*/}\n                    {errorConsultantAddSkill && <Message variant='danger'>{errorConsultantAddSkill}</Message>}\n\n                </ListGroup.Item>\n\n            )}\n            \n            \n            <ListGroup.Item>\n                {qualityOrdonned && qualityOrdonned.length ? (\n                    <ListGroup variant='flush'>\n                        {qualityOrdonned.map((categoryList,val) => (\n                            <ListGroup.Item key={val}>\n                                <h4>{categoryList.category}</h4>\n                                {categoryList.data.map( (x,val) => (\n                                    <SkillDisplayLine \n                                        consultantId={consultantId}\n                                        key={val}\n                                        skill={x}\n                                        val={val}\n                                        //handleUpdateSkillLevel={handleUpdateSkillLevel}\n                                        //handlerDeleteConsultantSkill={handlerDeleteConsultantSkill}\n                                        setUpdate={setUpdate}\n                                        editable={editable}\n                                    />\n                                ))}\n                            </ListGroup.Item>\n                        ))}\n                    </ListGroup>\n                ) : <p>Please add quality</p>}\n            </ListGroup.Item>\n\n        </DropDownTitleContainer>\n    )\n}\n\nconst SkillDisplayLine = ({ \n    consultantId, \n    skill, \n    val, \n    //handleUpdateSkillLevel, \n    //handlerDeleteConsultantSkill, \n    setUpdate,\n    editable=true}) => {\n\n    const dispatch = useDispatch();\n\n    const consultantUpdateSkill = useSelector(state => state.consultantUpdateSkill);\n    const { success: successConsultantUpdateSkill } = consultantUpdateSkill;\n\n    const consultantDeleteSkillReducer = useSelector(state => state.consultantDeleteSkill);\n    const { success: successConsultantDeleteSkill } = consultantDeleteSkillReducer;\n    \n    const [level, setLevel] = useState(skill.level);\n    const [waitingValidationLevel, setWaitingValidationLevel] = useState(skill.level);\n\n    useEffect(() => {\n        if (successConsultantDeleteSkill) {\n            setUpdate(true);\n        }\n    }, [\n        successConsultantDeleteSkill,\n        setUpdate\n    ]);\n\n    useEffect(() => {\n        if (successConsultantUpdateSkill) {\n            setLevel(waitingValidationLevel);\n            dispatch({type: CONSULTANT_UPDATE_SKILL_RESET})\n        }\n    },[dispatch, successConsultantUpdateSkill, waitingValidationLevel])\n\n\n    const updateLevel = (newLevel) => {\n        \n        dispatch(consultantUpdateASkillLevel(consultantId, skill.skill._id, newLevel));\n        setWaitingValidationLevel(newLevel);\n\n        //handleUpdateSkillLevel(consultantId, skill.skill._id, newLevel)\n    }\n\n\n    const handlerDeleteConsultantSkill = (consultantId, skillId) => {\n        dispatch(consultantDeleteSkill(consultantId, skillId));\n    }   \n\n\n    return (\n        <>\n            {/*errorConsultantUpdateSkill && <Message variant='danger'>{errorConsultantUpdateSkill}</Message>*/}\n            <Form.Row key={val}>\n                <Col xs={3}>\n                    <Form.Group controlId='skillName' className='mb-0'>\n                        <Form.Control\n                            plaintext\n                            readOnly\n                            value={skill.skill && skill.skill.name}\n                        ></Form.Control>\n                    </Form.Group>\n                </Col>\n                <Col>\n                    <Rating\n                        value={Number(level)}\n                        setValue={updateLevel}\n                        editable={editable}\n                    />\n                </Col>\n\n                <Col>\n                    {editable && (\n                        <Form.Group className='mb-0'>\n                            <InputGroup>\n                                <Button\n                                    //style={{color:'grey'}}\n                                    variant=\"secondary\"\n                                    size='sm'\n                                    onClick={() => handlerDeleteConsultantSkill(consultantId, skill.skill._id)}\n                                ><i className=\"fas fa-times-circle\"></i></Button>\n                            </InputGroup>\n                        </Form.Group>\n                    )}\n                </Col>\n            </Form.Row>\n        </>\n    )\n}\n\nexport default SkillsDetails\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport { LinkContainer } from 'react-router-bootstrap';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Nav from 'react-bootstrap/Nav';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport PxxEditor from '../components/PxxEditor';\nimport DropDownTitleContainer from '../components/DropDownTitleContainer';\nimport ConsultantsTab from '../components/ConsultantsTab';\nimport Message from '../components/Message';\nimport Meta from '../components/Meta';\nimport Loader from '../components/Loader';\nimport { getAllMyConsultants, updateComment, updateMyConsultant } from '../actions/consultantActions';\nimport { Container, FormControl, InputGroup } from 'react-bootstrap';\nimport { setConsultantFocus } from '../actions/consultantActions';\nimport ViewStaffs from '../components/ViewStaffs';\nimport ViewOldStaffs from '../components/ViewOldStaffs';\nimport SkillsDetails from '../components/SkillsDetails';\nimport DisplayChildren from '../components/DisplayChildren';\n\nconst PxxEditScreen = ({ history }) => {\n\n    const dispatch = useDispatch();\n\n    const [commentText, setCommentText] = useState('');\n    const [trObjectives, setTrObjectives] = useState('');\n    const [myObjectives, setMyObjectives] = useState('');\n    const [delegateOption, setDelegationOption] = useState(false);\n\n    const userLogin = useSelector(state => state.userLogin);\n    const { userInfo } = userLogin;\n\n    const consultantsMyList = useSelector(state => state.consultantsMyList);\n    const { loading: loadingConsultantsMyList, error: errorConsultantsMyList, consultantsMy, focus } = consultantsMyList;\n\n    // const consultantMyUpdate = useSelector(state => state.consultantMyUpdate);\n    // const { loading: loadingUpdate, success: successUpdate, error: errorUpdate } = consultantMyUpdate;\n\n\n    const [searchDate, setSearchDate] = useState(new Date(Date.now()));\n\n    useEffect(() => {\n\n        if (!userInfo) {\n            history.push('/login');\n        }\n    }, [history, userInfo]);\n\n\n    useEffect(() => {\n        // Effect to start loading my consultants and then to update every time focus change\n        const option = delegateOption ? 'delegate' : '';\n        console.log('option', option);\n        dispatch(getAllMyConsultants(option));\n    }, [dispatch, focus, delegateOption])\n\n    useEffect(() => {\n        if (consultantsMy) {\n            setCommentText(consultantsMy[focus].comment);\n            setMyObjectives(consultantsMy[focus].personalObjectives);\n            setTrObjectives(consultantsMy[focus].talentReviewObjectives);\n        }\n    }, [consultantsMy, focus]);\n\n    const navigationMonthHandler = (value) => {\n        const navigationDate = new Date(searchDate);\n        navigationDate.setMonth(navigationDate.getMonth() + value);\n        setSearchDate(navigationDate);\n    }\n\n    const navigationConsultantHandler = (value) => {\n\n        if (((focus + value) >= 0) && ((focus + value) < consultantsMy.length)) {\n            dispatch(setConsultantFocus(focus + value));\n        }\n    }\n\n    const updateCommentHandler = (consultantId, value) => {\n        dispatch(updateComment(consultantId, value));\n    }\n\n    return (\n\n        <Container>\n            <Meta />\n            {loadingConsultantsMyList ? <Loader /> :\n                errorConsultantsMyList ? <Message variant='danger'>{errorConsultantsMyList}</Message>\n                    : !consultantsMy || consultantsMy.length === 0 ?\n                        <Message variant='info'>You don't have consultant to edit yet</Message> : (\n                            <>\n                                <div className='border-bottom p-3'>\n                                    <Row>\n                                        <Col className=\"text-center\" xs={2}>\n                                            <Button\n                                                variant='primary'\n                                                size='sm'\n                                                onClick={() => navigationConsultantHandler(-1)}\n                                                disabled={focus === 0}\n                                            ><i className=\"fas fa-caret-left\"></i>\n                                            </Button>\n                                        </Col>\n                                        <Col className=\"text-center\" xs={8}>\n                                            <LinkContainer to={`/editconsultant/${consultantsMy[focus]._id}`}>\n                                                <Nav.Link>\n                                                    <h4>{consultantsMy[focus].name} <i>({consultantsMy[focus].matricule})</i></h4>\n                                                </Nav.Link>\n                                            </LinkContainer>\n                                        </Col>\n                                        <Col className=\"text-center\" xs={2}>\n                                            <Button\n                                                variant='primary'\n                                                size='sm'\n                                                onClick={() => navigationConsultantHandler(1)}\n                                                disabled={focus === consultantsMy.length - 1}\n                                            ><i className=\"fas fa-caret-right\"></i>\n                                            </Button>\n                                        </Col>\n                                    </Row>\n\n                                    <Row className='mt-3'>\n                                        <Col xs={12} md={4}>\n                                            <ListGroup>\n                                            <ListGroup.Item>\n                                                <Row className=\"my-3\">\n                                                    <Col className=\"text-left\"><b>Arrival:</b> {consultantsMy[focus].arrival && consultantsMy[focus].arrival.substring(0, 10)}</Col>\n                                                    <Col className=\"text-left\"><b>Valued:</b> {consultantsMy[focus].valued && consultantsMy[focus].valued.substring(0, 10)}</Col>\n                                                    <Col className=\"text-left\"><b>Leaving:</b> {consultantsMy[focus].leaving && consultantsMy[focus].leaving.substring(0, 10)}</Col>\n                                                </Row>\n                                                <Row className=\"my-3\">\n                                                    <Col><b>Seniority:</b> {((new Date(Date.now()) - new Date(consultantsMy[focus].arrival.substring(0, 10))) / (1000 * 3600 * 24 * 365.25)).toString().substring(0, 4)} years</Col>\n                                                </Row>\n\n                                                <Row className=\"my-3\">\n                                                    <Col>\n                                                        {!(consultantsMy[focus]._id === userInfo.consultantProfil._id) && (\n                                                            <>\n                                                                <label htmlFor=\"comment\"><strong>Staffing comment</strong></label>\n                                                                <InputGroup>\n                                                                    <FormControl\n                                                                        as='textarea'\n                                                                        rows={7}\n                                                                        id='comment'\n                                                                        value={commentText}\n                                                                        placeholder='Please enter a comment'\n                                                                        onChange={(e) => {\n                                                                            setCommentText(e.target.value);\n                                                                            updateCommentHandler(consultantsMy[focus]._id, e.target.value)\n                                                                        }}\n                                                                    ></FormControl>\n                                                                </InputGroup>\n                                                            </>\n                                                        )}\n\n                                                    </Col>\n                                                </Row>\n                                            </ListGroup.Item>\n                                            </ListGroup>\n                                        </Col>\n\n                                        <Col xs={12} md={8}>\n                                            <PxxEditor\n                                                consultantsMy={consultantsMy}\n                                                consultantFocus={focus}\n                                                searchDate={searchDate}\n                                                navigationMonthHandler={navigationMonthHandler}\n                                            />\n                                        </Col>\n                                    </Row>\n                                </div>\n\n                                <div className='border-bottom p-3'>\n                                    <Row>\n                                        <Col xs={12} md={6}>\n                                            <label htmlFor=\"personal-objectives\"><strong>My objectives</strong></label>\n                                            <InputGroup>\n                                                <FormControl\n                                                    as='textarea'\n                                                    rows={3}\n                                                    id='personal-objectives'\n                                                    value={myObjectives}\n                                                    placeholder='Please enter a comment'\n                                                    onChange={(e) => {\n                                                        setMyObjectives(e.target.value);\n                                                        dispatch(updateMyConsultant({\n                                                            ...consultantsMy[focus], \n                                                            personalObjectives: e.target.value,\n                                                            talentReviewObjectives: trObjectives\n                                                        }));\n                                                        //updateCommentHandler(consultantsMy[focus]._id, e.target.value)\n                                                    }}\n                                                ></FormControl>\n                                            </InputGroup>\n                                        </Col>\n                                        <Col xs={12} md={6}>\n                                        <label htmlFor=\"personal-objectives\"><strong>Annual objectives</strong></label>\n                                            <InputGroup>\n                                                <FormControl\n                                                    as='textarea'\n                                                    rows={3}\n                                                    id='personal-objectives'\n                                                    value={trObjectives}\n                                                    placeholder='Please enter a comment'\n                                                    onChange={(e) => {\n                                                        setTrObjectives(e.target.value);\n                                                        dispatch(updateMyConsultant({\n                                                            ...consultantsMy[focus], \n                                                            personalObjectives: myObjectives,\n                                                            talentReviewObjectives: e.target.value,\n                                                        }))\n                                                        //updateCommentHandler(consultantsMy[focus]._id, e.target.value)\n                                                    }}\n                                                ></FormControl>\n                                            </InputGroup>\n                                        </Col>\n                                    </Row>\n                                </div>\n\n                                <Row>\n                                    <Col>\n                                        <DisplayChildren access='viewStaffings'>\n                                            <DropDownTitleContainer title='Staffings on track' close={false}>\n                                                <ViewStaffs\n                                                    history={history}\n                                                    consultantId={consultantsMy[focus]._id}\n                                                />\n                                            </DropDownTitleContainer>\n                                        </DisplayChildren>\n                                    </Col>\n                                </Row>\n\n                                <Row>\n                                    <Col>\n                                        <DropDownTitleContainer title='Old staffings' close={true}>\n                                            <ViewOldStaffs\n                                                history={history}\n                                                consultantId={consultantsMy[focus]._id}\n                                            />\n                                        </DropDownTitleContainer>\n                                    </Col>\n                                </Row>\n                                \n                                <Row>\n                                    <Col>\n                                        <DisplayChildren access='viewSkills'>\n                                            <SkillsDetails consultantId={consultantsMy[focus]._id} />\n                                        </DisplayChildren>\n                                    </Col>\n                                </Row>\n\n                                <Row>\n                                    <Col>\n                                        <DisplayChildren access='viewOthersConsultants'>\n                                            <DropDownTitleContainer title='Others consultants' close={false}>\n                                                <Form.Group controlId='switch-only-available' className='mt-3'>\n                                                    <Form.Check\n                                                        type='switch'\n                                                        id='switch-delegation'\n                                                        label='View delegation'\n                                                        checked={delegateOption}\n                                                        onChange={(e) => { e.target.checked === true ? setDelegationOption(true) : setDelegationOption(false) }}\n                                                    ></Form.Check>\n                                                </Form.Group>\n                                                <ConsultantsTab\n                                                    consultantsMy={consultantsMy}\n                                                    history={history}\n                                                    focusActive={true}\n                                                />\n                                            </DropDownTitleContainer>\n                                        </DisplayChildren>\n                                    </Col>\n                                </Row>\n                            </>\n                        )}\n        </Container>\n    )\n}\n\nexport default PxxEditScreen;\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\nimport DropDownTitleContainer from '../components/DropDownTitleContainer';\nimport {\n    createConsultant,\n    getAllCDM,\n    getAllPractice,\n    getMyConsultant,\n    updateMyConsultant\n} from '../actions/consultantActions';\nimport {\n    CONSULTANT_CREATE_RESET,\n    CONSULTANT_GRADE,\n    CONSULTANT_MY_UPDATE_RESET\n} from '../constants/consultantConstants';\nimport SkillsDetails from '../components/SkillsDetails';\nimport DisplayChildren from '../components/DisplayChildren';\n\nconst ConsultantEditScreen = ({ history, match }) => {\n\n    const dispatch = useDispatch();\n\n    const [name, setName] = useState('');\n    const [email, setEmail] = useState('');\n    const [matricule, setMatricule] = useState('');\n    const [practice, setPractice] = useState('');\n    const [grade, setGrade] = useState('Analyst');\n\n    const [cdm, setCdm] = useState('');\n    const [arrival, setArrival] = useState('');\n    const [valued, setValued] = useState('');\n    const [leaving, setLeaving] = useState('');\n    const [seniority, setSeniority] = useState('');\n    const [isCDM, setIsCDM] = useState(false);\n\n    const [partialTime, setPartialTime] = useState(false);\n    const [startPartialTime, setStartPartialTime] = useState('');\n    const [endPartialTime, setEndPartialTime] = useState('');\n    const [valueMonday, setValueMonday] = useState(1);\n    const [valueTuesday, setValueTuesday] = useState(1);\n    const [valueWednesday, setValueWednesday] = useState(1);\n    const [valueThursday, setValueThursday] = useState(1);\n    const [valueFriday, setValueFriday] = useState(1);\n\n    const [errorMessage, setErrorMessage] = useState('');\n    const [successMessage, setSuccessMessage] = useState('');\n\n    const [update, setUpdate] = useState(false);\n\n    const valueEditType = match.params.id ? 'edit' : 'create';\n\n    const userLogin = useSelector(state => state.userLogin);\n    const { userInfo } = userLogin;\n\n    const consultantMy = useSelector(state => state.consultantMy);\n    const { loading, error, consultant } = consultantMy;\n\n    const consultantMyUpdate = useSelector(state => state.consultantMyUpdate);\n    const { loading: loadingUpdate, error: errorUpdate, success: successUpdate } = consultantMyUpdate;\n\n    const consultantCreate = useSelector(state => state.consultantCreate);\n    const { loading: loadingCreate, error: errorCreate, success: successCreate, consultantCreated } = consultantCreate;\n\n    const consultantCDMList = useSelector(state => state.consultantCDMList);\n    const { error: errorCDM, cdmList } = consultantCDMList;\n\n    const consultantPracticeList = useSelector(state => state.consultantPracticeList);\n    const { error: errorPractice, practiceList } = consultantPracticeList;\n\n    useEffect(() => {\n        if (!userInfo) {\n            history.push('/login');\n        }\n    }, [history, userInfo]);\n\n    useEffect(() => {\n        if (match.params.id) {\n            if (!consultant) {\n                dispatch(getMyConsultant(match.params.id));\n                /*if (!loading) {\n                    //setUpdate(false);\n                }*/\n            } /*else {\n                if (consultant._id !== match.params.id) {\n                    dispatch(getMyConsultant(match.params.id));\n                    //setUpdate(false);\n                }\n            }*/\n        }\n    }, [dispatch, match, consultant]);\n\n    useEffect(() => {\n        if (match.params.id) {\n\n            if (consultant && consultant._id !== match.params.id) {\n                dispatch(getMyConsultant(match.params.id));\n                //setUpdate(false);\n            }\n\n        }\n    }, [dispatch, match, consultant]);\n\n    useEffect(() => {\n        if (update) {\n            dispatch(getMyConsultant(match.params.id));\n            setUpdate(false);\n        }\n    }, [dispatch, update, match]);\n\n    useEffect(() => {\n        if ((match.params.id) && (successUpdate)) {\n            setUpdate(true);\n        }\n    }, [\n        match,\n        successUpdate\n    ]);\n\n    useEffect(() => {\n        // Only in admin Level 0 access we can modify consultant Practice\n        if (!practiceList) {\n            dispatch(getAllPractice());\n        }\n    }, [dispatch, userInfo, practiceList]);\n\n    useEffect(() => {\n        // Load default data for cdm in the current practice\n        if (practice) {\n            dispatch(getAllCDM(practice));\n        }\n    }, [dispatch, practice]);\n\n    useEffect(() => {\n        if ((match.params.id) && consultant) {\n            setName(consultant.name);\n            setEmail(consultant.email);\n            setMatricule(consultant.matricule);\n            setPractice(consultant.practice);\n            setGrade(consultant.grade);\n            //setQuality(consultant.quality || []);\n            setCdm(consultant.cdmId ? consultant.cdmId : ''); //'waiting affectation'\n            setArrival(consultant.arrival.substring(0, 10));\n            setValued(consultant.valued ? consultant.valued.substring(0, 10) : '');\n            setLeaving(consultant.leaving ? consultant.leaving.substring(0, 10) : '');\n            setSeniority(((new Date(Date.now()) - new Date(consultant.arrival.substring(0, 10))) / (1000 * 3600 * 24 * 365.25)).toString().substring(0, 4));\n            setIsCDM(consultant.isCDM || false);\n            setPartialTime(consultant.isPartialTime.value);\n            setStartPartialTime(consultant.isPartialTime.start.substring(0, 10) ? consultant.isPartialTime.start.substring(0, 10) : false)\n            setEndPartialTime(consultant.isPartialTime.end.substring(0, 10) ? consultant.isPartialTime.end.substring(0, 10) : false)\n            setValueMonday(consultant.isPartialTime.week.filter(x => x.num === 1)[0].worked)\n            setValueTuesday(consultant.isPartialTime.week.filter(x => x.num === 2)[0].worked)\n            setValueWednesday(consultant.isPartialTime.week.filter(x => x.num === 3)[0].worked)\n            setValueThursday(consultant.isPartialTime.week.filter(x => x.num === 4)[0].worked)\n            setValueFriday(consultant.isPartialTime.week.filter(x => x.num === 5)[0].worked)\n        }\n    }, [match, consultant, valueEditType]);\n\n    useEffect(() => {\n\n        // Charge default practice for admin Level 0 user\n        if (!practice && userInfo && practiceList) {\n            setPractice(practiceList[0]);\n        }\n\n    }, [\n        userInfo,\n        practice,\n        practiceList,\n        cdm,\n        cdmList\n    ]);\n\n    useEffect(() => {\n        if (errorUpdate) {\n            setErrorMessage({ message: errorUpdate, type: 'danger' });\n            dispatch({ type: CONSULTANT_MY_UPDATE_RESET })\n        }\n        if (successUpdate) {\n            setSuccessMessage({ message: 'Consultant updated', type: 'success' });\n            dispatch({ type: CONSULTANT_MY_UPDATE_RESET })\n        }\n        if (errorCreate) {\n            setErrorMessage({ message: errorCreate, type: 'danger' });\n            dispatch({ type: CONSULTANT_CREATE_RESET })\n        }\n        if (successCreate) {\n            setSuccessMessage({ message: 'Consultant created', type: 'success' });\n            history.push(`/editconsultant/${consultantCreated._id}`);\n            dispatch({ type: CONSULTANT_CREATE_RESET })\n        }\n    }, [dispatch, history, errorUpdate, successUpdate, successCreate, errorCreate, consultantCreated]);\n\n    const submitHandler = (e) => {\n\n        e.preventDefault();\n\n        if (valueEditType === 'edit') {\n\n            const updatedUser = {\n                ...consultant,\n                name: name,\n                matricule: matricule,\n                arrival: new Date(arrival),\n                valued: new Date(valued),\n                leaving: leaving ? new Date(leaving) : null,\n                isCDM: isCDM,\n                grade: grade,\n                cdmId: cdm,\n                isPartialTime: {\n                    value: partialTime,\n                    start: partialTime ? startPartialTime : '',\n                    end: partialTime ? endPartialTime : '',\n                    week: [\n                        { num: 1, worked: partialTime ? valueMonday : 1 },\n                        { num: 2, worked: partialTime ? valueTuesday : 1 },\n                        { num: 3, worked: partialTime ? valueWednesday : 1 },\n                        { num: 4, worked: partialTime ? valueThursday : 1 },\n                        { num: 5, worked: partialTime ? valueFriday : 1 }\n                    ]\n                }\n            }\n            dispatch(updateMyConsultant(updatedUser));\n        }\n\n        if (valueEditType === 'create') {\n            const consultant = {\n                name,\n                email,\n                matricule,\n                arrival,\n                valued,\n                leaving,\n                practice,\n                isCDM,\n                grade: grade,\n                cdmId: cdm,\n                isPartialTime: {\n                    value: partialTime,\n                    start: startPartialTime,\n                    end: endPartialTime,\n                    week: [\n                        { num: 1, worked: valueMonday },\n                        { num: 2, worked: valueTuesday },\n                        { num: 3, worked: valueWednesday },\n                        { num: 4, worked: valueThursday },\n                        { num: 5, worked: valueFriday },\n                    ]\n                }\n            }\n            dispatch(createConsultant(consultant));\n        }\n    }\n\n    const changeValueDateHandler = (e) => {\n        setValued(e.substring(0, 10));\n        setSeniority(((new Date(Date.now()) - new Date(e.substring(0, 10))) / (1000 * 3600 * 24 * 365.25)).toString().substring(0, 4));\n    }\n\n    const goBackHandler = () => {\n        history.go(-1);\n        setErrorMessage('');\n        setSuccessMessage('');\n    }\n\n    return (\n        <>\n            {error && <Message variant='danger'>{error}</Message>}\n            {errorMessage && <Message variant='danger'>{errorMessage.message}</Message>}\n\n            {errorCDM && <Message variant='danger'>{errorCDM}</Message>}\n            {errorPractice && <Message variant='danger'>{errorPractice}</Message>}\n\n            {loading && <Loader />}\n\n            <Button className='mb-3' onClick={() => goBackHandler()}>\n                Go Back\n            </Button>\n            <DisplayChildren access='editConsultantProfil'>\n\n                <Container>\n                    <Row className='justify-content-md-center'>\n                        <Col xs={12} md={8}>\n\n                            <Form onSubmit={submitHandler}>\n                                <h2>{name && name}</h2>\n\n                                <DropDownTitleContainer title='Personal' close={valueEditType !== 'create'}>\n                                    <ListGroup.Item>\n                                        <Form.Row>\n                                            <Col>\n                                                <Form.Group controlId='name'>\n                                                    <Form.Label><b>Name</b></Form.Label>\n                                                    <Form.Control\n                                                        type='name'\n                                                        placeholder='Enter Name'\n                                                        value={name && name}\n                                                        onChange={(e) => setName(e.target.value)}\n                                                        required\n                                                    ></Form.Control>\n                                                </Form.Group>\n                                            </Col>\n                                        </Form.Row>\n\n                                        <Form.Row>\n                                            <Col>\n                                                <Form.Group controlId='matricule'>\n                                                    <Form.Label><b>Matricule</b></Form.Label>\n                                                    <Form.Control\n                                                        type='text'\n                                                        placeholder='Enter Matricule'\n                                                        value={matricule && matricule}\n                                                        onChange={(e) => setMatricule(e.target.value)}\n                                                        required\n                                                    ></Form.Control>\n                                                </Form.Group>\n                                            </Col>\n                                            <Col>\n                                                <Form.Group controlId='seniority'>\n                                                    <Form.Label><b>Seniority</b> <i>(years)</i></Form.Label>\n                                                    <Form.Control\n                                                        type='text'\n                                                        placeholder='-'\n                                                        value={seniority && seniority}\n                                                        readOnly\n                                                    ></Form.Control>\n                                                </Form.Group>\n                                            </Col>\n                                        </Form.Row>\n\n                                        <Form.Row>\n                                            <Col>\n                                                <Form.Group controlId='email'>\n                                                    <Form.Label><b>Email Address</b></Form.Label>\n                                                    <Form.Control\n                                                        type='email'\n                                                        placeholder='Enter email'\n                                                        value={email && email}\n                                                        onChange={(e) => setEmail(e.target.value)}\n                                                        required\n                                                    ></Form.Control>\n                                                </Form.Group>\n                                            </Col>\n                                        </Form.Row>\n\n                                    </ListGroup.Item>\n                                </DropDownTitleContainer>\n\n                                {consultant && valueEditType !== 'create' && (\n                                    <SkillsDetails consultantId={consultant._id} />\n                                )}\n\n                                <DropDownTitleContainer title='Profil' close={false}>\n                                    <ListGroup.Item>\n                                        <Form.Row>\n                                            <Col>\n                                                <Form.Group controlId='practice'>\n                                                    <Form.Label><b>Practice</b></Form.Label>\n                                                    <InputGroup>\n                                                        <Form.Control\n                                                            as='select'\n                                                            value={practice ? practice : userInfo ? userInfo.consultantProfil.practice : \"\"}\n                                                            //disabled={userInfo && !(userInfo.adminLevel === 0)}\n                                                            onChange={(e) => {\n                                                                setPractice(e.target.value)\n                                                            }}\n                                                            required\n                                                        >\n                                                            {!practiceList ? <option value={practice && practice}>{practice}</option>\n                                                                : errorPractice ? <Message variant='Danger'>No Practice found</Message>\n                                                                    : (\n                                                                        practiceList.map(x => (\n                                                                            <option\n                                                                                key={x}\n                                                                                value={x}\n                                                                                disabled={x === '-' ? true : false}\n                                                                            >{x}</option>\n                                                                        ))\n                                                                    )}\n                                                        </Form.Control>\n                                                    </InputGroup>\n                                                </Form.Group>\n                                            </Col>\n                                        </Form.Row>\n\n                                        <Form.Row>\n                                            <Col>\n                                                <Form.Group controlId='grade'>\n                                                    <Form.Label><b>Grade</b></Form.Label>\n                                                    <Form.Control\n                                                        as='select'\n                                                        placeholder='Enter grade'\n                                                        value={grade && grade}\n                                                        onChange={(e) => setGrade(e.target.value)}\n                                                        required\n                                                    >\n                                                        {CONSULTANT_GRADE.map(x => (\n                                                            <option key={x} value={x}>{x}</option>\n                                                        ))}\n                                                    </Form.Control>\n                                                </Form.Group>\n                                            </Col>\n                                        </Form.Row>\n\n                                        <Form.Row>\n                                            <Col>\n                                                <Form.Group controlId='cdm'>\n                                                    <Form.Label><b>CDM</b></Form.Label>\n                                                    <Form.Control\n                                                        as='select'\n                                                        value={cdm ? cdm : 'default'}\n                                                        //disabled={userInfo && !(userInfo.adminLevel <= 2)}\n                                                        onChange={(e) => setCdm(e.target.value)}\n                                                        required\n                                                    >\n                                                        <option value='default'>Please Select</option>\n                                                        {!cdmList ? 'No cdm'\n                                                            : errorCDM ? <Message variant='danger'>No CDM found, please verify Practice</Message>\n                                                                : cdmList.length && (\n                                                                    cdmList.map(x => (\n                                                                        <option\n                                                                            key={x._id}\n                                                                            value={x._id}\n                                                                        >{x.name}</option>\n                                                                    ))\n                                                                )}\n                                                    </Form.Control>\n\n                                                </Form.Group>\n                                            </Col>\n                                        </Form.Row>\n\n                                        <ListGroup.Item>\n                                            <Form.Row>\n                                                <Col>\n                                                    <Form.Group controlId='valued'>\n                                                        <Form.Label><b>Valued date</b></Form.Label>\n                                                        <Form.Control\n                                                            type='date'\n                                                            value={valued && valued}\n                                                            onChange={(e) => changeValueDateHandler(e.target.value)}\n                                                            required\n                                                        ></Form.Control>\n                                                    </Form.Group>\n                                                </Col>\n\n                                                <Col>\n                                                    <Form.Group controlId='arrival'>\n                                                        <Form.Label><b>Arrival date</b></Form.Label>\n                                                        <Form.Control\n                                                            type='date'\n                                                            value={arrival && arrival}\n                                                            min={valued}\n                                                            onChange={(e) => {\n                                                                setArrival(e.target.value);\n                                                            }}\n                                                            required\n                                                        ></Form.Control>\n                                                    </Form.Group>\n                                                </Col>\n\n                                                <Col>\n                                                    <Form.Group controlId='leaving'>\n                                                        <Form.Label><b>Leaving date</b></Form.Label>\n                                                        <Form.Control\n                                                            type='date'\n                                                            value={leaving && leaving}\n                                                            min={arrival}\n                                                            onChange={(e) => setLeaving(e.target.value)}\n                                                        ></Form.Control>\n                                                    </Form.Group>\n                                                </Col>\n                                            </Form.Row>\n                                        </ListGroup.Item>\n\n                                        <ListGroup.Item>\n                                            <Form.Row>\n                                                <Col>\n                                                    <Form.Group controlId=\"partialtime\">\n                                                        <Form.Check\n                                                            type=\"checkbox\"\n                                                            label=\"Partial time\"\n                                                            checked={partialTime ? true : false}\n                                                            onChange={(e) => {\n                                                                setPartialTime(e.target.checked)\n                                                            }} />\n                                                    </Form.Group>\n                                                </Col>\n                                                {partialTime && (\n                                                    <>\n                                                        <Col>\n                                                            <Form.Group controlId='startpartialtime'>\n                                                                <Form.Label>Start</Form.Label>\n                                                                <Form.Control\n                                                                    type=\"Date\"\n                                                                    min={arrival && arrival}\n                                                                    value={startPartialTime && startPartialTime}\n                                                                    onChange={(e) => {\n                                                                        setStartPartialTime(e.target.value.substring(0, 10));\n                                                                        !endPartialTime && setEndPartialTime(e.target.value.substring(0, 10));\n                                                                        (endPartialTime < e.target.value.substring(0, 10)) && setEndPartialTime(e.target.value.substring(0, 10));\n                                                                    }}\n                                                                    required\n                                                                ></Form.Control>\n                                                            </Form.Group>\n                                                        </Col>\n\n                                                        <Col>\n                                                            <Form.Group controlId='endpartialtime'>\n                                                                <Form.Label>End</Form.Label>\n                                                                <Form.Control\n                                                                    type=\"Date\"\n                                                                    value={endPartialTime && endPartialTime}\n                                                                    min={startPartialTime || ''}\n                                                                    onChange={(e) => {\n                                                                        setEndPartialTime(e.target.value.substring(0, 10))\n                                                                    }}\n                                                                    required\n                                                                ></Form.Control>\n                                                            </Form.Group>\n                                                        </Col>\n                                                    </>\n                                                )}\n                                            </Form.Row>\n\n                                            {partialTime && (\n                                                <Form.Row>\n                                                    <Col>\n                                                        <Form.Group controlId='monday'>\n                                                            <Form.Label><b>Monday</b></Form.Label>\n                                                            <Form.Control\n                                                                type='Number'\n                                                                min={0}\n                                                                max={1}\n                                                                step={0.5}\n                                                                value={Number(valueMonday)}\n                                                                onChange={(e) => setValueMonday(e.target.value)}\n                                                            ></Form.Control>\n                                                        </Form.Group>\n                                                    </Col>\n                                                    <Col>\n                                                        <Form.Group controlId='tuesday'>\n                                                            <Form.Label><b>Tuesday</b></Form.Label>\n                                                            <Form.Control\n                                                                type='Number'\n                                                                min={0}\n                                                                max={1}\n                                                                step={0.5}\n                                                                value={Number(valueTuesday)}\n                                                                onChange={(e) => setValueTuesday(e.target.value)}\n                                                            ></Form.Control>\n                                                        </Form.Group>\n                                                    </Col>\n                                                    <Col>\n                                                        <Form.Group controlId='wendnesday'>\n                                                            <Form.Label><b>Wendnesday</b></Form.Label>\n                                                            <Form.Control\n                                                                type='Number'\n                                                                min={0}\n                                                                max={1}\n                                                                step={0.5}\n                                                                value={Number(valueWednesday)}\n                                                                onChange={(e) => setValueWednesday(e.target.value)}\n                                                            ></Form.Control>\n                                                        </Form.Group>\n                                                    </Col>\n                                                    <Col>\n                                                        <Form.Group controlId='thursday'>\n                                                            <Form.Label><b>Thursday</b></Form.Label>\n                                                            <Form.Control\n                                                                type='Number'\n                                                                min={0}\n                                                                max={1}\n                                                                step={0.5}\n                                                                value={Number(valueThursday)}\n                                                                onChange={(e) => setValueThursday(e.target.value)}\n                                                            ></Form.Control>\n                                                        </Form.Group>\n                                                    </Col>\n                                                    <Col>\n                                                        <Form.Group controlId='friday'>\n                                                            <Form.Label><b>Friday</b></Form.Label>\n                                                            <Form.Control\n                                                                type='Number'\n                                                                min={0}\n                                                                max={1}\n                                                                step={0.5}\n                                                                value={Number(valueFriday)}\n                                                                onChange={(e) => setValueFriday(e.target.value)}\n                                                            ></Form.Control>\n                                                        </Form.Group>\n                                                    </Col>\n                                                </Form.Row>\n                                            )}\n                                        </ListGroup.Item>\n\n                                        <ListGroup.Item>\n                                            <Form.Row>\n                                                <Col>\n                                                    <Form.Group controlId=\"iscdm\">\n                                                        <Form.Check\n                                                            type=\"checkbox\"\n                                                            label=\"Is CDM\"\n                                                            checked={isCDM ? true : false}\n                                                            onChange={(e) => {\n                                                                setIsCDM(e.target.checked);\n                                                            }} />\n                                                    </Form.Group>\n                                                </Col>\n                                            </Form.Row>\n                                        </ListGroup.Item>\n                                    </ListGroup.Item>\n                                </DropDownTitleContainer>\n\n                                <Form.Row className='pt-3'>\n                                    <Col>\n                                        <Button\n                                            type='submit'\n                                            variant='primary'\n                                            block\n                                            disabled={!name || !email || !matricule || !practice || !cdm || !valued || !arrival}\n                                        >{(loadingUpdate || loadingCreate) ? <Loader /> : valueEditType === 'create' ? \"Create\" : \"Update\"}\n                                        </Button>\n                                    </Col>\n                                </Form.Row>\n                                <Form.Row>\n                                    <Col>\n                                        {successMessage && <Message variant='success'><i className=\"fas fa-check-circle\">  Your information is correctly registered</i></Message>}\n                                    </Col>\n                                </Form.Row>\n\n                            </Form>\n\n\n                        </Col>\n                    </Row>\n                </Container>\n            </DisplayChildren>\n        </>\n    )\n}\n\nexport default ConsultantEditScreen;\n","import React, { useState } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport * as XLSX from 'xlsx';\n\nconst ImportExcelFile = ({setImportData, sheets = 'all'}) => {\n\n    const [fileName, setFileName] = useState('');\n\n    const readFileHandler = async (e) => {\n\n        //const [importData, setImportData] = useState([]);\n\n        let file = e.target.files[0];\n\n        let reader = new FileReader();\n        reader.onload = function (e) {\n\n            let data = e.target.result;\n            let workBook = XLSX.read(data, { type: 'binary' });\n\n            const jsonData = []\n            for (let incr = 0; incr < workBook.SheetNames.length; incr++) {\n                const wsName = workBook.SheetNames[incr];\n                const ws = workBook.Sheets[wsName];\n                jsonData.push(XLSX.utils.sheet_to_json(ws)); //, status:'not imported'}\n            }\n            if (sheets === '1') {\n                setImportData(jsonData[0].map(x => ({...x, status:'not imported'})));\n            }\n            if (sheets === 'all'){\n                setImportData(jsonData);\n            }\n            setFileName(file.name);\n        };\n        reader.readAsBinaryString(file);\n    }\n\n    return (\n        <Form>\n            <Form.File\n                id=\"importData\"\n                custom\n            >\n                <Form.File.Label data-browse=\"Upload\">{fileName ? fileName : '  ...  '}</Form.File.Label>\n                <Form.File.Input onChange={(e) => readFileHandler(e)} />\n            </Form.File>\n        </Form>\n    )\n}\n\nexport default ImportExcelFile\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Image from 'react-bootstrap/Image';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\nimport { uploadConsultantWk, updateConsultantWk } from '../actions/consultantActions';\nimport Form from 'react-bootstrap/Form';\n\nconst FlowImportWKConsultants = (props) => {\n\n    const dispatch = useDispatch();\n\n    const [step, setStep] = useState(0);\n    //const [selectedFile, setSelectedFile] = useState(null);\n\n    const consultantUploadWk = useSelector(state => state.consultantUploadWk);\n    const { loading: loadingUpload, error: errorUpload, path } = consultantUploadWk;\n\n    const consultantUpdateWk = useSelector(state => state.consultantUpdateWk);\n    const { loading: loadingUpdate, error: errorUpdate, message } = consultantUpdateWk;\n\n    const onChangeHandler = (e) => {\n        //setSelectedFile(e.target.files[0]);\n        const data = new FormData();\n        data.append('file', e.target.files[0]);\n        dispatch(uploadConsultantWk(data));\n    }\n    /* const onClickHandler = () => {\n        const data = new FormData();\n        data.append('file', selectedFile);\n        dispatch(uploadConsultantWk(data));\n    } */\n    const startImportData = () => {\n        if (path) {\n            dispatch(updateConsultantWk(path));\n            //const data = updateConsultantWk(path, userInfo);\n            //setMessage(data);\n        }\n    }\n\n    return (\n        <Modal\n            {...props}\n            size=\"lg\"\n            aria-labelledby=\"contained-modal-title-vcenter\"\n            centered\n        //style={{'minHeight': '80vh'}}\n        >\n            <Modal.Header closeButton>\n                <Row className='align-items-center'>\n                    <Col className='text-center'>\n                        <Modal.Title id=\"contained-modal-title-vcenter\">\n                            Import consultants data from Wavekeeper\n                        </Modal.Title>\n                    </Col>\n                </Row>\n            </Modal.Header>\n\n            <Modal.Body>\n                <Row className='mb-3'>\n                    <Col><Button className={step >= 0 ? 'text-primary' : 'text-secondary'} onClick={() => setStep(0)} variant='ligth' disabled={step < 0}><strong>1-Guidelines</strong></Button></Col>\n                    <Col><Button className={step >= 1 ? 'text-primary' : 'text-secondary'} onClick={() => setStep(1)} variant='ligth' disabled={step < 1}><strong>2-Upload in App</strong></Button></Col>\n                    <Col><Button className={step >= 2 ? 'text-primary' : 'text-secondary'} onClick={() => setStep(2)} variant='ligth' disabled={step < 2}><strong>3-Start update</strong></Button></Col>\n                    <Col><Button className={step >= 3 ? 'text-primary' : 'text-secondary'} onClick={() => setStep(3)} variant='ligth' disabled={step < 3}><strong>4-Result</strong></Button></Col>\n                </Row>\n\n                <Row className='align-items-center'>\n\n                    <Col>\n                        {step === 0 && (\n                            <Row>\n                                <Col>\n                                    <h4>Process to export from Wavekeeper <a href=\"https://wavekeeper.wavestone-app.com/web#action=534&model=hr.presence&view_type=list&cids=1&menu_id=92\" target=\"_blank\" rel=\"noopener noreferrer\">(link)</a></h4>\n                                    <p>Please connect to Wavekeeper</p>\n                                    <ul>\n                                        <li>Step 1: Go to collaborators</li>\n                                        <li>Step 2: Apply filter to keep only current consultants</li>\n                                        <li>Step 3: Select all lines and go to actions / export</li>\n                                        <li>Step 4: Select filter 'JPR_export_2'</li>\n                                        <li>Step 5: Save the Excel file on you desktop</li>\n                                    </ul>\n                                    <Image src=\"/images/WK_export_consultants_application_filtres.jpg\" rounded fluid />\n                                </Col>\n                            </Row>\n                        )}\n                        {step === 1 && (\n                            <Row className='align-items-center'>\n                                <Col className='text-center'>\n                                    <h4>Upload your file here</h4>\n                                    {loadingUpload ? <Loader /> : (\n                                        <input \n                                            className='my-3' \n                                            type='file' \n                                            name='hr.presence' \n                                            onChange={onChangeHandler} \n                                        />\n                                    )}\n                                    {errorUpload && <Message variant='danger'>{errorUpload}</Message>}\n                                </Col>\n                            </Row>\n                        )}\n                        {step === 2 && (\n                            path ? (\n                                <Row>\n                                    <Col className='text-center'>\n                                        <h4>Do you want to update your consultants ?</h4>\n                                        {loadingUpdate ? <Loader /> : (\n                                            <Button variant='primary' className='m-3' onClick={startImportData}>\n                                                Update\n                                            </Button>\n                                        )}\n                                        <p>Process could take a few minute</p>\n                                        {errorUpdate && <Message variant='danger'>{errorUpdate}</Message>}\n                                    </Col>\n                                </Row>\n                            ) : (\n                                <Row><Col>Something wrong retry step 2</Col></Row>\n                            )\n                        )}\n                        {step === 3 && (\n                            <Form.Control\n                                as='textarea'\n                                rows={10}\n                                value={message && message}\n                                readOnly\n                            //plaintext\n                            />\n                        )}\n                    </Col>\n                </Row>\n\n\n            </Modal.Body>\n            <Modal.Footer>\n                {step === 3 && (\n                    <Button onClick={props.onHide}>Close</Button>\n                )}\n                {step < 3 && (\n                    <Button\n                        variant='success'\n                        onClick={() => (step + 1 <= 3) && setStep(step + 1)}\n                        disabled={step === 3 || (step === 1 && !path) || (step === 2 && !message)}\n                    >Next</Button>\n                )}\n            </Modal.Footer>\n        </Modal>\n    )\n}\n\nexport default FlowImportWKConsultants;\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteConsultant, getAllMyAdminConsultants, consultantImportInMass } from '../actions/consultantActions';\nimport { CONSULTANT_DELETE_RESET } from '../constants/consultantConstants';\nimport Table from 'react-bootstrap/Table'\nimport Button from 'react-bootstrap/Button';\nimport Loader from '../components/Loader';\nimport Meta from '../components/Meta';\nimport Message from '../components/Message';\nimport ImportExcelFile from '../components/ImportExcelFile';\nimport ReactExport from \"react-export-excel\";\nimport DropDownTitleContainer from '../components/DropDownTitleContainer';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Pagination from 'react-bootstrap/Pagination';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nimport FlowImportWKConsultants from '../components/FlowImportWKConsultants';\nimport DisplayChlidren from '../components/DisplayChildren';\n\nconst ExcelFile = ReactExport.ExcelFile;\nconst ExcelSheet = ReactExport.ExcelFile.ExcelSheet;\nconst ExcelColumn = ReactExport.ExcelFile.ExcelColumn;\n\nconst ManageConsultantScreen = ({ history, match }) => {\n\n    const dispatch = useDispatch();\n\n    const [pageSize, setPageSize] = useState(10000);\n    const [pageNumber, setPageNumber] = useState(1);\n    const [keyword, setKeyword] = useState('');\n\n    const [exportExcel, setExportExcel] = useState('');\n\n    const [importData, setImportData] = useState([]);\n\n    //const [selectedFile, setSelectedFile] = useState(null);\n    //const [message, setMessage] = useState('');\n\n    const [showImportConsultant, setShowImportConsultant] = useState(false);\n\n    const userLogin = useSelector(state => state.userLogin);\n    const { userInfo } = userLogin;\n\n    const consultantsMyAdminList = useSelector(state => state.consultantsMyAdminList);\n    const { loading, error, consultantsMyAdmin, pages, page, count } = consultantsMyAdminList;\n\n    const consultantDelete = useSelector(state => state.consultantDelete);\n    const { success: successConsultantDelete } = consultantDelete;\n\n    const consultantsMassImport = useSelector(state => state.consultantsMassImport);\n    const { loading:loadingMassImport, error:errorMassImport, success:successMassImport } = consultantsMassImport;\n\n    /* const consultantUploadWk = useSelector(state => state.consultantUploadWk);\n    const { loading:loadingUpload, error:errorUpload, path } = consultantUploadWk;\n\n    const consultantUpdateWk = useSelector(state => state.consultantUpdateWk);\n    const { loading:loadingUpdate, error:errorUpdate, message } = consultantUpdateWk; */\n\n\n    useEffect(() => {\n\n        if (userInfo) {\n            dispatch(getAllMyAdminConsultants(keyword, pageNumber, pageSize));\n        } else {\n            history.push('/login');\n        }\n\n    }, [dispatch, history, userInfo, pageNumber, pageSize, keyword, successMassImport]);\n\n    useEffect(() => {\n        if (consultantsMyAdmin) {\n            const exportExcelData = consultantsMyAdmin.map((consultant) => ({\n                'NAME': consultant.name,\n                'EMAIL': consultant.email,\n                'PRACTICE': consultant.practice,\n                'MATRICULE': consultant.matricule,\n                'VALUED': consultant.valued ? consultant.valued.substring(0,10) : '',\n                'ARRIVAL': consultant.arrival ? consultant.arrival.substring(0,10) : '',\n                'LEAVING': consultant.leaving ? consultant.leaving.substring(0,10) : '',\n                'PARTIAL_TIME': consultant.isPartialTime.value,\n                'GRADE': consultant.grade,\n                'IS_CDM': consultant.isCDM,\n                'CDM_MATRICULE': consultant.cdmId && consultant.cdmId.matricule,\n                'CDM_NAME': consultant.cdmId && consultant.cdmId.name,\n                'COMMENT': consultant.comment\n            }));\n            setExportExcel(exportExcelData);\n        }\n    },[consultantsMyAdmin])\n\n    useEffect(() => {\n        if (successConsultantDelete) {\n            dispatch(getAllMyAdminConsultants(keyword, pageNumber, pageSize));\n            dispatch({ type: CONSULTANT_DELETE_RESET });\n        }\n    // eslint-disable-next-line\n    }, [dispatch, successConsultantDelete]);\n\n\n    useEffect(() => {\n        if(importData.length > 0) {\n            dispatch(consultantImportInMass(importData));\n        }\n    },[dispatch, importData]);\n\n    const addConsultantHandler = () => {\n        history.push('/admin/consultant/add');\n    }\n\n    const onClickEditHandler = (consultantId) => {\n        history.push(`/editconsultant/${consultantId}`);\n    };\n\n    const onClickDeleteHandler = (consultant) => {\n        if (window.confirm(`Are you sure to delete user: ${consultant.name} ?`)) {\n            dispatch(deleteConsultant(consultant._id));\n        }\n    }\n\n    return (\n        <>\n            <Meta />\n            {errorMassImport && <Message variant='danger'>{errorMassImport}</Message>}\n\n            <FlowImportWKConsultants \n                show={showImportConsultant}\n                onHide={() => setShowImportConsultant(false)}\n            />\n\n            <DisplayChlidren access='updateConsultantsFromWK'>\n                <Button variant='primary' onClick={() => setShowImportConsultant(true)}>Import WK</Button>\n            </DisplayChlidren>\n\n            <DropDownTitleContainer title='Manage consultants' close={false}>\n                <ListGroup.Item>\n                    \n                    \n                    <Row>\n\n                        <Col xs={6} md={2}>\n                            <Button \n                                className=\"mb-3\" \n                                onClick={() => addConsultantHandler()}\n                            ><i className=\"fas fa-user-edit mr-2\"></i>Add\n                            </Button>\n                        </Col>\n\n                        <Col xs={6} md={2}>\n                            <InputGroup>\n                                <FormControl\n                                    type='text'\n                                    className=\"mb-3\"\n                                    placeholder='Search name'\n                                    value={keyword && keyword}\n                                    onChange={(e) => setKeyword(e.target.value)}\n                                ></FormControl>\n                            </InputGroup>\n                        </Col>\n\n                        <Col xs={6} md={2}>\n                            <Form.Control\n                                plaintext\n                                readOnly\n                                value={count ? `${count} consultants found` : '0 consultant found'} />\n                        </Col>\n\n                        <Col xs={6} md={2}>\n                            {loadingMassImport ? (<Loader />) : (\n                                <ImportExcelFile setImportData={setImportData} />\n                            )}\n                        </Col>\n\n                        <Col xs={6} md={2}>\n                            {exportExcel && (\n                                <ExcelFile element={<Button variant='primary'><i className=\"fas fa-download\"></i>  Download</Button>}>\n                                    <ExcelSheet data={exportExcel} name=\"consultantsSheet\">\n                                        <ExcelColumn label=\"NAME\" value=\"NAME\" />\n                                        <ExcelColumn label=\"EMAIL\" value=\"EMAIL\" />\n                                        <ExcelColumn label=\"PRACTICE\" value=\"PRACTICE\" />\n                                        <ExcelColumn label=\"MATRICULE\" value=\"MATRICULE\" />\n                                        <ExcelColumn label=\"VALUED\" value=\"VALUED\" />\n                                        <ExcelColumn label=\"ARRIVAL\" value=\"ARRIVAL\" />\n                                        <ExcelColumn label=\"LEAVING\" value=\"LEAVING\" />\n                                        <ExcelColumn label=\"PARTIAL_TIME\" value=\"PARTIAL_TIME\" />\n                                        <ExcelColumn label=\"GRADE\" value=\"GRADE\" />\n                                        <ExcelColumn label=\"IS_CDM\" value=\"IS_CDM\" />\n                                        <ExcelColumn label=\"CDM_MATRICULE\" value=\"CDM_MATRICULE\" />\n                                        <ExcelColumn label=\"CDM_NAME\" value=\"CDM_NAME\" />\n                                        <ExcelColumn label=\"COMMENT\" value=\"COMMENT\" />\n                                    </ExcelSheet>\n                                </ExcelFile>\n                            )}\n                        </Col>\n\n                        <Col xs={6} md={2}>\n                            <InputGroup>\n                                <FormControl\n                                    as='select'\n                                    id='number-c'\n                                    className=\"mb-3\"\n                                    value={pageSize && pageSize}\n                                    onChange={(e) => setPageSize(e.target.value)}\n                                >\n                                    {[5, 10, 15, 20, 50, 10000].map(x => (\n                                        <option\n                                            key={x}\n                                            value={x}\n                                        >{x === 10000 ? 'All (export)' : `${x} / page`}</option>\n                                    ))}\n                                </FormControl>\n                            </InputGroup>\n                        </Col>\n\n                    </Row>\n\n                    {consultantsMyAdmin && consultantsMyAdmin.length === 0 ? <Message variant='information'>You have not access to these information</Message> :\n                        loading ? <Loader /> : error ? <Message variant=\"danger\">{error}</Message> : (\n\n\n                            <Table responsive hover striped>\n                                <thead>\n                                    <tr className='table-primary'>\n                                        <th className='align-middle text-light'>Consultant name</th>\n                                        <th className='align-middle text-light'>Matricule</th>\n                                        <th className='align-middle text-light'>Practice</th>\n                                        <th className='align-middle text-light'>Valued</th>\n                                        <th className='align-middle text-light'>Arrival</th>\n                                        <th className='align-middle text-light'>Leaving</th>\n                                        <th className='align-middle text-light'>Seniority</th>\n                                        <th className='align-middle text-light'></th>\n                                        <th className='align-middle text-light'></th>\n                                    </tr>\n                                </thead>\n\n                                <tbody>\n                                    {consultantsMyAdmin && consultantsMyAdmin.map((consultant) => (\n                                        <tr key={consultant._id}>\n                                            <td className='align-middle'>{consultant.name}</td>\n                                            <td className='align-middle'>{consultant.matricule}</td>\n                                            <td className='align-middle'>{consultant.practice}</td>\n                                            <td className='align-middle'>{consultant.valued ? consultant.valued.substring(0, 10) : ''}</td>\n                                            <td className='align-middle'>{consultant.arrival ? consultant.arrival.substring(0, 10) : ''}</td>\n                                            <td className='align-middle'>{consultant.leaving ? consultant.leaving.substring(0, 10) : ''}</td>\n                                            <td className='align-middle'>{\n                                                consultant.valued ? ((new Date(Date.now()) - new Date(consultant.valued.substring(0, 10))) / (1000 * 3600 * 24 * 365.25)).toString().substring(0, 4) : 0\n                                            } years</td>\n                                            <td className='align-middle'>\n                                                <Button\n                                                    className='btn btn-primary p-1'\n                                                    onClick={() => onClickEditHandler(consultant._id)}\n                                                    size='sm'\n                                                ><i className=\"fas fa-user-edit\"></i>\n                                                </Button>\n                                            </td>\n                                            <td className='align-middle'>\n                                                <Button\n                                                    className='btn btn-danger p-1'\n                                                    onClick={() => onClickDeleteHandler(consultant)}\n                                                    size='sm'\n                                                ><i className=\"fas fa-user-times\"></i>\n                                                </Button>\n                                            </td>\n                                        </tr>\n                                    ))}\n                                </tbody>\n                            </Table>\n\n                        )}\n\n                    <Pagination>\n                        <Pagination.Prev\n                            onClick={() => setPageNumber(page - 1)}\n                            disabled={page === 1}\n                        />\n                        {[...Array(pages).keys()].map(x => (\n                            [0, 1, pages - 2, pages - 1].includes(x) ? (\n                                <Pagination.Item\n                                    key={x + 1}\n                                    active={x + 1 === page}\n                                    onClick={() => {\n                                        dispatch(getAllMyAdminConsultants(keyword, x + 1, pageSize));\n                                        setPageNumber(x + 1);\n                                    }}\n                                >{x + 1}</Pagination.Item>\n                            ) : (pages > 4 && x === 2) && (\n                                <Pagination.Ellipsis key={x + 1} />\n                            )\n\n                        ))}\n                        <Pagination.Next\n                            onClick={() => setPageNumber(page + 1)}\n                            disabled={page === pages}\n                        />\n                    </Pagination>\n                </ListGroup.Item>\n            </DropDownTitleContainer>\n        </>\n    )\n}\n\nexport default ManageConsultantScreen;\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Table from 'react-bootstrap/Table';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Pagination from 'react-bootstrap/Pagination';\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nimport DropDownTitleContainer from '../components/DropDownTitleContainer';\nimport Message from '../components/Message';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport { deleteUser, listUsers } from '../actions/userActions';\n\nconst ManageUsersScreen = ({ history }) => {\n\n    const dispatch = useDispatch();\n\n    const [pageSize, setPageSize] = useState(10);\n    const [pageNumber, setPageNumber] = useState(1);\n    const [keyword, setKeyword] = useState('');\n\n    const userLogin = useSelector(state => state.userLogin);\n    const { userInfo } = userLogin;\n\n    const userList = useSelector(state => state.userList);\n    const { users, pages, page, count } = userList;\n\n    const userDelete = useSelector(state => state.userDelete);\n    const { error, success } = userDelete;\n\n\n    useEffect(() => {\n\n        if (userInfo) {\n            dispatch(listUsers(userInfo.consultantProfil.practice, keyword, pageNumber, pageSize));\n        } else {\n            history.push('/login');\n        }\n\n    }, [dispatch, history, userInfo, success, keyword, pageNumber, pageSize]);\n\n\n    const onClickEditHandler = (userId) => {\n        history.push(`/admin/edituser/${userId}`);\n    };\n\n    const onClickDeleteHandler = (user) => {\n        console.log('delete user');\n        if (window.confirm(`Are you sure to delete user: ${user.name} ?`)) {\n            dispatch(deleteUser(user._id));\n        }\n    };\n\n    return (\n        <>\n            {error && (<Message variant='danger'>{error}</Message>)}\n\n            <DropDownTitleContainer title='Manage users' close={false}>\n                <ListGroup.Item>\n                    <Row>\n                        <Col xs={6} md={3}>\n                            <InputGroup>\n                                <FormControl\n                                    type='text'\n                                    className=\"mb-3\"\n                                    placeholder='Search name'\n                                    value={keyword && keyword}\n                                    onChange={(e) => setKeyword(e.target.value)}\n                                ></FormControl>\n                            </InputGroup>\n                        </Col>\n\n                        <Col xs={6} md={6}>\n                            <Form.Control\n                                plaintext\n                                readOnly\n                                value={count ? `${count} consultants found` : '0 consultant found'} />\n                        </Col>\n\n                        <Col xs={6} md={3}>\n                            <InputGroup>\n                                <FormControl\n                                    as='select'\n                                    id='number-c'\n                                    className=\"mb-3\"\n                                    value={pageSize && pageSize}\n                                    onChange={(e) => setPageSize(e.target.value)}\n                                >\n                                    {[5, 10, 15, 20, 50].map(x => (\n                                        <option\n                                            key={x}\n                                            value={x}\n                                        >{x} / page</option>\n                                    ))}\n                                </FormControl>\n                            </InputGroup>\n                        </Col>\n\n                    </Row>\n\n                    <Table responsive hover striped>\n                        <thead>\n                            <tr className='table-primary'>\n                                <th className='align-middle text-light'>User name</th>\n                                <th className='align-middle text-light'>Matricule</th>\n                                <th className='align-middle text-light text-center'>Practice</th>\n                                <th className='align-middle text-light text-center'>Created at</th>\n                                <th className='align-middle text-light text-center'>Status</th>\n                                <th className='align-middle text-light text-center'>User Profil</th>\n                                <th className='align-middle text-light'></th>\n                                <th className='align-middle text-light'></th>\n                            </tr>\n                        </thead>\n\n                        <tbody>\n                            {users && users.map((user) => (\n                                <tr key={user._id}>\n                                    <td className='align-middle'><b>{user.name && user.name}</b></td>\n                                    <td className='align-middle'>{user.consultantProfil && user.consultantProfil.matricule}</td>\n                                    <td className='align-middle text-center'>{user.consultantProfil && user.consultantProfil.practice}</td>\n                                    <td className='align-middle text-center'>{user.createdAt && user.createdAt.toString().substring(0, 10)}</td>\n                                    <td className='align-middle text-center'>\n                                        {\n                                            user.status && user.status === 'Waiting approval' ?\n                                                <i className=\"far fa-clock\" style={{ color: 'orange' }}></i>\n                                                : user.status === 'Validated' ?\n                                                    <i className=\"fas fa-check-circle\" style={{ color: 'green' }} ></i>\n                                                    : user.status === 'Refused' ?\n                                                        <i className=\"fas fa-times\" style={{ color: 'red' }}></i> : 'unknown'\n\n                                        }</td>\n                                    <td className='align-middle text-center'>{user.profil && user.profil.profil && user.profil.profil}</td>\n                                    <td className='align-middle'>\n                                        <Button\n                                            className='btn btn-primary p-1'\n                                            onClick={() => onClickEditHandler(user._id)}\n                                            size='sm'\n                                        ><i className=\"fas fa-user-edit\"></i>\n                                        </Button>\n                                    </td>\n                                    <td className='align-middle'>\n                                        <Button\n                                            className='btn btn-danger p-1'\n                                            onClick={() => onClickDeleteHandler(user)}\n                                            size='sm'\n                                        ><i className=\"fas fa-user-times\"></i>\n                                        </Button>\n                                    </td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </Table>\n\n                    <Pagination>\n                        <Pagination.Prev\n                            onClick={() => setPageNumber(page - 1)}\n                            disabled={page === 1}\n                        />\n                        {[...Array(pages).keys()].map(x => (\n                            [0, 1, pages - 2, pages - 1].includes(x) ? (\n                                <Pagination.Item\n                                    key={x + 1}\n                                    active={x + 1 === page}\n                                    onClick={() => {\n                                        dispatch(listUsers(userInfo.consultantProfil.practice, keyword, x + 1, pageSize));\n                                        setPageNumber(x + 1);\n                                    }}\n                                >{x + 1}</Pagination.Item>\n                            ) : (pages > 4 && x === 2) && (\n                                <Pagination.Ellipsis key={x + 1} />\n                            )\n                        ))}\n                        <Pagination.Next\n                            onClick={() => setPageNumber(page + 1)}\n                            disabled={page === pages}\n                        />\n                    </Pagination>\n                </ListGroup.Item>\n            </DropDownTitleContainer>\n        </>\n    )\n}\n\nexport default ManageUsersScreen;\n","import axios from 'axios';\nimport { \n    ACCESS_LIST_FAIL, \n    ACCESS_LIST_REQUEST, \n    ACCESS_LIST_SUCCESS, \n    ACCESS_UPDATE_FRONTACCESS_FAIL, \n    ACCESS_UPDATE_FRONTACCESS_REQUEST,\n    ACCESS_UPDATE_FRONTACCESS_SUCCESS\n} from '../constants/accessConstants';\n\nexport const getAllAccess = () => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: ACCESS_LIST_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        const { data } = await axios.get(`/api/access`, config);\n        dispatch({ type: ACCESS_LIST_SUCCESS, payload: data });\n\n    } catch (error) {\n        dispatch({\n            type: ACCESS_LIST_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\n\nexport const updateprofilFrontAcessRule = (rule) => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: ACCESS_UPDATE_FRONTACCESS_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n        const config = {\n            headers: {\n                'Content-type': 'Application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        const { data } = await axios.put(`/api/access`, rule, config);\n        dispatch({ type: ACCESS_UPDATE_FRONTACCESS_SUCCESS, payload: data });\n\n    } catch (error) {\n        dispatch({\n            type: ACCESS_UPDATE_FRONTACCESS_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport InputGroup from 'react-bootstrap/InputGroup'\n//import Alert from 'react-bootstrap/Alert';\nimport Message from '../components/Message';\nimport FormContainer from '../components/FormContainer';\nimport { getUserDetails, updateUser } from '../actions/userActions';\nimport { getAllMyAdminConsultants } from '../actions/consultantActions';\nimport { USER_STATUS, USER_UPDATE_RESET } from '../constants/userConstants';\nimport { getAllAccess } from '../actions/accessActions';\n\nconst UserEditScreen = ({ match, history }) => {\n\n    const userId = match.params.id;\n\n    const dispatch = useDispatch();\n    \n    const [name, setName] = useState('');\n    const [email, setEmail] = useState('');\n    const [linkConsultant, setLinkConsultant] = useState('');\n    const [profil, setProfil] = useState('');\n    const [status, setStatus] = useState('');\n    \n    //const [message, setMessage] = useState('');\n    \n    const userLogin = useSelector(state => state.userLogin);\n    const { userInfo } = userLogin;\n    \n    const userDetails = useSelector(state => state.userDetails);\n    const { error, loading, user } = userDetails;\n\n    const userUpdate = useSelector(state => state.userUpdate);\n    const { error: errorUpdate, success: successUpdate } = userUpdate;\n\n    const consultantsMyAdminList = useSelector(state => state.consultantsMyAdminList);\n    const { error:errorMyAdmin, consultantsMyAdmin } = consultantsMyAdminList;\n\n    const accessList = useSelector(state => state.accessList);\n    const { access } = accessList;\n\n    useEffect(() => {\n        if (!userInfo) {\n            history.push('/login');\n        }\n    }, [history, userInfo]);\n\n    useEffect(() => {\n\n        if (!loading && !error && (!user || user._id !== userId)) {\n            dispatch(getUserDetails(userId));\n        }\n\n    }, [dispatch, user, error, userId, loading]);\n\n    useEffect(() => {\n\n        if (user) {\n            setName(user.name);\n            setEmail(user.email);\n            setProfil(user.profil);\n            setStatus(user.status);\n            if (user.consultantProfil) {\n                setLinkConsultant(user.consultantProfil._id);\n            } else {\n                setLinkConsultant('');\n            }\n            //console.log(user.profil);\n        }\n\n    }, [user]);\n\n    /*\n    useEffect(() => {\n\n        if (error) {\n            setMessage({ message: error, type: 'danger' });\n        }\n        if (errorMyAdmin) {\n            setMessage({ message: errorMyAdmin, type: 'danger' });\n        }\n        if (errorUpdate) {\n            setMessage({ message: errorUpdate, type: 'danger' });\n        }\n        if (successUpdate) {\n            setMessage({ message: 'User profil updated', type: 'success' });\n            dispatch({type: USER_UPDATE_RESET});\n        }\n\n    }, [dispatch, error, errorMyAdmin, errorUpdate, successUpdate]);\n    */\n\n    useEffect(() => {\n\n        if (user && user._id === userId) {\n            dispatch(getAllMyAdminConsultants('','',10000));\n        }\n\n    }, [dispatch, user, userId]);\n\n    useEffect(() => {\n        if (!access) {\n            dispatch(getAllAccess());\n        }\n        //console.log(access)\n    },[dispatch, access]);\n\n    const updateProfilHandler = (profil) => {\n        const newProfil = access.filter(x => x.profil === profil)[0];\n        setProfil(newProfil);\n        //console.log('updateProfil');\n    }\n\n    const goBackHandler = () => {\n        history.go(-1);\n        dispatch({type: USER_UPDATE_RESET});\n    };\n\n    const submitHandler = (e) => {\n        e.preventDefault();\n\n        const updatedUser = {\n            ...user,\n            name: name,\n            email: email,\n            consultantProfil: linkConsultant,\n            profil: profil._id,\n            status: status\n        };\n        dispatch(updateUser(updatedUser));\n\n    };\n\n    return (\n        <>\n            {error && <Message variant='danger'>{error}</Message>}\n            {errorMyAdmin && <Message variant='danger'>{errorMyAdmin}</Message>}\n            {errorUpdate && <Message variant='danger'>{errorUpdate}</Message>}\n            {successUpdate && <Message variant='success'>User updated with success</Message>}\n\n            <Button className='mb-3' onClick={() => goBackHandler()}>\n                Go Back\n            </Button>\n\n            <FormContainer>\n                <Form onSubmit={submitHandler}>\n                    <Form.Group controlId='name'>\n                        <Form.Label><b>Name</b></Form.Label>\n                        <Form.Control\n                            type='name'\n                            placeholder='Enter Name'\n                            value={name && name}\n                            onChange={(e) => setName(e.target.value)}\n                            required\n                        ></Form.Control>\n                    </Form.Group>\n\n                    <Form.Group controlId='email'>\n                        <Form.Label><b>Email address</b></Form.Label>\n                        <Form.Control\n                            type='email'\n                            placeholder='Enter email'\n                            value={email && email}\n                            onChange={(e) => setEmail(e.target.value)}\n                            required\n                        ></Form.Control>\n                    </Form.Group>\n\n                    <Form.Group controlId='consultantProfil'>\n                        <Form.Label><b>Linked Consultant Profil</b></Form.Label>\n                        <InputGroup>\n                            <Form.Control\n                                as='select'\n                                placeholder='Enter consultant to link'\n                                value={linkConsultant && linkConsultant}\n                                onChange={(e) => setLinkConsultant(e.target.value)}\n                                required\n                            >\n                                {consultantsMyAdmin && consultantsMyAdmin.map(\n                                    x => (\n                                        <option\n                                            key={x._id}\n                                            value={x._id}\n                                        >{x.name}</option>\n                                    )\n                                )}\n                            </Form.Control>\n                            <InputGroup.Append>\n                                <Button onClick={() => history.push(`/editconsultant/${linkConsultant}`)}>Edit user</Button>\n                            </InputGroup.Append>\n                        </InputGroup>\n\n                    </Form.Group>\n\n                    <Form.Group controlId='user-profil'>\n                        <Form.Label><b>User profil</b></Form.Label>\n                        <Form.Control\n                            as='select'\n                            value={profil && profil.profil ? profil.profil : ''}\n                            onChange={(e) => updateProfilHandler(e.target.value)}\n                            required\n                        >\n                            <option value=''>--Select--</option>\n                            {access && access.map( x => (\n                                <option\n                                    key={x._id}\n                                    value={x.profil}\n                                >{x.profil}</option>\n                            ))}\n                        </Form.Control>\n                    </Form.Group>\n\n                    <Form.Group controlId='status'>\n                        <Form.Label><b>Account Status</b></Form.Label>\n                        <Form.Control\n                            as='select'\n                            placeholder='Select status for account'\n                            value={status && status}\n                            onChange={(e) => setStatus(e.target.value)}\n                            required\n                        >\n                            {USER_STATUS.map( x => (\n                                <option\n                                    key={x}\n                                    value={x}\n                                >{x}</option>\n                            ))}\n                        </Form.Control>\n                    </Form.Group>\n\n\n                    <Button type='submit' variant='primary'>\n                        Update\n                    </Button>\n\n\n                </Form>\n            </FormContainer>\n\n        </>\n    )\n};\n\nexport default UserEditScreen;\n","import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Form, Button, Row, Col } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux'; \nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\nimport FormContainer from '../components/FormContainer';\nimport { register } from '../actions/userActions'\n\nconst RegisterScreen = ({ location, history }) => {\n    const [name, setName] = useState('');\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [confirmPassword, setConfirmPassword] = useState('');\n\n    const [message, setMessage] = useState(null);\n\n    const dispatch = useDispatch();\n\n    const userRegister = useSelector(state => state.userRegister);\n    const { loading, error, userInfo } = userRegister;\n\n    const redirect = location.search ? location.search.split('=')[1] : '/';\n\n    useEffect(() => {\n        if(userInfo) {\n            history.push(redirect);\n            // If user is authenticate, there is no search and user is redirect to home page\n        }\n    }, [history, userInfo, redirect]);\n\n    const submitHandler = (e) => {\n        const form = e.currentTarget;\n        // Verification of validity of data\n        if (form.checkValidity() === false) {\n            setMessage('Please check your information');\n        } else {\n            e.preventDefault(); // to avoid page to refresh\n            // Dispatch Register\n            setMessage(null); // to reinitialize the message before testing\n            if (password !== confirmPassword) {\n                setMessage('Passwords do not match')\n            } else {\n                dispatch(register(name, email, password));\n            }\n        }\n    };\n\n    return (\n        <FormContainer>\n            <h1>Sign Up</h1>\n            {message && <Message variant='danger'>{message}</Message>}\n            {error && <Message variant='danger'>{error}</Message>}\n            {loading && <Loader />}\n            <Form onSubmit={submitHandler}>\n                <Form.Group controlId='name'>\n                    <Form.Label>Name</Form.Label>\n                    <Form.Control\n                        type='name'\n                        placeholder='Enter Name'\n                        value={name}\n                        onChange={(e) => setName(e.target.value)}\n                    ></Form.Control>\n                </Form.Group>\n                <Form.Group controlId='email'>\n                    <Form.Label>Email Adress</Form.Label>\n                    <Form.Control\n                        type='email'\n                        placeholder='Enter Email'\n                        value={email}\n                        onChange={(e) => setEmail(e.target.value)}\n                    ></Form.Control>\n                </Form.Group>\n                <Form.Group controlId='password'>\n                    <Form.Label>Password</Form.Label>\n                    <Form.Control\n                        type='password'\n                        placeholder='Enter password'\n                        value={password}\n                        onChange={(e) => setPassword(e.target.value)}\n                    ></Form.Control>\n                </Form.Group>\n                <Form.Group controlId='confirm-password'>\n                    <Form.Label>Confirm Password</Form.Label>\n                    <Form.Control\n                        type='password'\n                        placeholder='Confirm password'\n                        value={confirmPassword}\n                        onChange={(e) => setConfirmPassword(e.target.value)}\n                    ></Form.Control>\n                </Form.Group>\n\n                <Button type='submit' variat='primary'>\n                    Register\n                </Button>\n\n                <Row className='py-3'>\n                    <Col>\n                        Have an account ? \n                        <Link to={redirect ? \n                            `/login?reditect=${redirect}`\n                        : '/login'}>\n                            Login\n                        </Link>\n                    </Col>\n                </Row>\n            </Form>\n        </FormContainer>\n    );\n};\n\nexport default RegisterScreen;\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Modal from 'react-bootstrap/Modal';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nimport Button from 'react-bootstrap/Button';\nimport ViewStaffs from '../components/ViewStaffs';\nimport ViewOldStaffs from '../components/ViewOldStaffs';\nimport SkillsDetails from './SkillsDetails';\nimport DropDownTitleContainer from '../components/DropDownTitleContainer';\nimport { getConsultantCdm } from '../actions/consultantActions';\nimport DisplayChildren from '../components/DisplayChildren';\n\n\nconst StaffAConsultant = ({ history, onHide, show, consultant, loadingData={}, mode, addStaffHandler }) => {\n\n    const dispatch = useDispatch();\n\n    const [sdResponsability, setSdResponsability] = useState(loadingData.responsability ? loadingData.responsability : '');\n    const [sdPriority, setSdPriority] = useState(loadingData.priority ? loadingData.priority : '');\n    const [sdInformation, setSdInformation] = useState(loadingData.information ? loadingData.information : '');\n    //console.log('consultant', consultant)\n\n\n    const consultantGetCdm = useSelector(state => state.consultantGetCdm);\n    const { cdm } = consultantGetCdm;\n\n    useEffect(() => {\n        if(show) {\n            dispatch(getConsultantCdm(consultant._id))\n        }\n    }, [dispatch, consultant, show])\n\n    return (\n\n        <Modal\n            show={show}\n            size=\"lg\"\n            aria-labelledby=\"contained-modal-title-vcenter\"\n            centered\n            onHide={onHide}\n        >\n            <Modal.Header closeButton>\n                <Modal.Title id=\"contained-modal-title-vcenter\">\n                    {consultant.name ? consultant.name + ' - ' + consultant.grade + (cdm ? ' (' + cdm.name + ')' : '') : ''}\n                </Modal.Title>\n            </Modal.Header>\n\n            <Modal.Body>\n                {mode === 'staffing' && (\n                    <DisplayChildren access='editStaff'>\n                        <Row>\n                            <Col className='mt-3'>\n                                <label htmlFor='sd-responsability'><strong>Responsability *</strong></label>\n                                <InputGroup id='sd-responsability'>\n                                    <FormControl\n                                        as='select'\n                                        value={sdResponsability}\n                                        onChange={(e) => setSdResponsability(e.target.value)}\n                                    >\n                                        <option value=''>--Select--</option>\n                                        <option value={'Project director'}>Project director</option>\n                                        <option value={'Project manager'}>Project manager</option>\n                                        <option value={'Project leader'}>Project leader</option>\n                                        <option value={'X'}>X</option>\n                                        <option value={'Intern'}>Intern</option>\n\n                                    </FormControl>\n                                </InputGroup>\n                            </Col>\n\n                            <Col className='mt-3'>\n                                <label htmlFor='sd-priority'><strong>Priority *</strong></label>\n                                <InputGroup id='sd-priority'>\n                                    <FormControl\n                                        as='select'\n                                        value={sdPriority}\n                                        onChange={(e) => setSdPriority(e.target.value)}\n                                    >\n                                        <option value=''>--Select--</option>\n                                        <option value={'P1'}>P1</option>\n                                        <option value={'P2'}>P2</option>\n                                        <option value={'P3'}>P3</option>\n\n                                    </FormControl>\n                                </InputGroup>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col className='mt-3'>\n                                <label><strong>Comment</strong></label>\n                                <InputGroup id='sd-information'>\n                                    <FormControl\n                                        as='textarea'\n                                        rows={3}\n                                        value={sdInformation}\n                                        onChange={(e) => setSdInformation(e.target.value)}\n                                    ></FormControl>\n                                </InputGroup>\n                            </Col>\n                        </Row>\n                    </DisplayChildren>\n                )}\n\n                <DisplayChildren access='viewSkills'>\n                    <SkillsDetails\n                        consultantId={consultant._id}\n                        editable={false}\n                        close={(mode === 'consultation') ? false : true}\n                    />\n                </DisplayChildren>\n\n                <DisplayChildren access='viewStaffings'>\n                    <DropDownTitleContainer title='Others staffings' close={false}>\n                        <ViewStaffs\n                            history={history}\n                            consultantId={consultant._id}\n                            onNavigate={onHide}\n                        />\n                    </DropDownTitleContainer>\n                </DisplayChildren>\n\n                <DropDownTitleContainer title='Old staffings' close={true}>\n                    <ViewOldStaffs\n                        history={history}\n                        consultantId={consultant._id}\n                        onNavigate={onHide}\n                    />\n                </DropDownTitleContainer>\n                \n            </Modal.Body>\n\n            <Modal.Footer>\n                <Button onClick={onHide} variant='secondary'>Cancel</Button>\n                <DisplayChildren access='editStaff'>\n                    {mode === 'staffing' && (\n                        <Button\n                            onClick={() => {\n                                addStaffHandler(consultant, sdResponsability, sdPriority, sdInformation);\n                                onHide();\n                            }}\n                            variant='primary'\n                            disabled={!(sdResponsability !== '' && sdPriority !== '')}\n                        >Staff</Button>\n                    )}\n                </DisplayChildren>\n            </Modal.Footer>\n\n        </Modal>\n    )\n}\n\nexport default StaffAConsultant;\n","import React from 'react';\nimport Select from 'react-select';\n\nconst SelectInput = ({ options, value, setValue, disabled, multi }) => {\n\n    const handleChange = (e) => {\n        let valuesSelected = [];\n        if(multi) {\n            valuesSelected = e.map(x => ({id: x.value, value: x.label}));\n        } else {\n            valuesSelected = [{id: e.value, value: e.label}]\n        }\n        setValue(valuesSelected);\n    }\n\n    return (\n        <div>\n            <Select\n                closeMenuOnSelect={true}\n                placeholder='Select...'\n                value={value ? value : null}\n                isMulti={multi}\n                options={options ? options : []}\n                onChange={handleChange}\n                isDisabled={disabled}\n            />\n        </div>\n    )\n}\n\nexport default SelectInput;\n","import axios from 'axios';\nimport {\n    SKILL_LIST_REQUEST,\n    SKILL_LIST_SUCCESS,\n    SKILL_LIST_FAIL,\n    SKILL_DELETE_REQUEST,\n    SKILL_DELETE_FAIL,\n    SKILL_DELETE_SUCCESS,\n    SKILL_CREATE_REQUEST,\n    SKILL_CREATE_SUCCESS,\n    SKILL_CREATE_FAIL\n } from '../constants/skillsConstants';\n\nexport const getAllSkills = (category = '', name = '', pageNumber = '', pageSize = '15') => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: SKILL_LIST_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                'Content-type': 'Application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        const { data } = await axios.get(`/api/skills?category=${category}&name=${name}&pageNumber=${pageNumber}&pageSize=${pageSize}`, config);\n        dispatch({ type: SKILL_LIST_SUCCESS, payload: data });\n\n    } catch (error) {\n        dispatch({\n            type: SKILL_LIST_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\nexport const deleteSkill = (skillId) => async (dispatch, getState) => {\n    \n    // TO FINISH : if delete a skill, you need to delete on all consultant associated profils\n    \n    try {\n\n        dispatch({ type: SKILL_DELETE_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                'Content-type': 'Application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        await axios.delete(`/api/skills/${skillId}`, config);\n        dispatch({ type: SKILL_DELETE_SUCCESS });\n\n    } catch (error) {\n        dispatch({\n            type: SKILL_DELETE_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n}\n\nexport const createSkills = (skill) => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: SKILL_CREATE_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                'Content-type': 'Application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        const { data } = await axios.post('/api/skills', skill, config);\n        dispatch({ type: SKILL_CREATE_SUCCESS, payload: data });\n\n    } catch (error) {\n        dispatch({\n            type: SKILL_CREATE_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport { getAvailabilities } from '../actions/pxxActions';\nimport Loader from '../components/Loader';\nimport Message from '../components/Message';\nimport Form from 'react-bootstrap/Form';\nimport Card from 'react-bootstrap/Card';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\n//import Popover from 'react-bootstrap/Popover';\nimport Tooltip from 'react-bootstrap/Tooltip';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport StaffAConsultant from './StaffAConsultant';\nimport DisplayChildren from '../components/DisplayChildren';\n\nimport SelectInput from '../components/SelectInput';\nimport { getAllSkills } from '../actions/skillActions';\n\nconst ConsoDispo = ({ \n    //practice, \n    start, end, mode, addStaffHandler, history }) => {\n\n    const dispatch = useDispatch();\n\n    const [focus, setFocus] = useState('');\n    //const [searchSkills, setSearchSkills] = useState('');\n    const [searchExperienceStart, setSearchExperienceStart] = useState('');\n    const [searchExperienceEnd, setSearchExperienceEnd] = useState('');\n    const [practice, setPractice] = useState('');\n\n    const [searchSkillsList, setSearchSkillsList] = useState([]);\n\n    const [searchMode, setSearchMode] = useState('filterAvailable');\n\n    const [modalWindowShow, setModalWindowShow] = useState(false);\n    const [sdConsultant, setSdConsultant] = useState('');\n\n    const userLogin = useSelector(state => state.userLogin);\n    const { userInfo } = userLogin;\n\n    const pxxAvailabilities = useSelector(state => state.pxxAvailabilities);\n    const { loading: loadingAvailabilities, error: errorAvailabilities, availabilities } = pxxAvailabilities;\n\n    const skillList = useSelector(state => state.skillList);\n    const { skills } = skillList;\n\n    useEffect(() => {\n        if(userInfo) {\n            setPractice(userInfo.consultantProfil.practice);\n        }\n    }, [userInfo]);\n\n    useEffect(() => {\n        if (practice) {\n            dispatch(getAvailabilities(practice, start, end, searchSkillsList.map(skill => skill.value).join(';'), searchExperienceStart, searchExperienceEnd, searchMode));\n        }\n    }, [dispatch, practice, start, end, searchMode, searchSkillsList, searchExperienceStart, searchExperienceEnd]);\n\n    useEffect(() => {\n        dispatch(getAllSkills('','',1,10000));\n    },[dispatch]);\n\n    const removeFilterAction = () => {\n        setSearchSkillsList([]);\n        setSearchExperienceStart('');\n        setSearchExperienceEnd('');\n        //dispatch(getAvailabilities(practice, start, end, '', '', '', searchMode));\n    };\n\n    const handlerSkillsSubmit = (e) => {\n        e.preventDefault();\n        dispatch(getAvailabilities(practice, start, end, searchSkillsList.map(skill => skill.value).join(';'), searchExperienceStart, searchExperienceEnd, searchMode));\n    };\n\n    const moreConsultantDetails = (consultant) => {\n        setModalWindowShow(true);\n        setSdConsultant(consultant);\n    };\n\n    return (\n        <>\n            {modalWindowShow && (\n                <StaffAConsultant\n                    show={modalWindowShow}\n                    onHide={() => setModalWindowShow(false)}\n                    consultant={sdConsultant}\n                    mode={mode}\n                    addStaffHandler={addStaffHandler}\n                    history={history}\n                />\n            )}\n\n            <Row className='mt-5'>\n                <Col md={12}>\n                    <Form onSubmit={handlerSkillsSubmit}>\n\n                        <Form.Row className='align-items-center mb-3'>\n                            <Col md={1}>\n                                {( searchExperienceStart || searchExperienceEnd) ? (\n                                    <Button \n                                        variant='secondary'\n                                        onClick={removeFilterAction}\n                                        block\n                                    ><i className=\"fas fa-minus-circle\"></i></Button>\n                                ) : (\n                                    <Button \n                                        variant='primary'\n                                        disabled\n                                        block\n                                    ><i className=\"fas fa-keyboard\"></i></Button>\n                                )}\n                            </Col>\n\n                            <Col md={4}>\n                                <Form.Group controlId='skill-search' className='my-0'>\n                                    <SelectInput\n                                        options={skills ? skills.map(skill => ({ value: skill._id, label: skill.name })) : []}\n                                        value={searchSkillsList.length ? searchSkillsList.map(skill => ({ value: skill._id, label: skill.value })) : []}\n                                        setValue={setSearchSkillsList}\n                                        multi={true}\n                                        disabled={false}\n                                    />\n                                </Form.Group>\n                            </Col>\n\n                            <Col md={2}>\n                                <Form.Group controlId='experience-search-start' className='my-0'>\n                                    <Form.Control\n                                        type='number'\n                                        min={0}\n                                        step={0.5}\n                                        placeholder='From (year)'\n                                        value={searchExperienceStart && searchExperienceStart}\n                                        onChange={(e) => setSearchExperienceStart(e.target.value)}\n                                    ></Form.Control>\n                                </Form.Group>\n                            </Col>\n\n                            <Col md={2}>\n                                <Form.Group controlId='experience-search-end' className='my-0'>\n                                    <Form.Control\n                                        type='number'\n                                        step={0.5}\n                                        min={searchExperienceStart || 0}\n                                        placeholder='To (year)'\n                                        value={searchExperienceEnd && searchExperienceEnd}\n                                        onChange={(e) => setSearchExperienceEnd(e.target.value)}\n                                    ></Form.Control>\n                                </Form.Group>\n                            </Col>\n\n                            <Col md={2}>\n                                <Form.Group controlId='switch-only-available'  className='my-0'>\n                                    <Form.Check\n                                        type='switch'\n                                        id='switch-only-available'\n                                        label='Not available'\n                                        checked={searchMode === 'filterAvailable' ? false : true}\n                                        onChange={(e) => {e.target.checked === true ? setSearchMode('all') : setSearchMode('filterAvailable')}}\n                                    ></Form.Check>\n                                </Form.Group>\n\n                                <Form.Group controlId='switch-practices'  className='my-0'>\n                                    <Form.Check\n                                        type='switch'\n                                        id='switch-all-practices'\n                                        label='All practices'\n                                        checked={practice === 'all' ? true : false}\n                                        onChange={(e) => {e.target.checked === true ? setPractice('all') : setPractice(userInfo.consultantProfil.practice)}}\n                                    ></Form.Check>\n                                </Form.Group>\n\n                            </Col>\n\n                            <Col md={1}>\n                                <Button\n                                    type='submit'\n                                    variant='primary'\n                                    block\n                                >Search</Button>\n                            </Col>\n                        </Form.Row>\n                    </Form>\n\n                </Col>\n            </Row>\n\n            <Tabs defaultActiveKey=\"Analysts\" id=\"uncontrolled-tab-example\">\n                <Tab eventKey=\"Intern\" title=\"Intern\">\n                    <Row className='mt-3'>\n                        {loadingAvailabilities ? <Loader /> : errorAvailabilities ? <Message variant='danger'>{errorAvailabilities}</Message> : (\n                            availabilities && availabilities.map((x, xVal) => (\n                                <Col sm={12} md={4} key={xVal}>\n                                    <ConsoDispoUnit\n                                        monthData={x}\n                                        grades={['Intern']}\n                                        mode={mode}\n                                        //addStaff={addStaff}\n                                        addStaff={moreConsultantDetails}\n                                        focus={focus}\n                                        setFocus={setFocus}\n                                    />\n                                </Col>\n                            ))\n                        )}\n                    </Row>\n                </Tab>\n\n                <Tab eventKey=\"Analysts\" title=\"Analysts\">\n                    <Row className='mt-3'>\n                        {loadingAvailabilities ? <Loader /> : errorAvailabilities ? <Message variant='danger'>{errorAvailabilities}</Message> : (\n                            availabilities && availabilities.map((x, xVal) => (\n                                <Col key={xVal} sm={12} md={4}>\n                                    <ConsoDispoUnit\n                                        monthData={x}\n                                        grades={['Analyst']}\n                                        mode={mode}\n                                        //addStaff={addStaff}\n                                        addStaff={moreConsultantDetails}\n                                        focus={focus}\n                                        setFocus={setFocus}\n                                    />\n                                </Col>\n                            ))\n                        )}\n                    </Row>\n                </Tab>\n\n                <Tab eventKey=\"Consultants\" title=\"Consultants\">\n                    <Row className='mt-3'>\n                        {loadingAvailabilities ? <Loader /> : errorAvailabilities ? <Message variant='danger'>{errorAvailabilities}</Message> : (\n                            availabilities && availabilities.map((x, xVal) => (\n                                <Col key={xVal} sm={12} md={4}>\n                                    <ConsoDispoUnit\n                                        monthData={x}\n                                        grades={['Consultant']}\n                                        mode={mode}\n                                        //addStaff={addStaff}\n                                        addStaff={moreConsultantDetails}\n                                        focus={focus}\n                                        setFocus={setFocus}\n                                    />\n                                </Col>\n                            ))\n                        )}\n                    </Row>\n                </Tab>\n\n                <Tab eventKey=\"Senior consultants\" title=\"Senior consultants\">\n                    <Row className='mt-3'>\n                        {loadingAvailabilities ? <Loader /> : errorAvailabilities ? <Message variant='danger'>{errorAvailabilities}</Message> : (\n                            availabilities && availabilities.map((x, xVal) => (\n                                <Col key={xVal} sm={12} md={4}>\n                                    <ConsoDispoUnit\n                                        monthData={x}\n                                        grades={['Senior consultant']}\n                                        mode={mode}\n                                        //addStaff={addStaff}\n                                        addStaff={moreConsultantDetails}\n                                        focus={focus}\n                                        setFocus={setFocus}\n                                    />\n                                </Col>\n                            ))\n                        )}\n                    </Row>\n                </Tab>\n\n                <Tab eventKey=\"Managers\" title=\"Managers and +\">\n                    <Row className='mt-3'>\n                        {loadingAvailabilities ? <Loader /> : errorAvailabilities ? <Message variant='danger'>{errorAvailabilities}</Message> : (\n                            availabilities && availabilities.map((x, xVal) => (\n                                <Col key={xVal} sm={12} md={4}>\n                                    <ConsoDispoUnit\n                                        monthData={x}\n                                        grades={['Manager', 'Senior manager', 'Director', 'Partner']}\n                                        mode={mode}\n                                        //addStaff={addStaff}\n                                        addStaff={moreConsultantDetails}\n                                        focus={focus}\n                                        setFocus={setFocus}\n                                    />\n                                </Col>\n                            ))\n                        )}\n                    </Row>\n                </Tab>\n            </Tabs>\n        </>\n    )\n}\n\n\nconst ConsoDispoUnit = ({monthData, grades, mode, addStaff, focus, setFocus}) => {\n\n    //const userLogin = useSelector(state => state.userLogin);\n    //const { userInfo } = userLogin;\n\n    const userLogin = useSelector(state => state.userLogin);\n    const { userInfo } = userLogin;\n    \n    const formatName = (fullName) => {\n        const separateName = fullName.split(' ');\n        if (separateName.length === 1) {\n            return separateName[0];\n        } else {\n            const outName = separateName.map((word, indice1) => {\n                if (indice1 === 0) {\n                    return word[0].toUpperCase() + '.';\n                } else {\n                    return word.toUpperCase();\n                }\n            });\n            return outName.join(' ');\n        }\n    }\n\n    const calculateExperience = (date) => {\n\n        if (date) {\n            return ((Date.now() - new Date(date)) / (1000 * 24 * 3600 * 365.25)).toString().substring(0, 4)\n        } else {\n            return '-';\n        }\n    }\n\n    return (\n        <Card className='my-1 rounded' >\n            <Card.Header as=\"h5\">{monthData.month.firstDay.toString().substring(0, 7)}</Card.Header>\n            <Card.Body>\n                {monthData.availabilities.map((consultantData, yVal) => (\n                    grades.includes(consultantData.grade) && (\n                        <Row key={yVal} className='align-items-middle'>\n                            {(mode === 'staffing' || mode === 'consultation') && (\n                                <Col sm={1}>\n                                    <Button\n                                        size='sm'\n                                        variant='ligth'\n                                        className='mx-0 px-0'\n                                        onClick={() => addStaff(consultantData)}\n                                    ><i className=\"fas fa-search\"></i></Button>\n                                </Col>\n                            )}\n                            <Col sm={10}>\n\n\n                                <OverlayTrigger\n                                    overlay={\n                                        <Tooltip id=\"tooltip-disabled\">\n                                            <DisplayChildren access='viewComment'>\n                                                {userInfo && userInfo.consultantProfil._id !== consultantData._id ? (\n                                                    consultantData.comment ? consultantData.comment : 'No staffing comment'\n                                                ) : 'No access to this data'}\n                                            </DisplayChildren>\n                                        </Tooltip>\n                                    }>\n                                    <Form.Control\n                                        plaintext\n                                        readOnly\n                                        id={consultantData.email}\n                                        value={consultantData.availableDay.toString() + ' days : ' + formatName(consultantData.name) + ' (' + calculateExperience(consultantData.valued) + ' years)'}\n                                        style={(consultantData.email === focus) ? { background: '#464277', color: 'white' } : { color: 'black' }}\n                                        onFocus={(e) => {\n                                            setFocus(e.target.id)\n                                        }}\n                                    />\n                                </OverlayTrigger>\n\n                            </Col>\n                        </Row>\n                    )\n                ))}\n            </Card.Body>\n        </Card>\n    )\n}\n\n\nexport default ConsoDispo\n","import React, {useEffect, useState} from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport { Link } from 'react-router-dom';\nimport Card from 'react-bootstrap/Card';\nimport DisplayChildren from '../components/DisplayChildren';\nimport { createTaceData } from '../actions/taceActions';\n\n\nconst Tace = ({ tace, practice }) => {\n\n    const dispatch = useDispatch();\n\n    const [target, setTarget] = useState(tace.target);\n    const [bid, setBid] = useState(tace.bid);\n    const [editRequest, setEditRequest] = useState(false);\n    const [update, setUpdate] = useState(false);\n\n    const [missingFTEToBid, setMissingFTEToBid] = useState('');\n    const [missingFTEToTarget, setMissingFTEToTarget] = useState('');\n\n    const createTace = useSelector(state => state.createTace);\n    //const { success } = createTace;\n\n    useEffect(() => {\n        if(update) {\n            dispatch(createTaceData({\n                month:tace.month._id,\n                practice: practice,\n                target: target,\n                bid: bid,\n            }))\n            setUpdate(false);\n        }\n    }, [dispatch, createTace, update, practice, tace, target, bid]);\n\n    useEffect(() => {\n        \n        const prodDay = Number(tace.totalProdDay);\n        const totalProdDayToBid = Number(bid) / 100 * (Number(tace.totalProdDay) + Number(tace.totalNotProdDay) + Number(tace.totalAvailableDay));\n        const totalProdDayToTarget = Number(target) / 100 * (Number(tace.totalProdDay) + Number(tace.totalNotProdDay) + Number(tace.totalAvailableDay));\n    \n        //console.log('firstDay', tace.month.firstDay);\n        const today = new Date(Math.max(new Date(Date.now()), new Date(tace.month.firstDay)));\n        //console.log(today);\n        const lastMonthDay = new Date(Math.max(new Date(Date.now()), new Date(tace.month.firstDay)));\n        //console.log(lastMonthDay);\n        lastMonthDay.setUTCMonth(lastMonthDay.getUTCMonth() + 1);\n        lastMonthDay.setUTCDate(1);\n\n        const todayToEnd = (lastMonthDay - today) / (3600 * 24 * 1000);\n\n        if(bid) {\n            const missingFTEToBidCalculated = (prodDay - totalProdDayToBid) / todayToEnd;\n            setMissingFTEToBid(missingFTEToBidCalculated);\n        }\n        if(target){\n            const missingFTEToTargetCalculated = (prodDay - totalProdDayToTarget) / todayToEnd;\n            setMissingFTEToTarget(missingFTEToTargetCalculated);\n        }\n\n    },[tace, bid, target]);\n\n\n    return (\n\n        <Col sm={12} md={4}>\n            <Card className='my-3 p-3 rounded'>\n                <Card.Header as=\"h5\">{tace.month.firstDay.toString().substring(0, 7)}</Card.Header>\n                <Card.Body className='p-1 mt-3'>\n                    <Card.Text as='h4'>Tace <DisplayChildren access='editTace'><Button \n                                                size='sm' \n                                                variant='ligth'\n                                                onClick={() => {\n                                                    if(editRequest) {\n                                                        setUpdate(true)\n                                                    }\n                                                    setEditRequest(!editRequest)}\n                                                }\n                                                ><i className=\"fas fa-edit\"></i></Button></DisplayChildren>\n                    </Card.Text>\n\n                    <ListGroup>\n                        <ListGroup.Item className='py-1 bg-primary text-white'>\n                            <Row>\n                                <Col className='text-center' xs={4}><strong>Current</strong></Col>\n                                <Col className='text-center' xs={4}><strong>Target</strong></Col>\n                                <Col className='text-center' xs={4}><strong>Bid</strong></Col>\n                            </Row>\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n                            <Row className='align-items-center'>\n                                <Col className='text-center' xs={4}>{(Number(tace.totalTACE) * 100).toFixed(1)} %</Col>\n                                \n                                <Col className='text-center' xs={4}>\n                                    <Form.Group controlId='tace-target' className='mb-0'>\n                                        {editRequest ? (\n                                            <Form.Control\n                                                type='Number'\n                                                className='text-center'\n                                                min={0}\n                                                max={100}\n                                                step={0.1}\n                                                value={target}\n                                                onChange={(e) => setTarget(e.target.value)}\n                                            ></Form.Control>\n                                        ) : (\n                                                <Row className='align-items-center'>\n                                                    <Col className='m-0 p-0'>\n                                                        <Form.Control\n                                                            type='text'\n                                                            className='text-right'\n                                                            plaintext\n                                                            value={target}\n                                                            readOnly\n                                                        ></Form.Control>\n                                                    </Col>\n                                                    <Col className='m-0 p-0 text-left'>&nbsp;%</Col>\n                                                </Row>\n                                            )}\n                                    </Form.Group>\n                                </Col>\n\n                                <Col className='text-center' xs={4}>\n                                    <Form.Group controlId='title' className='mb-0'>\n                                        {editRequest ? (\n                                            <Form.Control\n                                                type='Number'\n                                                className='text-center'\n                                                min={0}\n                                                max={100}\n                                                step={0.1}\n                                                value={bid}\n                                                onChange={(e) => setBid(e.target.value)}\n                                            ></Form.Control>\n                                        ) : (\n                                                <Row className='align-items-center'>\n                                                    <Col className='m-0 p-0'>\n                                                        <Form.Control\n                                                            type='text'\n                                                            className='text-right'\n                                                            plaintext\n                                                            value={bid}\n                                                            readOnly\n                                                        ></Form.Control>\n                                                    </Col>\n                                                    <Col className='m-0 p-0 text-left'>&nbsp;%</Col>\n                                                </Row>\n                                            )}\n                                    </Form.Group>\n                                </Col>\n                            </Row>\n                        </ListGroup.Item>\n                        <ListGroup.Item>\n                            <Row>\n                                <Col xs={4}>&Delta; FTE</Col>\n                                <Col xs={4} className='text-center'>{missingFTEToTarget && missingFTEToTarget.toFixed(2)}</Col>\n                                <Col xs={4} className='text-center'>{missingFTEToBid && missingFTEToBid.toFixed(2)}</Col>\n                            </Row>\n                        </ListGroup.Item>\n                    </ListGroup>\n\n                    <ListGroup className='mt-3'>\n                        <ListGroup.Item className='py-1 bg-primary text-white'>\n                            <Row>\n                                <Col><strong>Leaving</strong></Col>\n                            </Row>\n                        </ListGroup.Item>\n                        <ListGroup.Item>\n                            <Row>\n                                <Col className='text-right'>{(Number(tace.totalLeaving) * 100).toFixed(2)} %</Col>\n                            </Row>\n                        </ListGroup.Item>\n                    </ListGroup>\n\n                    <ListGroup className='mt-3'>\n                        <ListGroup.Item className='py-1 bg-primary text-white'>\n                            <Row>\n                                <Col><strong>FTE</strong></Col>\n                            </Row>\n                        </ListGroup.Item>\n                        <ListGroup.Item>\n                            <Row>\n                                <Col className='text-right'>{tace.totalETP && tace.totalETP.toFixed(2)}</Col>\n                            </Row>\n                        </ListGroup.Item>\n                    </ListGroup>  \n                </Card.Body>\n                <Card.Footer className='mt-3'>\n                    <DisplayChildren access='tace'>\n                        <Link to={`/pxxdetails/${tace.month._id}`}>View details</Link>\n                    </DisplayChildren>\n                </Card.Footer>\n            </Card>\n        </Col>\n\n    )\n}\n\nexport default Tace;\n","import axios from 'axios';\nimport { \n    TACE_CREATE_FAIL,\n    TACE_CREATE_REQUEST, \n    TACE_CREATE_SUCCESS, \n} from '../constants/taceConstants';\n\nexport const createTaceData = (taceData) => async(dispatch, getState) => {\n\n    try {\n        dispatch({\n            type: TACE_CREATE_REQUEST,\n        });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers:{\n                'Content-type': 'Application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        const { data } = await axios.post('/api/tace', taceData, config);\n\n        dispatch({\n            type: TACE_CREATE_SUCCESS,\n            payload: data\n        });\n\n    } catch (error) {\n        dispatch({\n            type: TACE_CREATE_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nimport { getTace } from '../actions/pxxActions';\nimport Loader from '../components/Loader';\nimport Message from '../components/Message';\nimport Meta from '../components/Meta';\nimport ConsoDispo from '../components/ConsoDispo';\nimport Tace from '../components/Tace';\nimport DropDownTitleContainer from '../components/DropDownTitleContainer'\nimport DisplayChildren from '../components/DisplayChildren';\n\nconst DashboardScreen = ({ history }) => {\n\n    const dispatch = useDispatch();\n\n    // initialization of default constants\n    const duration = 3;\n    let startDefault = new Date(Date.now());\n    startDefault.setUTCDate(1);\n    startDefault.setUTCMonth(startDefault.getUTCMonth());\n    startDefault = startDefault.toISOString().substring(0, 10);\n\n    let endDefault = new Date(Date.now());\n    endDefault.setUTCDate(1);\n    endDefault.setUTCMonth(endDefault.getUTCMonth() + duration - 1);\n    endDefault = endDefault.toISOString().substring(0, 10);\n\n    const [start, setStart] = useState(startDefault);\n    const [end, setEnd] = useState(endDefault);\n\n    const userLogin = useSelector(state => state.userLogin);\n    const { userInfo } = userLogin;\n\n    const pxxTACE = useSelector(state => state.pxxTACE);\n    const { loading: loadingTACE, error: errorTACE, tace } = pxxTACE;\n\n    useEffect(() => {\n\n        if (!userInfo) {\n            history.push('/login');\n        } \n    }, [history, userInfo]);\n\n    useEffect(() => {\n        if (userInfo && !loadingTACE) {\n            dispatch(getTace(userInfo.consultantProfil.practice, start, end));\n        }\n        // eslint-disable-next-line\n    }, [ dispatch, start, end ]);\n    \n    const navigationMonthHandler = (val) => {\n        const startDate = new Date(start);\n        const endDate = new Date(end);\n        startDate.setUTCMonth(startDate.getUTCMonth() + val);\n        endDate.setUTCMonth(endDate.getUTCMonth() + val);\n\n        setStart(startDate.toISOString().substring(0, 10));\n        setEnd(endDate.toISOString().substring(0, 10));\n    }\n\n    return (\n        <>\n            <Meta />\n\n            <Row>\n\n                <Col className=\"text-center\" xs={2}>\n                    <Button\n                        variant='primary'\n                        size='sm'\n                        onClick={() => navigationMonthHandler(-1)}\n                    ><i className=\"fas fa-caret-left\"></i>\n                    </Button>\n                </Col>\n\n                <Col>\n                    <InputGroup>\n                        <FormControl\n                            type='text'\n                            id='start-date'\n                            className='form-control-lg mb-3 text-right'\n                            plaintext\n                            value={start && `From: ${start.substring(0, 7).replace('-', '/')}`}\n                            readOnly\n                        ></FormControl>\n                    </InputGroup>\n                </Col>\n\n                <Col>\n                    <InputGroup>\n                        <FormControl\n                            type='text'\n                            id='date-end'\n                            className='form-control-lg mb-3 text-left'\n                            plaintext\n                            value={end && `To: ${end.substring(0, 7).replace('-', '/')}`}\n                            readOnly\n                        ></FormControl>\n                    </InputGroup>\n                </Col>\n\n                <Col className=\"text-center\" xs={2}>\n                    <Button\n                        variant='primary'\n                        size='sm'\n                        onClick={() => navigationMonthHandler(1)}\n                    ><i className=\"fas fa-caret-right\"></i>\n                    </Button>\n                </Col>\n            </Row>\n            \n            <DisplayChildren access={'tace'}>\n                <DropDownTitleContainer title='TACE' close={false}>\n                    <Row className='mt-3'>\n                        <Col>\n                            <h4>TACE ({userInfo && userInfo.consultantProfil.practice})</h4>\n                        </Col>\n                    </Row>\n\n                    <Row className='mt-1'>\n                        {loadingTACE ? <Loader /> : errorTACE ? <Message variant='danger'>{errorTACE}</Message> : (\n                            tace && tace.map((x, val) => (\n                                <Tace key={val} tace={x} practice={userInfo && userInfo.consultantProfil.practice} />\n                            ))\n                        )}\n                    </Row>\n                </DropDownTitleContainer>\n            </DisplayChildren>\n\n            <DisplayChildren access={'consoDispo'}>\n                <DropDownTitleContainer title='Availabilities' close={true}>\n                    <Row>\n                        <Col>\n                            <ConsoDispo\n                                //practice={practice}\n                                start={start}\n                                end={end}\n                                mode='consultation'\n                                history={history}\n                            />\n                        </Col>\n                    </Row>\n                </DropDownTitleContainer>\n            </DisplayChildren>\n        </>\n    )\n}\n\nexport default DashboardScreen;\n","import axios from 'axios';\nimport { \n    CLIENT_ALL_FAIL, \n    CLIENT_ALL_REQUEST, \n    CLIENT_ALL_SUCCESS, \n    CLIENT_CREATE_FAIL, \n    CLIENT_CREATE_REQUEST,\n    CLIENT_CREATE_SUCCESS,\n    CLIENT_DELETE_FAIL,\n    CLIENT_DELETE_REQUEST,\n    CLIENT_DELETE_SUCCESS,\n    CLIENT_UPDATE_FAIL,\n    CLIENT_UPDATE_REQUEST,\n    CLIENT_UPDATE_SUCCESS\n} from '../constants/clientConstants';\n\nexport const getAllClients = (name='', pageNumber='', pageSize='') => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: CLIENT_ALL_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        const { data } = await axios.get(`/api/clients?clientName=${name}&pageNumber=${pageNumber}&pageSize=${pageSize}`, config);\n        dispatch({ type: CLIENT_ALL_SUCCESS, payload: data });\n\n    } catch (error) {\n        dispatch({\n            type: CLIENT_ALL_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\nexport const createAClient = (clients) => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: CLIENT_CREATE_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                'Content-type': 'Application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        const { data } = await axios.post(`/api/clients`, clients, config);\n        dispatch({ type: CLIENT_CREATE_SUCCESS, payload: data });\n\n    } catch (error) {\n        dispatch({\n            type: CLIENT_CREATE_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\nexport const updateAClient = (clients) => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: CLIENT_UPDATE_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                'Content-type': 'Application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        const { data } = await axios.put(`/api/clients`, clients, config);\n        dispatch({ type: CLIENT_UPDATE_SUCCESS, payload: data });\n\n    } catch (error) {\n        dispatch({\n            type: CLIENT_UPDATE_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\nexport const deleteAClient = (clientsId) => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: CLIENT_DELETE_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        const { data } = await axios.delete(`/api/clients/${clientsId}`, config);\n        dispatch({ type: CLIENT_DELETE_SUCCESS, payload: data });\n\n    } catch (error) {\n        dispatch({\n            type: CLIENT_DELETE_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n//import Message from '../components/Message';\n//import Button from 'react-bootstrap/Button';\n//import SearchInput from '../components/SearchInput';\nimport { createAClient, getAllClients } from '../actions/clientActions';\n//import { CLIENT_CREATE_RESET } from '../constants/clientConstants';\n\nimport CreatableSelect from 'react-select/creatable';\n\nconst SelectCompany = ({ company, setCompany, editRequest }) => {\n\n    const dispatch = useDispatch();\n\n    const clientAll = useSelector(state => state.clientAll);\n    const { clients: companies } = clientAll;\n\n    const clientCreate = useSelector(state => state.clientCreate);\n    const { success } = clientCreate;\n\n    useEffect(() => {\n        //dispatch(getAllClients(searchCompany));\n        dispatch(getAllClients(''));\n    }, [dispatch, success]);\n\n    const handleChange = (e) => {\n        //console.log('e', e);\n        if (e) {\n            const currentCompaniesId = companies.map(x => x._id);\n            //console.log('currentCompaniesId', currentCompaniesId);\n            if (currentCompaniesId.includes(e.value)) {\n                setCompany(e.label);\n            } else {\n                //console.log('create a compay');\n                dispatch(createAClient([{name:e.label, commercialTeam:[]}]));\n                setCompany(e.label);\n            }\n        } else {\n            setCompany('');\n        }\n    }\n\n    return (\n        <Row className='align-items-end'>\n            <Col>\n                <CreatableSelect\n                    placeholder='Select a company'\n                    isClearable\n                    onChange={handleChange}\n                    value={(company && company.label !=='') ? company : null}\n                    options={companies && companies.map(company => ({ value: company._id, label: company.name }))}\n                    isDisabled={!editRequest}\n                />\n            </Col>\n        </Row>\n    )\n}\n\nexport default SelectCompany\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Popover from 'react-bootstrap/Popover';\nimport Loader from '../components/Loader';\nimport Message from '../components/Message';\nimport Meta from '../components/Meta';\nimport { createDeal, getDealToEdit, updateDeal } from '../actions/dealActions';\nimport { getAllLeaders, getAllPractice } from '../actions/consultantActions';\nimport { DEAL_CREATE_RESET, DEAL_PROBABILITY, DEAL_STATUS, DEAL_UPDATE_RESET, TYPE_BUSINESS } from '../constants/dealConstants';\nimport DropDownTitleContainer from '../components/DropDownTitleContainer';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport ConsoDispo from '../components/ConsoDispo';\nimport ViewStaffs from '../components/ViewStaffs';\n//import SearchInput from '../components/SearchInput';\nimport SelectCompany from '../components/SelectCompany';\nimport { REQUEST_STATUS } from '../constants/dealConstants';\nimport StaffAConsultant from '../components/StaffAConsultant';\nimport DisplayChildren from '../components/DisplayChildren';\nimport SelectInput from '../components/SelectInput';\n\nconst StaffingEditScreen = ({ match, history }) => {\n\n    const dispatch = useDispatch();\n\n    const userLogin = useSelector(state => state.userLogin);\n    const { userInfo } = userLogin;\n\n    const dealCreate = useSelector(state => state.dealCreate);\n    const { loading, error, success, createId } = dealCreate;\n\n    const dealUpdate = useSelector(state => state.dealUpdate);\n    const { loading: loadingUpdate, error: errorUpdate } = dealUpdate;\n\n    const dealEdit = useSelector(state => state.dealEdit);\n    const { success: successEdit, deal: dealToEdit } = dealEdit;\n\n    const consultantPracticeList = useSelector(state => state.consultantPracticeList);\n    const { practiceList } = consultantPracticeList;\n\n    const consultantsAllLeaders = useSelector(state => state.consultantsAllLeaders);\n    const { leaderslist } = consultantsAllLeaders;\n\n    const [title, setTitle] = useState('');\n    const [company, setCompany] = useState('');\n    const [client, setClient] = useState('');\n    const [type, setType] = useState('');\n    const [status, setStatus] = useState('');\n    const [probability, setProbability] = useState('');\n    const [description, setDescription] = useState('');\n    const [proposalDate, setProposalDate] = useState('');\n    const [presentationDate, setPresentationDate] = useState('');\n    const [startDate, setStartDate] = useState('');\n    const [mainPractice, setMainPractice] = useState('');\n    const [othersPractices, setOthersPractices] = useState([]);\n    const [location, setLocation] = useState('');\n    const [srInstruction, setSrInstruction] = useState('');\n    const [srStatus, setSrStatus] = useState('');\n    const [srRessources, setSrRessources] = useState([]);\n    const [comments, setComments] = useState([]);\n    const [duration, setDuration] = useState('');\n    const [othersContacts, setOthersContacts] = useState('');\n    \n    const [newComment, setNewComment] = useState('');\n    \n    const [sdInstructions] = useState('');\n    const [sdStatus, setSdStatus] = useState('');\n    const [sdStaff, setSdStaff] = useState([]);\n    \n    const [wonDate, setWonDate] = useState('');\n    \n    const [modalWindowShow, setModalWindowShow] = useState(false);\n    const [sdConsultant, setSdConsultant] = useState('');\n    const [loadingSdConsultantData, setLoadingSdConsultantData] = useState({})\n    \n    const [editRequest, setEditRequest] = useState(match.params.id ? false : true);\n    \n    const [dealChange, setDealChange] = useState(false);\n    \n    //const [searchLeader, setSearchLeader] = useState('');\n    const [leader, setLeader] = useState([]);\n    \n    //const [searchCoLeader, setSearchCoLeader] = useState('');\n    const [coLeaders, setCoLeaders] = useState([]);\n    \n\n    const [companyMessage, setCompanyMessage] = useState(null);\n\n    //ConsoDispo\n    const analyseTime = 3;\n    let startDefault = new Date(Date.now());\n    startDefault.setUTCDate(1);\n    startDefault.setUTCMonth(startDefault.getUTCMonth());\n    startDefault = startDefault.toISOString().substring(0, 10);\n\n    let endDefault = new Date(Date.now());\n    endDefault.setUTCDate(1);\n    endDefault.setUTCMonth(endDefault.getUTCMonth() + analyseTime - 1);\n    endDefault = endDefault.toISOString().substring(0, 10);\n\n    const [start] = useState(startDefault);\n    const [end] = useState(endDefault);\n\n    useEffect(() => {\n        if (!userInfo) {\n            history.push('/login');\n        }\n    }, [history, userInfo]);\n\n    useEffect(() => {\n        if (!practiceList) {\n            dispatch(getAllPractice());\n        }\n    }, [dispatch, practiceList]);\n\n    useEffect(() => {\n        if (match.params.id) {\n            dispatch(getDealToEdit(match.params.id));\n        }\n    }, [dispatch, match])\n\n\n    useEffect(() => { \n        //dispatch(getAllLeaders(searchLeader));\n        dispatch(getAllLeaders());\n        \n    },[dispatch])\n\n    /* useEffect(() => {\n\n        dispatch(getAllLeaders(searchCoLeader));\n\n    }, [dispatch, searchCoLeader]) */\n\n\n    useEffect(() => {\n        if (match.params.id && successEdit) {\n            setTitle(dealToEdit.title);\n            setCompany(dealToEdit.company);\n            setClient(dealToEdit.client);\n            setStatus(dealToEdit.status);\n            setType(dealToEdit.type);\n            setProbability(dealToEdit.probability);\n            setDescription(dealToEdit.description);\n            setProposalDate(dealToEdit.proposalDate ? dealToEdit.proposalDate.substring(0, 10) : \"\");\n            setPresentationDate(dealToEdit.presentationDate ? dealToEdit.presentationDate.substring(0, 10) : \"\");\n            setStartDate(dealToEdit.startDate ? dealToEdit.startDate.substring(0, 10) : \"\");\n            setMainPractice(dealToEdit.mainPractice);\n            setOthersPractices(dealToEdit.othersPractices ? dealToEdit.othersPractices : []);\n            setLocation(dealToEdit.location);\n            setSrInstruction(dealToEdit.staffingRequest.instructions);\n            setSrStatus(dealToEdit.staffingRequest.requestStatus);\n            setSrRessources(dealToEdit.staffingRequest.ressources ? dealToEdit.staffingRequest.ressources : []);\n            setSdStatus(dealToEdit.staffingDecision.staffingStatus ? dealToEdit.staffingDecision.staffingStatus : '');\n            setSdStatus(dealToEdit.staffingDecision.instructions ? dealToEdit.staffingDecision.instructions : '');\n            setSdStaff(dealToEdit.staffingDecision.staff ? dealToEdit.staffingDecision.staff : []);\n            setLeader(dealToEdit.contacts.primary ? \n                [{id: dealToEdit.contacts.primary._id, value: dealToEdit.contacts.primary.name}] : ['']);\n            setCoLeaders(dealToEdit.contacts.secondary ?\n                dealToEdit.contacts.secondary.map( coLeader => ({id: coLeader._id, value: coLeader.name})) : []);\n            setComments(dealToEdit.comments ? dealToEdit.comments : []);\n            setDuration(dealToEdit.duration ? dealToEdit.duration : '');\n            setOthersContacts(dealToEdit.othersContacts ? dealToEdit.othersContacts : '');\n        }\n    }, [successEdit, dealToEdit, userInfo, match])\n\n    useEffect(() => {\n        if (success) {\n            history.push(`/staffing/${createId}`);\n            dispatch({ type: DEAL_CREATE_RESET });\n        }\n    }, [dispatch, history, success, createId]);\n\n    useEffect(() => {\n        if (match.params.id && dealChange) {\n            if (!company) {\n                setCompanyMessage('Please select a company');\n                setEditRequest(true);\n                return\n            } else {\n                setCompanyMessage('')\n            }\n            const deal = {\n                company: company,\n                client: client,\n                title: title,\n                type: type,\n                status: status,\n                contacts: {\n                    primary: leader.length ? leader[0].id : null,\n                    secondary: coLeaders.length ? coLeaders.map( x => x.id) : [],\n                },\n                probability: probability,\n                description: description,\n                proposalDate: proposalDate,\n                presentationDate: presentationDate,\n                wonDate: wonDate,\n                startDate: startDate,\n                duration: duration,\n                mainPractice: mainPractice,\n                othersPractices: othersPractices,\n                location: location,\n                staffingRequest: {\n                    instructions: srInstruction,\n                    requestStatus: srStatus,\n                    ressources: srRessources\n                },\n                staffingDecision: {\n                    instructions: sdInstructions,\n                    staffingStatus: sdStatus,\n                    staff: sdStaff.map(staff => ({\n                        responsability: staff.responsability,\n                        idConsultant: staff.idConsultant._id,\n                        priority: staff.priority,\n                        information: staff.information\n                    }))\n                },\n                comments: comments,\n                othersContacts: othersContacts\n            }\n            dispatch(updateDeal(match.params.id, deal));\n            setDealChange(false);\n            setNewComment('');\n        }\n\n    }, [match, dispatch, userInfo, dealChange, company, type, client, title, status, probability, description, proposalDate, presentationDate,\n        wonDate, startDate, duration, mainPractice, othersPractices, location, srInstruction, srStatus, srRessources, sdInstructions,\n        sdStatus, sdStaff, leader, coLeaders, comments, othersContacts\n    ]);\n\n    const updateOthersPractices = () => {\n        const selectedList = [];\n        const selectBox = document.getElementById('others-practices');\n        for (let i = 0; i < selectBox.options.length; i++) {\n            if (selectBox.options[i].selected) {\n                selectedList.push(selectBox.options[i].value);\n            }\n        }\n        setOthersPractices(selectedList);\n    }\n\n    const removeStaffHandler = (id) => {\n        let tampon = new Array(...sdStaff);\n        tampon = tampon.filter(consultant => consultant.idConsultant._id !== id);\n        setSdStaff(tampon);\n        setDealChange(true);\n    }\n\n    const addStaffHandler = (consultant, responsability, priority, information) => {\n        \n        let tampon = new Array(...sdStaff);\n\n        // Rule if consultant already added in staff\n        if(sdStaff.map(x => x.idConsultant._id).includes(consultant._id)) {\n            tampon = tampon.filter(x => x.idConsultant._id !== consultant._id);            \n        }\n\n        tampon.push({\n            idConsultant: {\n                _id: consultant._id,\n                name: consultant.name,\n            },\n            responsability: responsability,\n            priority: priority,\n            information: information\n        });\n\n        //tampon.sort((a,b) => a.priority - b.priority)\n\n        setSdStaff(tampon);\n        setDealChange(true);\n    }\n\n    const prepareDeal = () => {\n        return {\n            company: company,\n            client: client,\n            title: title,\n            contacts: {\n                primary: leader.length ? leader[0].id : null,\n                secondary: coLeaders.length ? coLeaders.map( x => x.id) : [],\n            },\n            type: type,\n            status: status,\n            probability: probability,\n            description: description,\n            proposalDate: proposalDate,\n            presentationDate: presentationDate,\n            wonDate: wonDate,\n            startDate: startDate,\n            duration: duration,\n            mainPractice: mainPractice,\n            othersPractices: othersPractices,\n            location: location,\n            staffingRequest: {\n                instructions: srInstruction,\n                requestStatus: srStatus,\n                ressources: srRessources\n            },\n            staffingDecision: {\n                instructions: sdInstructions,\n                staffingStatus: sdStatus,\n                staff: sdStaff.map(staff => ({\n                    responsability: staff.responsability,\n                    idConsultant: staff.idConsultant._id,\n                    priority: staff.priority,\n                    information: staff.information\n                }))\n            },\n            comments: comments,\n            othersContacts: othersContacts\n        }\n    }\n\n    /*\n    const deleteCompanyHandler = () => {\n        setCompany('');\n        setDealChange(true);\n    }\n    */\n\n    const submitHandler = (e) => {\n        e.preventDefault();\n        if (!company) {\n            setCompanyMessage('Please select a company');\n            return;\n        } else {\n            setCompanyMessage(null)\n        }\n        const deal = prepareDeal();\n\n        if (match.params.id) {\n            dispatch(updateDeal(match.params.id, deal));\n        } else {\n            dispatch(createDeal(deal));\n        }\n    };\n\n    const addCommentHandler = () => {\n        const newComments = comments.slice();\n        newComments.push({\n            message: newComment,\n            sender:{\n                _id: userInfo._id,\n                name: userInfo.name\n            },\n            date: new Date(Date.now()).toISOString()\n        });\n        newComments.sort((a,b) => (Date.parse(b.date) - Date.parse(a.date)));\n        setComments(newComments);\n        setDealChange(true);\n    };\n\n    const deleteCommentHandler = (value) => {\n        let newComments = comments.slice();\n        newComments = newComments.filter(x => x.date !== value);\n        setComments(newComments);\n        setDealChange(true);\n    };\n\n    const formatName = (fullName) => {\n        const separateName = fullName.split(' ');\n        if (separateName.length === 1) {\n            return separateName[0];\n        } else {\n            const outName = separateName.map((word, indice1) => {\n                if (indice1 === 0) {\n                    return word[0].toUpperCase() + '.';\n                } else {\n                    return word.toUpperCase();\n                }\n            });\n            return outName.join(' ');\n        }\n    }\n\n    return (\n        <>\n            <Meta />\n            {modalWindowShow && (\n                <StaffAConsultant\n                    show={modalWindowShow}\n                    onHide={() => setModalWindowShow(false)}\n                    consultant={sdConsultant}\n                    loadingData={loadingSdConsultantData}\n                    mode='staffing'\n                    addStaffHandler={addStaffHandler}\n                    history={history}\n                />\n            )}\n\n            <h1>Staffing request</h1>\n            <Form onSubmit={submitHandler}>\n                <Row className='mt-3'>\n                    <Col xs={6} md={2}>\n                        {match.params.id && (\n                            <Button\n                                type='button'\n                                variant='primary'\n                                onClick={() => {\n                                    history.go(-1);\n                                    dispatch({type: DEAL_UPDATE_RESET})\n                                }}\n                                block\n                            >Go Back</Button>\n                        )}\n                    </Col>\n                    <Col xs={0} md={8}></Col>\n                    <Col xs={6} md={2}>\n                        {match.params.id && loadingUpdate && <Loader />}\n                    </Col>\n                </Row>\n\n                {error && (<Row><Col><Message variant='danger'>{error}</Message></Col></Row>)}\n\n                {match.params.id && (\n                    <Row className='mt-3 align-items-center'>\n                        <Col md={1}>\n                            <Button\n                                onClick={() => {\n                                    setEditRequest(!editRequest);\n                                    editRequest && setDealChange(true);\n                                }}\n                                variant='light'\n                            >{editRequest ? (<i className=\"far fa-check-circle\"></i>) : (<i className=\"far fa-edit\"></i>)}\n                            </Button>\n                        </Col>\n                        <Col className='text-left align-middle'>\n                            {editRequest && (<p> Please click to update</p>)}\n                            {errorUpdate && (<Message variant='danger'>{errorUpdate}</Message>)}\n                        </Col>\n                    </Row>\n                )}\n\n                <Row className='mt-2'>\n\n                    <Col xs={12} md={4}>\n\n                        <ListGroup.Item>\n                            <Form.Group controlId='title' className='mb-0'>\n                                <Form.Label as='h5'>Title {editRequest && '*'}</Form.Label>\n                                {editRequest ? (\n                                    <Form.Control\n                                        type='text'\n                                        placeholder='Staffing request object'\n                                        value={title ? title : ''}\n                                        onChange={(e) => setTitle(e.target.value)}\n                                        required\n                                    ></Form.Control>\n                                ) : (\n                                        <Form.Control\n                                            type='text'\n                                            plaintext\n                                            value={title ? title : ''}\n                                            readOnly\n                                        ></Form.Control>\n                                    )}\n                            </Form.Group>\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n\n                            <Form.Group controlId='select-company' className='mb-0'>\n                                <Form.Label as='h5'>Company</Form.Label>\n                                <SelectCompany\n                                    company={{ value: company, label: company }}\n                                    setCompany={setCompany}\n                                    editRequest={editRequest}\n                                />\n                            </Form.Group>\n\n                            {companyMessage && <Message variant='danger'>{companyMessage}</Message>}\n\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n                            <Form.Group controlId='client' className='mb-0'>\n                                <Form.Label as='h5'>Client</Form.Label>\n                                {editRequest ? (\n                                    <Form.Control\n                                        type='text'\n                                        placeholder='Client name'\n                                        value={client ? client : ''}\n                                        onChange={(e) => setClient(e.target.value)}\n                                    ></Form.Control>\n                                ) : (\n                                        <Form.Control\n                                            type='text'\n                                            plaintext\n                                            readOnly\n                                            value={client ? client : ''}\n                                        ></Form.Control>\n                                    )}\n                            </Form.Group>\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n                            <Form.Group controlId='type' className='mb-0'>\n                                <Form.Label as='h5'>Type of business {editRequest && '*'}</Form.Label>\n                                {editRequest ? (\n                                    <Form.Control\n                                        as='select'\n                                        value={type ? type : ''}\n                                        onChange={(e) => { setType(e.target.value) }}\n                                        required\n                                    >\n                                        <option value=''>--Select--</option>\n                                        {TYPE_BUSINESS.map(type => (\n                                            <option\n                                                key={type.name}\n                                                value={type.name}\n                                            >{type.name}</option>\n                                        ))}\n                                    </Form.Control>\n                                ) : (\n                                        <Form.Control\n                                            type='text'\n                                            plaintext\n                                            value={type ? type : ''}\n                                            readOnly\n                                        ></Form.Control>\n                                    )}\n                            </Form.Group>\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n                            <Form.Group controlId='status' className='mb-0'>\n                                <Form.Label as='h5'>Status {editRequest && '*'}</Form.Label>\n                                {editRequest ? (\n                                    <Form.Control\n                                        as='select'\n                                        value={status ? status : ''}\n                                        onChange={(e) => {\n                                            if (e.target.value === 'Won') {\n                                                setWonDate(new Date(Date.now()));\n                                            }\n                                            else {\n                                                setWonDate('');\n                                            }\n                                            setStatus(e.target.value);\n                                        }}\n                                        required\n                                    >\n                                        <option value=''>--Select--</option>\n                                        {DEAL_STATUS.map( status => (\n                                            <option\n                                                key={status.name}\n                                                value={status.name}\n                                            >{status.name}</option>\n                                        ))}\n                                    </Form.Control>\n                                ) : (\n                                        <Form.Control\n                                            type='text'\n                                            plaintext\n                                            readOnly\n                                            value={status ? status : ''}\n                                        ></Form.Control>\n                                    )}\n                            </Form.Group>\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n                            <Form.Group controlId='probability' className='mb-0'>\n                                <Form.Label as='h5'>Probability {editRequest && '*'}</Form.Label>\n                                {editRequest ? (\n                                    <Form.Control\n                                        as='select'\n                                        value={probability ? probability : ''}\n                                        onChange={(e) => setProbability(e.target.value)}\n                                        required\n                                    >\n                                        <option value=''>--Select--</option>\n                                        {DEAL_PROBABILITY.map( prob => (\n                                            <option \n                                                key={prob.name}\n                                                value={prob.name}\n                                            >{prob.name} %</option>\n                                        ))}\n                                    </Form.Control>\n                                ) : (\n                                        <Form.Control\n                                            type='text'\n                                            value={`${probability} %`}\n                                            plaintext\n                                            readOnly\n                                        ></Form.Control>\n                                    )}\n                            </Form.Group>\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n                            <Form.Group controlId='location' className='mb-0'>\n                                <Form.Label as='h5'>Location</Form.Label>\n                                {editRequest ? (\n                                    <Form.Control\n                                        type='text'\n                                        placeholder='Location'\n                                        value={location ? location : ''}\n                                        onChange={(e) => setLocation(e.target.value)}\n                                    ></Form.Control>\n                                ) : (\n                                        <Form.Control\n                                            type='text'\n                                            plaintext\n                                            readOnly\n                                            value={location ? location : ''}\n                                        ></Form.Control>\n                                    )}\n                            </Form.Group>\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n                            <Form.Group controlId='main-practice' className='mb-0'>\n                                <Form.Label as='h5'>Main Practice {editRequest && '*'}</Form.Label>\n                                {editRequest ? (\n                                    <Form.Control\n                                        as='select'\n                                        value={mainPractice ? mainPractice : ''}\n                                        onChange={(e) => setMainPractice(e.target.value)}\n                                        required\n                                    >\n                                        <option value=''>--Select--</option>\n                                        {practiceList && practiceList.map((practice, val) => (\n                                            <option\n                                                value={practice}\n                                                key={val}\n                                            >{practice}</option>\n                                        ))}\n                                    </Form.Control>\n                                ) : (\n                                        <Form.Control\n                                            type='text'\n                                            plaintext\n                                            readOnly\n                                            value={mainPractice ? mainPractice : ''}\n                                        ></Form.Control>\n                                    )}\n                            </Form.Group>\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n                            <Form.Group controlId='others-practices' className='mb-0'>\n                                <Form.Label as='h5'>Others Practices</Form.Label>\n                                {editRequest ? (\n                                    <Form.Control\n                                        as='select'\n                                        multiple\n                                        value={othersPractices ? othersPractices : []}\n                                        onChange={(e) => updateOthersPractices()}\n                                    >\n                                        {practiceList && practiceList.map((practice, val) => (\n                                            (practice !== mainPractice) && (\n                                                <option\n                                                    value={practice}\n                                                    key={val}\n                                                >{practice}</option>\n                                            )\n                                        ))}\n                                    </Form.Control>\n                                ) : (\n                                        <Form.Control\n                                            type='text'\n                                            value={othersPractices ? othersPractices.join(', ') : ''}\n                                            plaintext\n                                            readOnly\n                                        ></Form.Control>\n                                    )}\n                            </Form.Group>\n                        </ListGroup.Item>\n\n                    </Col>\n\n                    <Col xs={12} md={8}>\n\n                        <ListGroup.Item>\n                            <Row className='align-items-start'>\n                                <Col xs={12} md={4}>\n\n                                    <Form.Group controlId='select-leader' className='mb-0'>\n                                        <Form.Label as='h5'>Leader</Form.Label>\n                                        <SelectInput\n                                            options={leaderslist ? leaderslist.map(consultant => ({ value: consultant._id, label: consultant.name })) : []}\n                                            value={leader.length ? { value: leader[0].id, label: leader[0].value } : {}}\n                                            setValue={setLeader}\n                                            multi={false}\n                                            disabled={!editRequest}\n                                        />\n                                    </Form.Group>\n                                    \n                                </Col>\n                            \n                                <Col xs={12} md={4}>\n                                    \n                                    <Form.Group controlId='others' className='mb-0'>\n                                        <Form.Label as='h5'>Co-Leader(s)</Form.Label>\n                                        <SelectInput\n                                            options={leaderslist ? leaderslist.map(consultant => ({ value: consultant._id, label: consultant.name })) : []}\n                                            value={coLeaders ? coLeaders.map(x => ({ value: x.id, label: x.value })) : []}\n                                            setValue={setCoLeaders}\n                                            multi={true}\n                                            disabled={!editRequest}\n                                        />\n                                    </Form.Group>\n                                </Col>\n\n                                <Col xs={12} md={4}>\n                                    <Form.Group controlId='others' className='mb-0'>\n                                        <Form.Label as='h5'>Others contacts</Form.Label>\n                                        {editRequest ? (\n                                            <Form.Control\n                                                type='text'\n                                                placeholder='email1@mail.com;email2@mail.com'\n                                                value={othersContacts ? othersContacts : ''}\n                                                onChange={(e) => setOthersContacts(e.target.value)}\n                                            ></Form.Control>\n                                        ) : (\n                                                <Form.Control\n                                                    type='text'\n                                                    value={othersContacts ? othersContacts : ''}\n                                                    plaintext\n                                                    readOnly\n                                                ></Form.Control>\n                                            )}\n                                    </Form.Group>\n                                </Col>\n\n                            </Row>\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n                            <Form.Group controlId='description' className='mb-0'>\n                                <Form.Label as='h5'>Description {editRequest && '*'}</Form.Label>\n                                {editRequest ? (\n                                    <Form.Control\n                                        as='textarea'\n                                        rows={3}\n                                        placeholder='Deal description'\n                                        value={description ? description : ''}\n                                        onChange={(e) => setDescription(e.target.value)}\n                                        required\n                                    ></Form.Control>\n                                ) : (\n                                        <Form.Control\n                                            type='text'\n                                            value={description ? description : ''}\n                                            plaintext\n                                            readOnly\n                                        ></Form.Control>\n                                    )}\n                            </Form.Group>\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n                            <h5>Sheduling</h5>\n                            <Row className='align-items-end'>\n                                <Col>\n                                    <Form.Group controlId='proposal-date' className='mb-0'>\n                                        <Form.Label>Proposal</Form.Label>\n                                        {editRequest ? (\n                                            <Form.Control\n                                                type='date'\n                                                placeholder='Deal date'\n                                                value={proposalDate ? proposalDate : ''}\n                                                onChange={(e) => setProposalDate(e.target.value)}\n                                            ></Form.Control>\n                                        ) : (\n                                                <Form.Control\n                                                    type='date'\n                                                    value={proposalDate ? proposalDate : ''}\n                                                    plaintext\n                                                    readOnly\n                                                ></Form.Control>\n                                            )}\n                                    </Form.Group>\n                                </Col>\n\n                                <Col>\n                                    <Form.Group controlId='presentation-date' className='mb-0'>\n                                        <Form.Label>Presentation</Form.Label>\n                                        {editRequest ? (\n                                            <Form.Control\n                                                type='date'\n                                                placeholder='Presentation date'\n                                                value={presentationDate ? presentationDate : ''}\n                                                onChange={(e) => setPresentationDate(e.target.value)}\n                                            ></Form.Control>\n                                        ) : (\n                                                <Form.Control\n                                                    type='date'\n                                                    value={presentationDate ? presentationDate : ''}\n                                                    plaintext\n                                                    readOnly\n                                                ></Form.Control>\n                                            )}\n                                    </Form.Group>\n                                </Col>\n\n                                <Col>\n                                    <Form.Group controlId='start-date' className='mb-0'>\n                                        <Form.Label>Start {editRequest && '*'}</Form.Label>\n                                        {editRequest ? (\n                                            <Form.Control\n                                                type='date'\n                                                placeholder='Start date'\n                                                value={startDate ? startDate : ''}\n                                                onChange={(e) => setStartDate(e.target.value)}\n                                                required\n                                            ></Form.Control>\n                                        ) : (\n                                                <Form.Control\n                                                    type='date'\n                                                    value={startDate ? startDate : ''}\n                                                    plaintext\n                                                    readOnly\n                                                ></Form.Control>\n                                            )}\n                                    </Form.Group>\n                                </Col>\n\n                                <Col>\n                                    <Form.Group controlId='duration' className='mb-0'>\n                                        <Form.Label>Duration (month) {editRequest && '*'}</Form.Label>\n                                        {editRequest ? (\n                                            <Form.Control\n                                                type='number'\n                                                placeholder='Duration'\n                                                min={0}\n                                                step={0.5}\n                                                value={duration ? duration : 0}\n                                                onChange={(e) => setDuration(e.target.value)}\n                                                required\n                                            ></Form.Control>\n                                        ) : (\n                                                <Form.Control\n                                                    type='number'\n                                                    value={duration ? duration : 0}\n                                                    plaintext\n                                                    readOnly\n                                                ></Form.Control>\n                                            )}\n                                    </Form.Group>\n                                </Col>\n                            </Row>\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n                            <Row>\n                                <Col xs={12} md={8}>\n                                    <Form.Group controlId='sr-instruction' className='mb-0'>\n                                        <Form.Label as='h5'>Staffing instruction {editRequest && '*'}</Form.Label>\n                                        {editRequest ? (\n                                            <Form.Control\n                                                as='textarea'\n                                                rows={3}\n                                                placeholder='Staffing instruction'\n                                                value={srInstruction ? srInstruction : ''}\n                                                onChange={(e) => setSrInstruction(e.target.value)}\n                                                required\n                                            ></Form.Control>\n                                        ) : (\n                                                <Form.Control\n                                                    type='text'\n                                                    value={srInstruction ? srInstruction : ''}\n                                                    plaintext\n                                                    readOnly\n                                                ></Form.Control>\n                                            )}\n                                    </Form.Group>\n                                </Col>\n\n                                <Col xs={12} md={4}>\n                                    <Form.Group controlId='sr-status' className='mb-0'>\n                                        <Form.Label as='h5'>Status {editRequest && '*'}</Form.Label>\n                                        <Form.Control\n                                            as='select'\n                                            value={srStatus ? srStatus : ''}\n                                            onChange={(e) => {\n                                                setSrStatus(e.target.value)\n                                                setDealChange(true);\n                                            }}\n                                            required\n                                        >\n                                            <option value=''>--Select--</option>\n                                            {REQUEST_STATUS.map(({name}) => (\n                                                <option\n                                                    key={name}\n                                                    value={name}\n                                                >{name}</option>\n                                            ))}\n\n                                        </Form.Control>\n                                    </Form.Group>\n                                </Col>\n                            </Row>\n                        </ListGroup.Item>\n\n                        {match.params.id && (\n                            <ListGroup.Item>\n                                <h5>Staffing decision</h5>\n                                {sdStaff && [...new Set(sdStaff.map(x => x.priority))].sort().map(priority => (\n                                    <ListGroup.Item key={priority}>\n                                        <Row key={priority}>\n                                            <Col sm={1}>\n                                                <Row className='my-1'><Col>{priority}</Col></Row>\n                                            </Col>\n                                            <Col sm={11}>\n                                                {sdStaff.filter(x => x.priority === priority).map(staff => (\n                                                    <Row key={staff.idConsultant._id} className='my-1'>\n                                                        <Col sm={10}>\n                                                            <OverlayTrigger\n                                                                placement=\"top\"\n                                                                trigger='click'\n                                                                overlay={\n                                                                    <Popover \n                                                                        id='popover-others-staffs' \n                                                                        style={{ 'maxWidth': '40%' }}\n                                                                    >\n                                                                        <Popover.Title id=\"contained-modal-title-vcenter\">\n                                                                            Others staffs\n                                                                        </Popover.Title>\n\n                                                                        <Popover.Content>\n                                                                            <ViewStaffs\n                                                                                history={history}\n                                                                                consultantId={staff.idConsultant._id}\n                                                                                onNavigate={() => ('')}\n                                                                                displayedDeal={match.params.id}\n                                                                            />\n                                                                        </Popover.Content>\n                                                                    </Popover>\n                                                                }\n                                                            >\n                                                                <div><strong>{`${staff.responsability}: `}</strong>{`${formatName(staff.idConsultant.name)}`}<i>{` (${staff.information})`}</i></div>\n                                                            </OverlayTrigger>\n                                                        </Col>\n                                                        <Col sm={2} className='px-0'>\n                                                            <DisplayChildren access='editStaff'>\n                                                                <Button\n                                                                    onClick={() => {\n                                                                        setSdConsultant(staff.idConsultant)\n                                                                        setLoadingSdConsultantData({\n                                                                            information: staff.information,\n                                                                            priority: staff.priority,\n                                                                            responsability: staff.responsability\n                                                                        })\n                                                                        setModalWindowShow(true)\n                                                                    }}\n                                                                    variant='secondary'\n                                                                    className='text-center mx-1'\n                                                                    size='sm'\n                                                                ><i className=\"fas fa-edit\"></i></Button>\n                                                            </DisplayChildren>\n                                                            <DisplayChildren access='editStaff'>\n                                                                <Button\n                                                                    onClick={() => removeStaffHandler(staff.idConsultant._id)}\n                                                                    variant='danger'\n                                                                    className='text-center mx-1'\n                                                                    size='sm'\n                                                                ><i className=\"fas fa-times\"></i></Button>\n                                                            </DisplayChildren>\n                                                        </Col>\n                                                    </Row>\n                                                ))}\n                                            </Col>\n                                        </Row>\n                                    </ListGroup.Item>\n                                ))}\n                            </ListGroup.Item>   \n                        )}\n                        \n                        {!match.params.id && (\n                            <Row className='mt-3'>\n                                <Col className='text-right'>\n                                    <Button\n                                        type='submit'\n                                        variant='primary'\n                                    >{(loading) ? <Loader /> : 'Submit staffing'}\n                                    </Button>\n                                </Col>\n                            </Row>\n                        )}\n\n                        {dealToEdit && match.params.id && (\n                            <ListGroup.Item>\n                                <Row className='my-1'>\n                                    <Col>\n                                        <strong>Last update at: </strong>{dealToEdit.updatedAt.substring(0, 19).replace('T', ' ')}\n                                        \n                                            \n                                                    <Row className='align-items-center my-3'>\n                                                        <Col xs={11} >\n                                                            <Form.Group controlId='comment' className='mb-0'>\n                                                                <Form.Control\n                                                                    type='text'\n                                                                    placeholder='Add a comment'\n                                                                    value={newComment ? newComment : ''}\n                                                                    onChange={(e) => setNewComment(e.target.value)}\n                                                                    onKeyUp={(e) => (e.key === 'Enter') && addCommentHandler()}\n                                                                ></Form.Control>\n                                                            </Form.Group>\n                                                        </Col>\n                                                        <Col xs={1}>\n                                                            <Button\n                                                                variant='primary'\n                                                                onClick={() => addCommentHandler()}\n                                                                size='sm'\n                                                            ><i className=\"fas fa-plus\"></i></Button>\n                                                        </Col>\n                                                    </Row>\n\n                                            <ListGroup className='my-3'>\n                                            {comments && comments.map( (comment, index) => (\n                                                <ListGroup.Item\n                                                    key={index}\n                                                    className='mb-0'\n                                                >\n                                                    \n                                                    <p>\n                                                        {comment.message}\n                                                    </p>\n                                                    <p style={{textAlign: 'right', marginBottom: '0'}}><i>By {comment.sender.name} the {comment.date.substring(0,19).replace('T', ' at ')}  {comment.sender._id === userInfo._id && (\n                                                            <Button\n                                                                size='sm'\n                                                                variant='ligth'\n                                                                style={{color:'red'}}\n                                                                onClick={() => deleteCommentHandler(comment.date)}\n                                                            >--delete--</Button>\n                                                    )}</i></p>\n                                                </ListGroup.Item>\n                                            ))}\n                                            </ListGroup>\n                                        <strong>Created at: </strong>{dealToEdit.createdAt.substring(0, 19).replace('T', ' ')} <br />\n                                    </Col>\n                                </Row>\n                            </ListGroup.Item>\n                        )}\n\n                    </Col>\n                </Row>\n            </Form>\n\n            {match.params.id && (\n                <DropDownTitleContainer title='Availabilities' close={false}>\n                    <ConsoDispo\n                        start={start}\n                        end={end}\n                        mode='staffing'\n                        addStaffHandler={addStaffHandler}\n                        history={history}\n                    />\n                </DropDownTitleContainer>\n            )}\n        </>\n    )\n}\n\nexport default StaffingEditScreen;","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Table from 'react-bootstrap/Table'\nimport Button from 'react-bootstrap/Button';\nimport Loader from '../components/Loader';\nimport Message from '../components/Message';\nimport DropDownTitleContainer from '../components/DropDownTitleContainer';\nimport Pagination from 'react-bootstrap/Pagination';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nimport { createSkills, deleteSkill, getAllSkills } from '../actions/skillActions';\nimport { getAllConsultantSkills } from '../actions/consultantActions';\n\nconst ManageSkillsScreen = ({ history }) => {\n\n    const dispatch = useDispatch();\n\n    // pagination configuration\n\n    const [pageSize, setPageSize] = useState(10);\n    const [pageNumber, setPageNumber] = useState(1);\n    const category = ''; // to implement if you want to search on specific category\n    const [name, setName] = useState('');\n\n    // local states to add a category\n    const [skillCategoryList, setSkillCategoryList] = useState([]);\n    const [skillCategory, setSkillCategory] = useState('default');\n    const [skillName, setSkillName] = useState('');\n    const [skillDescription, setSkillDescription] = useState('');\n\n    const userLogin = useSelector(state => state.userLogin);\n    const { userInfo } = userLogin;\n\n    const skillList = useSelector(state => state.skillList);\n    const { loading, skills, pages, page, count } = skillList;\n\n    const skillDelete = useSelector(state => state.skillDelete);\n    const { error, success } = skillDelete;\n\n    const skillCreate = useSelector(state => state.skillCreate);\n    const { loading: loadingCreateSkill, error: errorCreateSkill, success: successCreateSkill } = skillCreate;\n\n    const consultantAllSkills = useSelector(state => state.consultantAllSkills);\n    const { loading: loadingSkills, skills: skillsList } = consultantAllSkills;\n\n    useEffect(() => {\n        if (!userInfo || !['admin', 'coordinator'].includes(userInfo.profil.profil)) {\n            history.push('/login');\n        } else {\n            dispatch(getAllSkills(category, name, pageNumber, pageSize));\n        }\n    }, [dispatch, history, userInfo, category, name, pageNumber, pageSize]);\n\n    useEffect(() => {\n        if (success) {\n            dispatch(getAllSkills(category, name, pageNumber, pageSize));\n        }\n    // eslint-disable-next-line\n    }, [dispatch, success]);\n\n    useEffect(() => {\n        if (successCreateSkill) {\n            dispatch(getAllSkills(category, name, pageNumber, pageSize));\n        }\n    // eslint-disable-next-line\n    }, [dispatch, successCreateSkill]);\n\n    useEffect(() => {\n        if (!skillsList) {\n            if (!loadingSkills) {\n                dispatch(getAllConsultantSkills());\n            }\n        } else {\n            let categoryList = skillsList.map(x => x.category);\n            categoryList = [...new Set(categoryList)];\n            setSkillCategoryList(categoryList);\n        }\n    }, [dispatch, skillsList, loadingSkills]);\n\n\n    const handlerAddSkill = (e) => {\n        e.preventDefault();\n        const skillToCreate = {\n            category: skillCategory,\n            name: skillName,\n            description: skillDescription\n        };\n        dispatch(createSkills(skillToCreate));\n    };\n\n    const onClickDeleteHandler = (skill) => {\n        if (window.confirm(`Are you sure to delete skill: ${skill.name} ?`)) {\n            dispatch(deleteSkill(skill._id));\n        }\n    }\n\n    return (\n        <>\n            <DropDownTitleContainer title='Create Skills' close={true}>\n                <ListGroup.Item>\n                <Row className='mt-3'>\n                    <Col>\n                        <Form onSubmit={handlerAddSkill}>\n                            <Form.Row>\n                                <Col md={3}>\n                                    <Form.Group controlId='skillCategory'>\n                                        <Form.Control\n                                            as='select'\n                                            value={skillCategory ? skillCategory : 'default'}\n                                            onChange={(e) => setSkillCategory(e.target.value)}\n                                            required\n                                        >\n                                            <option value='default'>Please Select</option>\n                                            {skillCategoryList && (\n                                                skillCategoryList.map((x, val) => (\n                                                    <option\n                                                        value={x}\n                                                        key={val}\n                                                        onChange={(e) => { setSkillCategory(e.target.value) }}\n                                                    >{x}</option>\n                                                )))}\n\n\n                                        </Form.Control>\n                                    </Form.Group>\n                                </Col>\n                                <Col md={3}>\n                                    <Form.Group controlId='name-skill'>\n                                        <Form.Control\n                                            type='text'\n                                            placeholder='Skill'\n                                            value={skillName && skillName}\n                                            onChange={(e) => setSkillName(e.target.value)}\n                                            disabled={skillCategory === 'default'}\n                                            required\n                                        ></Form.Control>\n                                    </Form.Group>\n                                </Col>\n                                <Col md={4}>\n                                    <Form.Group controlId='description-skill'>\n                                        <Form.Control\n                                            type='text'\n                                            placeholder='Skill description'\n                                            value={skillDescription && skillDescription}\n                                            onChange={(e) => setSkillDescription(e.target.value)}\n                                            disabled={skillCategory === 'default'}\n                                            required\n                                        ></Form.Control>\n                                    </Form.Group>\n                                </Col>\n\n                                <Col className='text-right'>\n                                    <Button type='submit' variant='primary' block>\n                                        {loadingCreateSkill ? <Loader /> : 'Add'}\n                                    </Button>\n                                </Col>\n                            </Form.Row>\n                            {errorCreateSkill && <Message variant='danger'>{errorCreateSkill}</Message>}\n                        </Form>\n\n                    </Col>\n                </Row>\n                </ListGroup.Item>\n            </DropDownTitleContainer>\n            \n            <DropDownTitleContainer title='Search Skills' close={false}>\n                <ListGroup.Item>\n                <Row className='mt-3'>\n\n                    <Col xs={6} md={2}>\n                        <InputGroup>\n                            <FormControl\n                                type='text'\n                                className=\"mb-3\"\n                                placeholder='Search skill'\n                                value={name && name}\n                                onChange={(e) => setName(e.target.value)}\n                            ></FormControl>\n                        </InputGroup>\n                    </Col>\n\n                    <Col xs={6} md={8}>\n                        <Form.Control\n                            plaintext\n                            readOnly\n                            value={count ? `${count} skills found` : '0 skills found'} />\n                    </Col>\n\n                    <Col xs={6} md={2}>\n                        <InputGroup>\n                            <FormControl\n                                as='select'\n                                id='number-c'\n                                className=\"mb-3\"\n                                value={pageSize && pageSize}\n                                onChange={(e) => setPageSize(e.target.value)}\n                            >\n                                {[5, 10, 15, 20, 50].map(x => (\n                                    <option\n                                        key={x}\n                                        value={x}\n                                    >{x} / page</option>\n                                ))}\n                            </FormControl>\n                        </InputGroup>\n                    </Col>\n\n                </Row>\n\n                {skills && skills.length === 0 ? <Message variant='information'>You have not access to these information</Message> :\n                    loading ? <Loader /> : error ? <Message variant=\"danger\">{error}</Message> : (\n\n\n                        <Table responsive hover striped>\n                            <thead>\n                                <tr className='table-primary'>\n                                    <th className='align-middle text-light'>Category</th>\n                                    <th className='align-middle text-light'>Skill</th>\n                                    <th className='align-middle text-light'>Description</th>\n                                    <th className='align-middle text-light'></th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                {skills && skills.map((skill) => (\n                                    <tr key={skill._id}>\n                                        <td className='align-middle'>{skill.category}</td>\n                                        <td className='align-middle'>{skill.name}</td>\n                                        <td className='align-middle'>{skill.description}</td>\n                                        <td className='align-middle'>\n                                            <Button \n                                                variant='danger' \n                                                onClick={() => onClickDeleteHandler(skill)}\n                                                size='sm'\n                                            ><i className=\"fas fa-times\"></i>\n                                            </Button>\n                                        </td>\n                                    </tr>\n                                ))}\n                            </tbody>\n                        </Table>\n\n                    )}\n\n                <Pagination>\n                    <Pagination.Prev\n                        onClick={() => setPageNumber(page - 1)}\n                        disabled={page === 1}\n                    />\n                    {[...Array(pages).keys()].map(x => (\n                        [0, 1, pages - 2, pages - 1].includes(x) ? (\n                        <Pagination.Item\n                            key={x + 1}\n                            active={x + 1 === page}\n                            onClick={() => {\n                                dispatch(getAllSkills(category, name, x + 1, pageSize));\n                                setPageNumber(x + 1);\n                            }}\n                        >{x + 1}</Pagination.Item>\n                        ) : (pages > 4 && x === 2) && (\n                            <Pagination.Ellipsis key={x + 1} />\n                        )\n                    ))}\n                    <Pagination.Next\n                        onClick={() => setPageNumber(page + 1)}\n                        disabled={page === pages}\n                    />\n                </Pagination>\n                </ListGroup.Item>\n            </DropDownTitleContainer>\n        </>\n    )\n}\n\nexport default ManageSkillsScreen\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n//import Image from 'react-bootstrap/Image';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\n//import { uploadConsultantWk, updateConsultantWk } from '../actions/consultantActions';\nimport Form from 'react-bootstrap/Form';\nimport { pxxUploadFiles, updatePxxFiles } from '../actions/pxxActions';\n\nconst FlowImportPxx = (props) => {\n\n    const dispatch = useDispatch();\n\n    const [step, setStep] = useState(0);\n\n    const pxxUploadFile = useSelector(state => state.pxxUploadFile);\n    const { loading:loadingUpload, error:errorUpload, path } = pxxUploadFile;\n\n    const updatePxx = useSelector(state => state.updatePxx);\n    const { loading: loadingUpdate, error: errorUpdate, message } = updatePxx;\n\n    const onChangeHandler = (e) => {\n        //const data = new FormData();\n        const files = [];\n        for (let incr = 0; incr < e.target.files.length; incr++) {\n            const file = e.target.files[incr];\n            if(file.name.match(/^p[A-Za-z]+-[0-9]{2}.xlsb|^p[A-Za-z]+-arrivees.xlsb/)) {\n                const data = new FormData();\n                data.append('file', file);\n                files.push(data);\n            }\n        }\n        dispatch(pxxUploadFiles(files));\n    }\n\n    const startImportData = () => {\n        if(path) {\n            //dispatch(updatePxxFiles(path));\n            dispatch(updatePxxFiles(path));\n        }\n    }\n\n    return (\n        <Modal\n            {...props}\n            size=\"lg\"\n            aria-labelledby=\"contained-modal-title-vcenter\"\n            centered\n            //style={{'minHeight': '80vh'}}\n        >\n            <Modal.Header closeButton>\n                <Row className='align-items-center'>\n                    <Col className='text-center'>\n                        <Modal.Title id=\"contained-modal-title-vcenter\">\n                            Import Pxx from Pxx directory\n                        </Modal.Title>\n                    </Col>\n                </Row>\n            </Modal.Header>\n            \n            <Modal.Body>\n                <Row className='mb-3'>\n                    <Col><Button className={step >= 0 ? 'text-primary' : 'text-secondary'} onClick={() => setStep(0)} variant='ligth' disabled={step <0}><strong>1-Guidelines</strong></Button></Col>\n                    <Col><Button className={step >= 1 ? 'text-primary' : 'text-secondary'} onClick={() => setStep(1)} variant='ligth' disabled={step <1}><strong>2-Upload in App</strong></Button></Col>\n                    <Col><Button className={step >= 2 ? 'text-primary' : 'text-secondary'} onClick={() => setStep(2)} variant='ligth' disabled={step <2}><strong>3-Start update</strong></Button></Col>\n                    <Col><Button className={step >= 3 ? 'text-primary' : 'text-secondary'} onClick={() => setStep(3)} variant='ligth' disabled={step <3}><strong>4-Result</strong></Button></Col>\n                </Row>\n                \n                <Row className='align-items-center'>\n                    \n                    <Col>\n                    {step === 0 && (\n                        <Row>\n                            <Col>\n                                <h4>Process to upload pxx and update availabilities</h4>\n                                    <p>In the next steps you will be invit to</p>\n                                    <ul>\n                                            <li>Select your Pxx storage directory</li>\n                                            <li>Wait untill all Pxx files are uploaded</li>\n                                            <li>Start the backend calculation to update availabilities</li>\n                                            <li>Check the results and if asked proceed to corrections</li>\n                                        </ul>  \n                            </Col>\n                        </Row>\n                    )}\n                    {step === 1 && (\n                        <Row className='align-items-center'>\n                            <Col className='text-center'>\n                                <h4>Upload your file here</h4>\n                                {loadingUpload ? <Loader /> : (\n                                    <input \n                                        className='my-3' \n                                        type='file' \n                                        name='file' \n                                        onChange={onChangeHandler} \n                                        webkitdirectory='true'\n                                        directory='true'\n                                        multiple\n                                    />\n                                )}\n                                {errorUpload && <Message variant='danger'>{errorUpload}</Message>}\n                            </Col>\n                        </Row>\n                    )}\n                    {step === 2 && (\n                        path ? (\n                            <Row>\n                                <Col className='text-center'>\n                                    <h4>Do you want to update availabilities ?</h4>\n                                    {loadingUpdate ? <Loader />  : (\n                                        <Button variant='primary' className='m-3' onClick={startImportData}>\n                                            Update\n                                        </Button>\n                                    )}\n                                    <p>Process could take a few minute</p>\n                                    {errorUpdate && <Message variant='danger'>{errorUpdate}</Message>}\n                                </Col>\n                            </Row>\n                        ) : (\n                            <Row><Col>Something wrong retry step 2</Col></Row>\n                        )\n                    )}\n                    {step === 3 && ( \n                        <Form.Control\n                            as='textarea' \n                            rows={10}\n                            value={message && message}\n                            readOnly\n                            //plaintext\n                        />\n                    )}\n                    </Col>\n                </Row>\n                \n                    \n            </Modal.Body>\n            <Modal.Footer>\n                {step === 3 && (\n                    <Button onClick={props.onHide}>Close</Button>\n                )}\n                {step < 3 && (\n                    <Button\n                        variant='success'\n                        onClick={() => (step + 1 <= 3) && setStep(step + 1)}\n                        disabled={step === 3 || (step === 1 && !path) || (step === 2 && !message)}\n                    >Next</Button>\n                )}\n            </Modal.Footer>\n        </Modal>\n    )\n}\n\nexport default FlowImportPxx;\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Table from 'react-bootstrap/Table';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport Pagination from 'react-bootstrap/Pagination';\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport ProgressBar from 'react-bootstrap/ProgressBar';\nimport FormControl from 'react-bootstrap/FormControl';\nimport Loader from '../components/Loader';\nimport Meta from '../components/Meta';\nimport Message from '../components/Message';\nimport DisplayChildren from '../components/DisplayChildren';\nimport ImportExcelFile from '../components/ImportExcelFile';\nimport { getAllPxx, pxxUpdateALine } from '../actions/pxxActions';\nimport ReactExport from \"react-export-excel\";\nimport FlowImportPxx from '../components/FlowImportPxx';\n\nconst ExcelFile = ReactExport.ExcelFile;\nconst ExcelSheet = ReactExport.ExcelFile.ExcelSheet;\nconst ExcelColumn = ReactExport.ExcelFile.ExcelColumn;\n\nconst PxxDetailsScreen = ({ history, match }) => {\n\n    const dispatch = useDispatch();\n\n    const monthId = match.params.id ;\n\n    const [pageSize, setPageSize] = useState(10);\n    const [pageNumber, setPageNumber] = useState(1);\n    const [keyword, setKeyword] = useState('');\n    const [exportExcel, setExportExcel] = useState('');\n\n    const [importData, setImportData] = useState([]);\n\n    const [progress, setProgress] = useState(0);\n    const [massImport, setMassImport] = useState(false);\n    const [errorImportMessage, setErrorImportMessage] = useState([]);\n    const [messsagesImportSuccess, setMessagesImportSuccess] = useState(0);\n    const [messsagesImportError, setMessagesImportError] = useState(0);\n    const [totalToImport, setTotalToImport] = useState(0);\n\n    const [showImportPxx, setShowImportPxx] = useState(false);\n\n    const userLogin = useSelector(state => state.userLogin);\n    const { userInfo } = userLogin;\n\n    const pxxAllList = useSelector(state  => state.pxxAllList);\n    const {loading, pxxs, pages, page, count} = pxxAllList;\n\n    /* const pxxImportMass = useSelector(state  => state.pxxImportMass);\n    const {loading: loadingImportMass, error: errorImportMass, success: successImportData, datas} = pxxImportMass; */\n\n    const pxxImportLine = useSelector(state  => state.pxxImportLine);\n    const {loading: loadingImportLine, error: errorImportLine, success: successImportLine, updatedLine} = pxxImportLine;\n\n    useEffect(() => {\n\n        if (userInfo) {\n            if (!massImport) {\n                dispatch(getAllPxx(userInfo.consultantProfil.practice, monthId, keyword, pageSize, pageNumber));\n            }\n        } else {\n            history.push('/login');\n        }\n\n    }, [dispatch, history, userInfo, monthId, keyword, pageNumber, pageSize, massImport]);\n\n    useEffect(() => {\n        if (pxxs) {\n            const exportExcelData = pxxs.map((pxx) => ({\n                'CONSULTANT': pxx.name.name,\n                'MATRICULE': pxx.name.matricule,\n                'PRACTICE': pxx.name.practice,\n                'CDM_MATRICULE': pxx.name.cdmId && pxx.name.cdmId.matricule,\n                'CDM_NAME': pxx.name.cdmId && pxx.name.cdmId.name,\n                'VALUED': pxx.name.valued ? pxx.name.valued.substring(0,10) : '',\n                'ARRIVAL': pxx.name.arrival ? pxx.name.arrival.substring(0,10) : '',\n                'LEAVING': pxx.name.leaving ? pxx.name.leaving.substring(0,10) : '',\n                'MONTH': pxx.month.name,\n                'PROD': pxx.prodDay,\n                'NOT_PROD': pxx.notProdDay,\n                'HOLIDAYS': pxx.leavingDay,\n                'AVAILABLE': pxx.availableDay\n            }));\n            setExportExcel(exportExcelData);\n        }\n    }, [pxxs, setExportExcel]);\n\n\n\n    // Effect to manage file import\n\n    const handlerImportAllPxx = () => {\n        //dispatch({ type: EMAIL_SEND_DECISION_RESET });\n        //console.log(importData);\n        setProgress(0);\n        setMassImport(true);\n    }\n    \n    const handlerImportData = (lineToImport) => {\n        const newImportData = importData.slice();\n        for (let incr = 0 ; incr < newImportData.length; incr++){\n            if(newImportData[incr].MATRICULE === lineToImport.MATRICULE){\n                newImportData[incr].status = 'loading'\n            }\n        }\n        setImportData(newImportData);\n        dispatch(pxxUpdateALine(lineToImport));\n    }\n\n    useEffect(() => {\n        if(massImport) {\n            if(importData.length > 0 && importData[progress].status !== 'imported') {\n                //sleep(1000);\n                handlerImportData(importData[progress]);\n            } else {\n                if(progress < importData.length - 1){\n                    setProgress(progress+1);\n                }\n            }\n        }\n    // eslint-disable-next-line\n    },[massImport, progress]);\n\n    useEffect(() => {\n        if(successImportLine) {\n            //console.log(progress);\n            //console.log(updatedLine);\n            //const successEmail = email;\n            const newImportData = importData.slice();\n            for (let incr = 0; incr < newImportData.length; incr++) {\n                if (newImportData[incr].MATRICULE === updatedLine.updatedMatricule) {\n                    newImportData[incr].status = 'imported'\n                }\n            }\n            setImportData(newImportData);\n\n            if (massImport){\n                if (progress < importData.length - 1){\n                    setProgress(progress+1);\n                } else {\n                    setMassImport(false);\n                }\n            }\n        }\n    // eslint-disable-next-line\n    }, [successImportLine]);\n\n    useEffect(() => {\n        if(errorImportLine) {\n            //console.log('error', error);\n            //const errorEmail = error;\n            const newImportData = importData.slice();\n            for (let incr = 0; incr < newImportData.length; incr++) {\n                if (newImportData[incr].MATRICULE === errorImportLine.message.matricule) {\n                    newImportData[incr].status = 'error';\n                }\n            }\n            setImportData(newImportData);\n            const newErrorMessage = errorImportMessage.slice();\n            newErrorMessage.push({message: errorImportLine.message.display});\n            //console.log(errorImportLine.message.display);\n            setErrorImportMessage(newErrorMessage);\n\n            if (massImport){\n                if (progress < importData.length - 1){\n                    setProgress(progress+1);\n                } else {\n                    setMassImport(false);\n                    setProgress(0);\n                }\n            }\n        }\n    // eslint-disable-next-line\n    }, [errorImportLine]);\n\n    useEffect(() => {\n        //console.log(importData)\n        setMessagesImportSuccess(importData.filter(x => x.status === 'imported').length);\n        setMessagesImportError(importData.filter(x => x.status === 'error').length);\n        setTotalToImport(importData.length);\n    },[importData, errorImportLine, successImportLine]);\n    \n    return (\n        <>\n            <Meta />\n\n            <FlowImportPxx \n                show={showImportPxx}\n                onHide={() => setShowImportPxx(false)}\n            />\n\n            <Row>\n                <Col className='text-left'>\n                    <Button className='mb-3' onClick={() => history.go(-1)}>Go Back</Button>\n                </Col>\n                <Col className='text-right'>\n                    <DisplayChildren access='updatePxxFromPxx'>\n                        <Button variant='primary' onClick={() => setShowImportPxx(true)}>Update from Pxx folder</Button>\n                    </DisplayChildren>\n                </Col>\n\n            </Row>\n\n\n\n\n            <Row className='align-items-center pt-3'>\n                <Col md={5}>\n                    {`${messsagesImportSuccess} Pxx line imported / ${totalToImport} - ${messsagesImportError} lines with error`}\n                </Col>\n\n                <Col ws={6} md={2} className='text-right'>\n                    {exportExcel && (\n                        <ExcelFile element={<Button variant='primary'><i className=\"fas fa-download\"></i>  Download</Button>}>\n                            <ExcelSheet data={exportExcel} name=\"pxxsheet\">\n                                <ExcelColumn label=\"MATRICULE\" value=\"MATRICULE\" />\n                                <ExcelColumn label=\"(PRACTICE)\" value=\"PRACTICE\" />\n                                {/* <ExcelColumn label=\"VALUED\" value=\"VALUED\" />\n                                <ExcelColumn label=\"ARRIVAL\" value=\"ARRIVAL\" />\n                                <ExcelColumn label=\"LEAVING\" value=\"LEAVING\" /> */}\n                                <ExcelColumn label=\"MONTH\" value=\"MONTH\" />\n                                <ExcelColumn label=\"PROD\" value=\"PROD\" />\n                                <ExcelColumn label=\"NOT_PROD\" value=\"NOT_PROD\" />\n                                <ExcelColumn label=\"HOLIDAYS\" value=\"HOLIDAYS\" />\n                                <ExcelColumn label=\"(AVAILABLE)\" value=\"AVAILABLE\" />\n                                <ExcelColumn label=\"(CDM_MATRICULE)\" value=\"CDM_MATRICULE\" />\n                                <ExcelColumn label=\"(CDM_NAME)\" value=\"CDM_NAME\" />\n                            </ExcelSheet>\n                        </ExcelFile>\n                    )}\n                </Col>\n\n                <Col md={3} >\n                    <DisplayChildren access='uploadPxx'>\n                        {loadingImportLine ? (\n                            <Loader />\n                        ) : (\n                                <ImportExcelFile setImportData={setImportData} sheets='1' />\n                            )}\n                    </DisplayChildren>\n                </Col>\n\n                \n                <Col md={2} className='text-right'>\n                    <Button\n                        variant='primary'\n                        //className='text-primary'\n                        onClick={() => handlerImportAllPxx()}\n                        disabled={!importData.length > 0}\n                    ><i className=\"fas fa-upload\"></i> {massImport ? <Loader /> : 'Import All Pxx'}</Button>\n                </Col>\n            </Row>\n            <Row className='pt-3'>\n                <Col>\n                    <ProgressBar>\n                        <ProgressBar animated={massImport} now={100* messsagesImportSuccess / totalToImport} variant='primary' />\n                        <ProgressBar animated={massImport} now={100* messsagesImportError / totalToImport} variant='danger' />\n                    </ProgressBar>\n                </Col>\n            </Row>\n\n            <Row>\n                <Col>\n                    {errorImportMessage && errorImportMessage.map((x, incr) => (\n                        <Message key={incr} variant='warning'>{x.message}</Message>\n                    ))}\n                </Col>\n            </Row>\n\n            <Row className='mt-3'>\n                <Col xs={6} md={4}>\n                    <InputGroup>\n                        <FormControl\n                            type='text'\n                            className=\"mb-3\"\n                            placeholder='Search name'\n                            value={keyword && keyword}\n                            onChange={(e) => setKeyword(e.target.value)}\n                        ></FormControl>\n                    </InputGroup>\n                </Col>\n\n                <Col xs={6} md={4}>\n                    <Form.Control\n                        plaintext\n                        readOnly\n                        value={count ? `${count} consultants found` : '0 consultant found'} />\n                </Col>     \n\n                <Col xs={6} md={4}>\n                    <InputGroup>\n                        <FormControl\n                            as='select'\n                            id='number-c'\n                            className=\"mb-3\"\n                            value={pageSize && pageSize}\n                            onChange={(e) => setPageSize(e.target.value)}\n                        >\n                            {['All', 5, 10, 15, 20, 50].map(x => (\n                                <option\n                                    key={x}\n                                    value={(x === 'All' ? 10000 : x)}\n                                >{(x === 'All' ? 'All (export)' : `${x} / page`)}</option>\n                            ))}\n                        </FormControl>\n                    </InputGroup>\n                </Col>\n\n            </Row>\n\n            {loading && <Loader />}\n\n            <Table responsive hover striped>\n                <thead>\n                    <tr className='table-primary'>\n                        <th className='align-middle text-light'>User name</th>\n                        <th className='align-middle text-light'>Matricule</th>\n                        <th className='align-middle text-light text-center'>Practice</th>\n                        <th className='align-middle text-light text-center'>CDM</th>\n                        <th className='align-middle text-light text-center'>Month</th>\n                        <th className='align-middle text-light text-center'>Arrival</th>\n                        <th className='align-middle text-light text-center'>Leaving</th>\n                        <th className='align-middle text-light text-center'>PROD</th>\n                        <th className='align-middle text-light text-center'>NOT PROD</th>\n                        <th className='align-middle text-light text-center'>HOLIDAYS</th>\n                        <th className='align-middle text-light text-center'>AVAILABLE</th>\n                    </tr>\n                </thead>\n\n                <tbody>\n                    {pxxs && pxxs.map((pxx) => (\n                        <tr key={pxx._id}>\n                            <td className='align-middle'><b>{pxx.name.name && pxx.name.name}</b></td>\n                            <td className='align-middle'><b>{pxx.name.matricule && pxx.name.matricule}</b></td>\n                            <td className='align-middle'>{pxx.name.practice && pxx.name.practice}</td>\n                            <td className='align-middle'><b>{pxx.name.cdmId && pxx.name.cdmId.name}</b></td>\n                            <td className='align-middle text-center'>{pxx.month.name && pxx.month.name}</td>\n                            <td className='align-middle text-center'>{pxx.name.arrival && pxx.name.arrival.toString().substring(0,10)}</td>\n                            <td className='align-middle text-center'>{pxx.name.leaving ? pxx.name.leaving.toString().substring(0,10) : '-'}</td>\n                            <td className='align-middle text-center'>{pxx.prodDay && pxx.prodDay}</td>\n                            <td className='align-middle text-center'>{pxx.notProdDay && pxx.notProdDay}</td>\n                            <td className='align-middle text-center'>{pxx.leavingDay && pxx.leavingDay}</td>\n                            <td className='align-middle text-center'>{pxx.availableDay && pxx.availableDay}</td>\n                            \n                        </tr>\n                    ))} \n                </tbody>\n            </Table>\n\n            <Pagination>\n                <Pagination.Prev\n                    onClick={() => setPageNumber(page - 1)}\n                    disabled={page === 1}\n                />\n                {[...Array(pages).keys()].map(x => (\n                    [0, 1, pages - 2, pages - 1].includes(x) ? (\n                        <Pagination.Item\n                            key={x + 1}\n                            active={x + 1 === page}\n                            onClick={() => {\n                                dispatch(getAllPxx(userInfo.consultantProfil.practice, monthId, keyword, pageSize, x + 1));\n                                setPageNumber(x + 1);\n                            }}\n                        >{x + 1}</Pagination.Item>\n                    ) : (pages > 4 && x === 2) && (\n                        <Pagination.Ellipsis key={x + 1} />\n                    )\n\n                ))}\n                <Pagination.Next\n                    onClick={() => setPageNumber(page + 1)}\n                    disabled={page === pages}\n                />\n            </Pagination>\n\n        </>\n    )\n}\n\nexport default PxxDetailsScreen;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport Table from 'react-bootstrap/Table'\nimport Button from 'react-bootstrap/Button';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Tooltip from 'react-bootstrap/Tooltip';\nimport Form from 'react-bootstrap/Form'\nimport { deleteDeal } from '../actions/dealActions';\nimport { DEAL_STATUS, REQUEST_STATUS } from '../constants/dealConstants';\n\nconst DealList = ({ history, data = [], filter }) => {\n\n    const dispatch = useDispatch();\n\n    const onClickDeleteHandler = (deal) => {\n        if (window.confirm(`Are you sure to delete deal: ${deal.title} ?`)) {\n            dispatch(deleteDeal(deal._id));\n        }\n    }\n    const formatName = (fullName) => {\n        const separateName = fullName.split(' ');\n        if (separateName.length === 1) {\n            return separateName[0];\n        } else {\n            const outName = separateName.map((word, indice1) => {\n                if (indice1 === 0) {\n                    return word[0].toUpperCase() + '.';\n                } else {\n                    return word.toUpperCase();\n                }\n            });\n            return outName.join(' ');\n        }\n    }\n\n    return (\n        <Table responsive hover striped className='mt-3'>\n            <thead>\n                <tr className='table-primary'>\n                    <th className='align-middle text-light'>Title</th>\n                    <th className='align-middle text-light'>Practice</th>\n                    <th className='align-middle text-light'>Contacts</th>\n                    <th className='align-middle text-light'>Company</th>\n                    <th className='align-middle text-light'>Status</th>\n                    <th className='align-middle text-light'>Probability</th>\n                    <th className='align-middle text-light'>Request</th>\n                    <th className='align-middle text-light'>Staff</th>\n                    <th className='align-middle text-light'>Start</th>\n                    <th className='align-middle text-light'></th>\n                    <th className='align-middle text-light'></th>\n                </tr>\n                <tr className='table-ligth'>\n                    <th className='align-middle text-Dark'>\n                        <Form.Group controlId='filter-title' className='mb-0'>\n                            <Form.Control\n                                type='text'\n                                placeholder='Search title'\n                                value={filter.searchTitle && filter.searchTitle}\n                                onChange={(e) => { filter.setSearchTitle(e.target.value) }}\n                            ></Form.Control>\n                        </Form.Group>\n                    </th>\n                    <th className='align-middle text-Dark'>\n                        <Form.Group controlId='filter-practice' className='mb-0'>\n                            <Form.Control\n                                type='text'\n                                placeholder='Search practice'\n                                disabled={true}\n                            ></Form.Control>\n                        </Form.Group>\n                    </th>\n                    <th className='align-middle text-Dark'>\n                        <Form.Group controlId='filter-contact' className='mb-0'>\n                            <Form.Control\n                                type='text'\n                                placeholder='Search contact'\n                                value={filter.searchContact && filter.searchContact}\n                                onChange={(e) => filter.setSearchContact(e.target.value)}\n                            ></Form.Control>\n                        </Form.Group>\n                    </th>\n                    <th className='align-middle text-Dark'>\n                        <Form.Group controlId='filter-company' className='mb-0'>\n                            <Form.Control\n                                type='text'\n                                placeholder='Search company'\n                                value={filter.searchCompany && filter.searchCompany}\n                                onChange={(e) => filter.setSearchCompany(e.target.value)}\n                            ></Form.Control>\n                        </Form.Group>\n                    </th>\n                    <th className='align-middle text-Dark'>\n                        <Form.Group controlId='filter-status' className='mb-0'>\n                            <Form.Control\n                                as='select'\n                                value={filter.searchDealStatus && filter.searchDealStatus}\n                                onChange={(e) => {\n                                    filter.setSearchDealStatus(e.target.value)\n                                    //setUpdate(true)\n                                }}\n                            >\n                                <option value=''>--Select--</option>\n                                {DEAL_STATUS.map(x => (\n                                    <option key={x.name} value={x.name}>{x.name}</option>\n                                ))}\n                            </Form.Control>\n                        </Form.Group>\n                    </th>\n                    <th className='align-middle text-Dark'>\n                        <Form.Group controlId='filter-probability' className='mb-0'>\n                            <Form.Control\n                                type='text'\n                                placeholder='Search probability'\n                                disabled={true}\n                            //value={filter.searchContact && filter.searchContact}\n                            //onChange={(e) => filter.setSearchContact(e.target.value)}\n                            ></Form.Control>\n                        </Form.Group>\n                    </th>\n                    <th className='align-middle text-Dark'>\n                        <Form.Group controlId='filter-request' className='mb-0'>\n                            <Form.Control\n                                as='select'\n                                value={filter.searchRequestStatus && filter.searchRequestStatus}\n                                onChange={(e) => {\n                                    filter.setSearchRequestStatus(e.target.value)\n                                    //setUpdate(true)\n                                }}\n                            >\n                                <option value=''>--Select--</option>\n                                {REQUEST_STATUS.map(x => (\n                                    <option key={x.name} value={x.name}>{x.name}</option>\n                                ))}\n                            </Form.Control>\n                        </Form.Group>\n                    </th>\n                    <th className='align-middle text-Dark'>\n                        <Form.Group controlId='filter-staff' className='mb-0'>\n                            <Form.Control\n                                type='text'\n                                placeholder='Search staff'\n                                value={filter.searchStaff && filter.searchStaff}\n                                onChange={(e) => filter.setSearchStaff(e.target.value)}\n                            ></Form.Control>\n                        </Form.Group>\n                    </th>\n                    <th className='align-middle text-Dark'>\n                        <Form.Group controlId='filter-start' className='mb-0'>\n                            <Form.Control\n                                type='text'\n                                placeholder='Search start'\n                                disabled={true}\n                            ></Form.Control>\n                        </Form.Group>\n                    </th>\n                    <th className='align-middle text-Dark' colSpan={2}>\n                        <Button\n                            variant='ligth'\n                            style={{color: 'grey'}}\n                            onClick={() => {\n                                filter.setSearchTitle('');\n                                filter.setSearchCompany('');\n                                filter.setSearchContact('');\n                                filter.setSearchDealStatus('');\n                                filter.setSearchRequestStatus('');\n                                filter.setSearchStaff('');\n                            }}\n                        ><i className=\"fas fa-minus-circle\"></i>  Reset</Button>\n                    </th>\n                </tr>\n\n            </thead>\n\n            <tbody>\n                {data && data.deals.map((deal) => (\n                    <tr key={deal._id}>\n                        <OverlayTrigger\n                            placement=\"bottom\"\n                            overlay={<Tooltip id=\"button-tooltip-2\">{\n                                deal.description\n                            }</Tooltip>}\n                        >\n                            <td className='align-middle'>{deal.title}</td>\n                        </OverlayTrigger>\n                        <td className='align-middle text-center'>{deal.mainPractice} {deal.othersPractices && deal.othersPractices.length ? (`(${deal.othersPractices.join(', ')})`) : ''}</td>\n                        <td className='align-middle text-center'>{deal.contacts.primary ? formatName(deal.contacts.primary.name) : '-'} {deal.contacts && deal.contacts.secondary && deal.contacts.secondary.length ? ('/ (' + deal.contacts.secondary.map(x => formatName(x.name.toString())).join(', ') + ')') : ''}</td>\n                        <td className='align-middle text-center'>{deal.company}</td>\n                        <td className='align-middle text-center'>{deal.status}</td>\n                        <td className='align-middle text-center'>{deal.probability} %</td>\n                        <OverlayTrigger\n                            placement=\"bottom\"\n                            overlay={<Tooltip id=\"button-tooltip-2\">{\n                                deal.staffingRequest.instructions\n                            }</Tooltip>}\n                        >\n                            <td className='align-middle text-center'>{deal.staffingRequest.requestStatus}</td>\n                        </OverlayTrigger>\n\n                        <OverlayTrigger\n                            placement=\"bottom\"\n                            overlay={<Tooltip id=\"button-tooltip-2\">{\n                                deal.staffingDecision.staff.length > 0 ? (\n                                    deal.staffingDecision.staff.map(x => ({ name: formatName(x.idConsultant.name), responsability: x.responsability, priority: x.priority })).map((x, index) => <div className='text-left' key={index}>{`${x.responsability}: ${x.name} (${x.priority})`}</div>)\n                                ) : ('-')}</Tooltip>\n                            }\n                        >\n                            <td className='align-middle'>{deal.staffingDecision.staff.length > 0 ? 'See' : '-'}</td>\n                        </OverlayTrigger>\n\n                        <td className='align-middle text-center'>{deal.startDate.substring(0, 10)}</td>\n                        <td className='align-middle text-center'>\n                            <Button\n                                variant='ligth'\n                                style={{color:'gray'}}\n                                onClick={() => history.push(`/staffing/${deal._id}`)}\n                                size='md'\n                            ><i className=\"fas fa-edit\"></i>\n                            </Button>\n                        </td>\n                        <td className='align-middle'>\n                            <Button\n                                variant='ligth'\n                                style={{color: 'red'}}\n                                onClick={() => onClickDeleteHandler(deal)}\n                                size='md'\n                            ><i className=\"fas fa-times\"></i>\n                            </Button>\n                        </td>\n                    </tr>\n                ))}\n            </tbody>\n        </Table>\n    )\n}\n\nexport default DealList;","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Button from 'react-bootstrap/Button';\nimport Loader from '../components/Loader';\nimport Message from '../components/Message';\nimport Meta from '../components/Meta';\nimport DealList from '../components/DealList';\nimport DisplayChildren from '../components/DisplayChildren';\nimport DropDownTitleContainer from '../components/DropDownTitleContainer';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport { dealsImportInMass, getAllDeals } from '../actions/dealActions';\nimport { FormControl, InputGroup } from 'react-bootstrap';\nimport { DEAL_STATUS, REQUEST_STATUS } from '../constants/dealConstants';\nimport ImportExcelFile from '../components/ImportExcelFile';\nimport ReactExport from \"react-export-excel\";\n\nconst ExcelFile = ReactExport.ExcelFile;\nconst ExcelSheet = ReactExport.ExcelFile.ExcelSheet;\nconst ExcelColumn = ReactExport.ExcelFile.ExcelColumn;\n\nconst ManageDealsScreen = ({ history }) => {\n\n    const dispatch = useDispatch();\n\n    // pagination configuration\n    const [pageSize] = useState('');\n    const [pageNumber] = useState('');\n\n    // search configuration\n    const [searchTitle, setSearchTitle] = useState(localStorage.getItem('ManageDealsScreen.filter') && JSON.parse(localStorage.getItem('ManageDealsScreen.filter')).title ? JSON.parse(localStorage.getItem('ManageDealsScreen.filter')).title : '');\n    const [searchCompany, setSearchCompany] = useState(localStorage.getItem('ManageDealsScreen.filter') && JSON.parse(localStorage.getItem('ManageDealsScreen.filter')).company ? JSON.parse(localStorage.getItem('ManageDealsScreen.filter')).company : '');\n    const [searchContact, setSearchContact] = useState(localStorage.getItem('ManageDealsScreen.filter') && JSON.parse(localStorage.getItem('ManageDealsScreen.filter')).contact ? JSON.parse(localStorage.getItem('ManageDealsScreen.filter')).contact : '');\n    const [searchDealStatus, setSearchDealStatus] = useState(localStorage.getItem('ManageDealsScreen.filter') && JSON.parse(localStorage.getItem('ManageDealsScreen.filter')).dealStatus ? JSON.parse(localStorage.getItem('ManageDealsScreen.filter')).dealStatus : '');\n    const [searchRequestStatus, setSearchRequestStatus] = useState(localStorage.getItem('ManageDealsScreen.filter') && JSON.parse(localStorage.getItem('ManageDealsScreen.filter')).requestStatus ? JSON.parse(localStorage.getItem('ManageDealsScreen.filter')).requestStatus : '');\n    const [searchMyDeals, setSearchMyDeals] = useState(localStorage.getItem('ManageDealsScreen.filter') && JSON.parse(localStorage.getItem('ManageDealsScreen.filter')).myDeals ? JSON.parse(localStorage.getItem('ManageDealsScreen.filter')).myDeals : '');\n    const [searchStaff, setSearchStaff] = useState(localStorage.getItem('ManageDealsScreen.filter') && JSON.parse(localStorage.getItem('ManageDealsScreen.filter')).searchStaff ? JSON.parse(localStorage.getItem('ManageDealsScreen.filter')).searchStaff : '');\n\n    const [updateFilter, setUpdateFilter] = useState(7);\n    const [notUpdateFilter, setNotUpdateFilter] = useState(30);\n    const [newDealFilter, setNewDealFilter] = useState(7);\n    const [wonDealFilter, setWonDealFilter] = useState(7);\n\n    const [changePeriod, setChangePeriod] = useState(false);\n\n    const [tabsFilter] = useState(['Waiting staffing', `Updated (${updateFilter}d)`, `Not updated (${notUpdateFilter}d)`, `New deal (${newDealFilter}d)`, `Won (${wonDealFilter}d)`, 'All']);\n\n    const [defaultTabs, setDefaultTabs] = useState(localStorage.getItem('ManageDealsScreen.defaultTab') ? localStorage.getItem('ManageDealsScreen.defaultTab') : tabsFilter[0])\n\n    const [dataFiltered, setDataFiltered] = useState([]);\n\n    const [update, setUpdate] = useState(true);\n\n    const [exportExcel, setExportExcel] = useState('');\n    const [importData, setImportData] = useState([]);\n\n    const userLogin = useSelector(state => state.userLogin);\n    const { userInfo } = userLogin;\n\n    const dealAllList = useSelector(state => state.dealAllList);\n    const { error, loading, deals } = dealAllList;\n\n    const dealDelete = useSelector(state => state.dealDelete);\n    const { error: errorDelete, success: successDelete } = dealDelete;\n\n    const dealsImportMass = useSelector(state  => state.dealsImportMass);\n    const {loading: loadingImportMass, error: errorImportMass, success: successImportData, datas} = dealsImportMass;\n\n    useEffect(() => {\n\n        if (userInfo) {\n            const keyword = {\n                title: searchTitle,\n                contact: searchContact,\n                company: searchCompany,\n                status: searchDealStatus,\n                request: searchRequestStatus,\n                staff: searchStaff,\n                filterMy: searchMyDeals\n            }\n\n            dispatch(getAllDeals(keyword, pageNumber, pageSize, 'active'));\n            localStorage.setItem('ManageDealsScreen.filter', JSON.stringify({\n                title: searchTitle,\n                company: searchCompany,\n                contact: searchContact,\n                dealStatus: searchDealStatus,\n                requestStatus: searchRequestStatus,\n                searchStaff: searchStaff,\n                myDeals: searchMyDeals,\n            }));\n            setUpdate(false);\n\n        } else {\n            history.push('/login');\n        }\n\n    }, [\n        dispatch, \n        history, \n        userInfo, \n        searchTitle, \n        searchCompany, \n        searchContact, \n        searchDealStatus, \n        searchRequestStatus,\n        searchStaff,\n        pageNumber, \n        pageSize,\n        update,\n        searchMyDeals,\n        successImportData\n    ]);\n\n    useEffect(() => {\n\n        if (deals) {\n\n            const updateTime = new Date(Date.now());\n            updateTime.setUTCDate(updateTime.getUTCDate() - updateFilter);\n\n            const notUpdateTime = new Date(Date.now());\n            notUpdateTime.setUTCDate(notUpdateTime.getUTCDate() - notUpdateFilter);\n\n            const newDealTime = new Date(Date.now());\n            newDealTime.setUTCDate(newDealTime.getUTCDate() - newDealFilter);\n\n            const wonDealTime = new Date(Date.now());\n            wonDealTime.setUTCDate(wonDealTime.getUTCDate() - wonDealFilter);\n\n\n            const filteredData = [];\n\n            for (let incr = 0; incr < tabsFilter.length; incr++) {\n                let dealsFiltered = [];\n\n                switch (tabsFilter[incr]) {\n                    case tabsFilter[0]: // Deals waiting a staff\n                        const needStaff = REQUEST_STATUS.filter(x => x.staff === true);\n                        const toDisplay = DEAL_STATUS.filter(x => x.display === 'onTrack' || x.display === 'win');\n                        //console.log('toDisplay', toDisplay)\n                        dealsFiltered = {\n                            deals: deals.filter(deal => (needStaff.map(x => x.name).includes(deal.staffingRequest.requestStatus) && toDisplay.map(x => x.name).includes(deal.status))),\n                            param: null,\n                            setParam: null\n                        };\n                        break;\n                    case tabsFilter[1]: // Update\n                        dealsFiltered = {\n                            deals: deals.filter(deal => new Date(deal.updatedAt) >= updateTime),\n                            param: updateFilter,\n                            setParam: setUpdateFilter\n                        }\n                        break;\n                    case tabsFilter[2]: // Not Update\n                        dealsFiltered = {\n                            deals: deals.filter(deal => new Date(deal.updatedAt) <= notUpdateTime),\n                            param: notUpdateFilter,\n                            setParam: setNotUpdateFilter\n                        }\n                        break;\n                    case tabsFilter[3]: // newDeal\n                        dealsFiltered = {\n                            deals: deals.filter(deal => new Date(deal.createdAt) >= newDealTime),\n                            param: newDealFilter,\n                            setParam: setNewDealFilter\n                        }\n                        break;\n                    case tabsFilter[4]: // Won\n                        dealsFiltered = {\n                            deals: deals.filter(deal => new Date(deal.wonDate) >= wonDealTime),\n                            param: wonDealFilter,\n                            setParam: setWonDealFilter\n                        }\n                        break;\n                    case tabsFilter[5]: // All >>> mettre une redirection\n                        dealsFiltered = {\n                            deals: deals,\n                            param: null,\n                            setParam: null\n                        }\n                        break;\n                    default:\n                        dealsFiltered = [];\n                }\n                filteredData.push({ filter: tabsFilter[incr], data: dealsFiltered, count: dealsFiltered.deals.length });\n            }\n            setDataFiltered(filteredData);\n        }\n    }, [deals, tabsFilter, newDealFilter, notUpdateFilter, updateFilter, wonDealFilter]);\n\n    useEffect(() => {\n        if (deals) {\n            const exportExcelData = deals.map((deal) => ({\n                'TITLE': deal.title,\n                'COMPANY': deal.company,\n                'PRACTICE': deal.mainPractice,\n                'LEADER': deal.contacts && deal.contacts.primary && deal.contacts.primary.name,\n                'CO-LEADER': deal.contacts && deal.contacts.secondary && deal.contacts.secondary.map(x => x.name).join(''),\n                'OTHERS_PRACTICES': deal.othersPractices && deal.othersPractices.join(','),\n                'STATUS': deal.status,\n                'DESCRIPTION': deal.description,\n                'START': deal.startDate.substring(0,10),\n                'DURATION': deal.duration,\n                'REQUEST_STATUS': deal.staffingRequest.requestStatus,\n                'REQUEST_DETAILS': deal.staffingRequest.instructions,\n                'DECISION': deal.staffingDecision.staff && deal.staffingDecision.staff.map(x => `${x.responsability}: ${x.idConsultant.name} (${x.priority})}`).join('\\n'),\n            }));\n            setExportExcel(exportExcelData);\n        }\n    }, [deals, setExportExcel]);\n\n    useEffect(() => {\n        if(importData.length > 0) {\n            //console.log(importData);\n            dispatch(dealsImportInMass(importData));\n        }\n    },[dispatch, importData]);\n\n    useEffect(() => {\n\n        if (successDelete) {\n            const keyword = {\n                title: searchTitle,\n                mainPractice: userInfo.consultantProfil.practice,\n                othersPractices: userInfo.consultantProfil.practice,\n                contact: searchContact,\n                company: searchCompany,\n                status: searchDealStatus,\n                request: searchRequestStatus,\n                staff: searchStaff,\n                filterMy: searchMyDeals\n            }\n            dispatch(getAllDeals(keyword, pageNumber, pageSize));\n        }\n        // eslint-disable-next-line\n    }, [dispatch, successDelete]);\n\n    return (\n        <>\n            <Meta />\n\n            {errorDelete && <Message variant='danger'>{errorDelete}</Message>}\n            {error && <Message variant='danger'>{error}</Message>}\n            {loading && <Loader />}\n\n            <DropDownTitleContainer\n                title='Manage Deals'\n                close={false}>\n                \n                <Row className='mt-3'>\n                    <Col xs={0} md={7}></Col>\n                    <Col xs={6} md={3}>\n                        <DisplayChildren access='uploadDeals'>\n                            {loadingImportMass ? (\n                                <Loader />\n                            ) : (\n                                    <ImportExcelFile setImportData={setImportData} />\n                                )}\n                        </DisplayChildren>\n                    </Col>\n\n                    <Col ws={6} md={2}>\n                        {exportExcel && (\n                            <ExcelFile element={<Button variant='primary'><i className=\"fas fa-download\"></i>  Download</Button>}>\n                                <ExcelSheet data={exportExcel} name=\"dealsSheet\">\n                                    <ExcelColumn label=\"TITLE\" value=\"TITLE\" />\n                                    <ExcelColumn label=\"COMPANY\" value=\"COMPANY\" />\n                                    <ExcelColumn label=\"PRACTICE\" value=\"PRACTICE\" />\n                                    <ExcelColumn label=\"LEADER\" value=\"LEADER\" />\n                                    <ExcelColumn label=\"CO-LEADER\" value=\"CO-LEADER\" />\n                                    <ExcelColumn label=\"OTHERS_PRACTICES\" value=\"OTHERS_PRACTICES\" />\n                                    <ExcelColumn label=\"STATUS\" value=\"STATUS\" />\n                                    <ExcelColumn label=\"DESCRIPTION\" value=\"DESCRIPTION\" />\n                                    <ExcelColumn label=\"START\" value=\"START\" />\n                                    <ExcelColumn label=\"DURATION\" value=\"DURATION\" />\n                                    <ExcelColumn label=\"REQUEST_STATUS\" value=\"REQUEST_STATUS\" />\n                                    <ExcelColumn label=\"REQUEST_DETAILS\" value=\"REQUEST_DETAILS\" />\n                                    <ExcelColumn label=\"DECISION\" value=\"DECISION\" />\n                                </ExcelSheet>\n                            </ExcelFile>\n                        )}\n                    </Col>\n                </Row>\n\n                <ListGroup.Item className='p-0 mt-3'>\n                    <Tabs \n                        id=\"uncontrolled-tab-example\" \n                        variant='pills'\n                        activeKey={defaultTabs}\n                        onSelect={(k) => {\n                            setDefaultTabs(k)\n                            localStorage.setItem('ManageDealsScreen.defaultTab', k)\n                        }}\n                    >\n                        {dataFiltered.length > 0 && dataFiltered.map((data, val) => (\n                            <Tab\n                                key={val}\n                                className='mx-3'\n                                eventKey={`${data.filter}`}\n                                \n                                title={\n                                    <Row className='align-text-middle'>\n                                        <span className='ml-3 align-middle'>{data.filter.split(/[0-9]+/i)[0]}</span>\n                                        {changePeriod ? (\n                                            <span>{data.data.param && (\n                                                <InputGroup>\n                                                    <FormControl\n                                                        as='select'\n                                                        value={data.data.param}\n                                                        onChange={(e) => data.data.setParam(e.target.value)}\n                                                    >\n                                                        {[...new Array(30).keys()].map(x => (\n                                                            <option key={x + 1} value={x + 1}>{x + 1}</option>\n                                                        ))}\n                                                    </FormControl>\n                                                </InputGroup>\n                                            )}\n                                            </span>) : data.data.param}\n                                        <span>{(data.filter.split(/[0-9]+/i)[1] && data.filter.split(/[0-9]+/i)[1])}</span>\n                                        <span className='mr-3'>{' > ' + data.count}</span>\n                                    </Row>\n                                }\n                            >\n                                <Row className='mt-3'>\n                                    <Col className='text-left'>\n                                        <Button\n                                            variant='ligth'\n                                            onClick={() => setChangePeriod(!changePeriod)}\n                                        ><i className=\"fas fa-edit\"></i>  Configure tabs</Button>\n\n                                        <Button\n                                            variant='ligth'\n                                            onClick={() => history.push('/admin/deals/history')}\n                                        ><i className=\"fas fa-history\"></i>  History</Button>\n\n                                        <Button\n                                            variant='ligth'\n                                            onClick={() => {\n                                                setSearchMyDeals(!searchMyDeals)\n                                                setUpdate(true)\n                                            }}\n                                        >{searchMyDeals ? (\n                                            <div><i className=\"fas fa-backspace\"></i>  Get all deals</div>\n                                        ) : (\n                                                <div><i className=\"fas fa-filter\"></i>  Filter my deals</div>\n                                            )}\n                                        </Button>\n\n                                        <Button \n                                            variant='ligth'\n                                            onClick={() => window.confirm('Soon available')}\n                                        ><i className=\"fas fa-project-diagram\"></i>  Business flows\n                                        </Button>\n\n                                        <DisplayChildren access='sendStaffingDecision'>\n                                            <Button\n                                                variant='ligth'\n                                                className='text-black align-right'\n                                                onClick={() => history.push('/admin/send')}\n                                            ><i className=\"fas fa-envelope\"></i>  Send staffing decisions</Button>\n                                        </DisplayChildren>\n                                    </Col>\n                                </Row>\n\n                                <DealList\n                                    history={history}\n                                    data={data.data}\n                                    filter={{\n                                        searchTitle: searchTitle,\n                                        setSearchTitle: setSearchTitle,\n                                        searchCompany: searchCompany, \n                                        setSearchCompany: setSearchCompany,\n                                        searchContact: searchContact,\n                                        setSearchContact: setSearchContact,\n                                        searchDealStatus: searchDealStatus,\n                                        setSearchDealStatus: setSearchDealStatus,\n                                        searchRequestStatus: searchRequestStatus,\n                                        setSearchRequestStatus: setSearchRequestStatus,\n                                        searchStaff: searchStaff,\n                                        setSearchStaff: setSearchStaff\n                                    }}\n                                />\n                            </Tab>\n                        ))}\n                    </Tabs>\n                </ListGroup.Item>\n            </DropDownTitleContainer>\n        </>\n    )\n}\n\nexport default ManageDealsScreen\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Button from 'react-bootstrap/Button';\nimport Loader from '../components/Loader';\nimport Message from '../components/Message';\nimport DropDownTitleContainer from '../components/DropDownTitleContainer';\nimport DealList from '../components/DealList';\nimport Meta from '../components/Meta';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport { getAllDeals } from '../actions/dealActions';\nimport ReactExport from \"react-export-excel\";\nconst ExcelFile = ReactExport.ExcelFile;\nconst ExcelSheet = ReactExport.ExcelFile.ExcelSheet;\nconst ExcelColumn = ReactExport.ExcelFile.ExcelColumn;\n\n\nconst DealsHistoryScreen = ({history}) => {\n\n    const dispatch = useDispatch();\n\n    // pagination configuration\n    const [pageSize] = useState('');\n    const [pageNumber] = useState('');\n\n    // search configuration\n    const [searchTitle, setSearchTitle] = useState(localStorage.getItem('DealsHistoryScreen.filter') && JSON.parse(localStorage.getItem('DealsHistoryScreen.filter')).title ? JSON.parse(localStorage.getItem('DealsHistoryScreen.filter')).title : '' );\n    const [searchCompany, setSearchCompany] = useState(localStorage.getItem('DealsHistoryScreen.filter') && JSON.parse(localStorage.getItem('DealsHistoryScreen.filter')).company ? JSON.parse(localStorage.getItem('DealsHistoryScreen.filter')).company : '');\n    const [searchContact, setSearchContact] = useState(localStorage.getItem('DealsHistoryScreen.filter') && JSON.parse(localStorage.getItem('DealsHistoryScreen.filter')).contact ? JSON.parse(localStorage.getItem('DealsHistoryScreen.filter')).contact : '');\n    const [searchDealStatus, setSearchDealStatus] = useState(localStorage.getItem('DealsHistoryScreen.filter') && JSON.parse(localStorage.getItem('DealsHistoryScreen.filter')).dealStatus ? JSON.parse(localStorage.getItem('DealsHistoryScreen.filter')).dealStatus : '');\n    const [searchRequestStatus, setSearchRequestStatus] = useState(localStorage.getItem('DealsHistoryScreen.filter') && JSON.parse(localStorage.getItem('DealsHistoryScreen.filter')).requestStatus ? JSON.parse(localStorage.getItem('DealsHistoryScreen.filter')).requestStatus : '');\n    const [searchStaff, setSearchStaff] = useState(localStorage.getItem('DealsHistoryScreen.filter') && JSON.parse(localStorage.getItem('DealsHistoryScreen.filter')).searchStaff ? JSON.parse(localStorage.getItem('DealsHistoryScreen.filter')).searchStaff : '');\n    //const [searchMyDeals, setSearchMyDeals] = useState(localStorage.getItem('DealsHistoryScreen.filter') ? JSON.parse(localStorage.getItem('DealsHistoryScreen.filter')).myDeals : '');\n\n    const [tabsFilter] = useState([...new Array(5).keys()].map(x => new Date(Date.now()).getFullYear() - x));\n\n    const [defaultTabs, setDefaultTabs] = useState(localStorage.getItem('DealsHistoryScreen.defaultTab') ? localStorage.getItem('DealsHistoryScreen.defaultTab') : tabsFilter[0])\n\n    const [dataFiltered, setDataFiltered] = useState([]);\n\n    const [update, setUpdate] = useState(true);\n\n    const userLogin = useSelector(state => state.userLogin);\n    const { userInfo } = userLogin;\n\n    const dealAllList = useSelector(state => state.dealAllList);\n    const { error, loading, deals } = dealAllList;\n\n    const dealDelete = useSelector(state => state.dealDelete);\n    const { error: errorDelete, success: successDelete } = dealDelete;\n\n    useEffect(() => {\n        if (userInfo) {\n            const keyword = {\n                title: searchTitle,\n                mainPractice: userInfo.consultantProfil.practice,\n                othersPractices: userInfo.consultantProfil.practice,\n                contact: searchContact,\n                company: searchCompany,\n                status: searchDealStatus,\n                request: searchRequestStatus,\n                staff: searchStaff,\n                filterMy: false\n            }\n\n            dispatch(getAllDeals(keyword, pageNumber, pageSize, 'all'));\n            localStorage.setItem('DealsHistoryScreen.filter', JSON.stringify({\n                title: searchTitle,\n                company: searchCompany,\n                contact: searchContact,\n                dealStatus: searchDealStatus,\n                requestStatus: searchRequestStatus,\n                searchStaff: searchStaff,\n                //myDeals: searchMyDeals,\n            }));\n            setUpdate(false);\n\n        } else {\n            history.push('/login');\n        }\n\n    }, [\n        dispatch, \n        history, \n        userInfo, \n        searchTitle, \n        searchCompany, \n        searchContact, \n        searchDealStatus, \n        searchRequestStatus, \n        searchStaff,\n        //searchMyDeals,\n        pageNumber, \n        pageSize,\n        update\n    ]);\n\n    useEffect(() => {\n        if (deals) {\n\n            const filteredData = [];\n\n            for (let incr = 0; incr < tabsFilter.length; incr++) {\n                let dealsFiltered = deals.filter( deal => deal.updatedAt.substring(0,4) === tabsFilter[incr].toString());\n                dealsFiltered = {\n                    deals: dealsFiltered,\n                    param: null,\n                    setParam: null,\n                    exportExcel: dealsFiltered.map((deal) => ({\n                        'TITLE': deal.title,\n                        'MAIN_PRACTICE': deal.mainPractice,\n                        'OTHERS_PRACTICES': deal.othersPractices.join(', '),\n                        'LEADER': deal.contacts.primary ? (deal.contacts.primary.name + ' (' + deal.contacts.primary.matricule + ')') : '',\n                        'CO-LEADERS': deal.contacts.secondary ? deal.contacts.secondary.map(x => x.name + ' (' + x.matricule + ')').join(', ')  : '',\n                        'COMPANY': deal.company,\n                        'STATUS': deal.status,\n                        'TYPE': deal.type,\n                        'DESCRIPTION': deal.description,\n                        'PROPOSAL DATE': deal.proposalDate ? deal.proposalDate.substring(0,10) : '',\n                        'PRESENTATION DATE': deal.presentationDate ? deal.presentationDate.substring(0,10) : '',\n                        'START DATE': deal.startDate ? deal.startDate.substring(0,10) : '',\n                        'WON DATE': deal.wonDate ? deal.wonDate.substring(0,10) : '',\n                        'STAFF': deal.staffingDecision.staff ? deal.staffingDecision.staff.map(x => x.responsability + ': ' + x.idConsultant.name + ' (' + x.idConsultant.matricule + ')').join(', ') : '',\n                    }))\n                \n\n                }\n                filteredData.push({ filter: tabsFilter[incr], data: dealsFiltered, count: dealsFiltered.deals.length });\n            }\n            setDataFiltered(filteredData);\n        }\n    }, [deals, tabsFilter]);\n\n    useEffect(() => {\n\n        if (successDelete) {\n            const keyword = {\n                title: searchTitle,\n                mainPractice: userInfo.consultantProfil.practice,\n                othersPractices: userInfo.consultantProfil.practice,\n                contact: searchContact,\n                company: searchCompany,\n                status: searchDealStatus,\n                request: searchRequestStatus,\n                staff: searchStaff,\n                filterMy:false\n            }\n            dispatch(getAllDeals(keyword, pageNumber, pageSize));\n        }\n        // eslint-disable-next-line\n    }, [dispatch, successDelete])\n\n    return (\n        <>\n            <Meta />\n\n            {errorDelete && <Message variant='danger'>{errorDelete}</Message>}\n            {error && <Message variant='danger'>{error}</Message>}\n            {loading && <Loader />}\n\n            <DropDownTitleContainer\n                title='Manage Deals'\n                close={false}>\n                <ListGroup.Item className='p-0 mt-3'>\n                    <Tabs \n                        //defaultActiveKey={tabsFilter[0]} \n                        id=\"uncontrolled-tab-example\" \n                        variant='pills'\n                        activeKey={defaultTabs}\n                        onSelect={(k) => {\n                            setDefaultTabs(k)\n                            localStorage.setItem('DealsHistoryScreen.defaultTab', k)\n                        }}\n                    >\n                        {dataFiltered.length > 0 && dataFiltered.map((data, val) => (\n                            <Tab\n                                key={val}\n                                className='mx-3'\n                                eventKey={`${data.filter}`}\n                                title={data.filter + ' (' + data.data.deals.length + ')'}\n                            >\n                                {data.data.deals && (\n                                    <ExcelFile element={<Button variant='ligth' className='mt-3'><i className=\"fas fa-download\"></i>  Download</Button>}>\n                                        <ExcelSheet data={data.data.exportExcel} name=\"dealsSheet\">\n                                            <ExcelColumn label=\"TITLE\" value=\"TITLE\" />\n                                            <ExcelColumn label=\"MAIN_PRACTICE\" value=\"MAIN_PRACTICE\" />\n                                            <ExcelColumn label=\"OTHERS_PRACTICES\" value=\"OTHERS_PRACTICES\" />\n                                            <ExcelColumn label=\"LEADER\" value=\"LEADER\" />\n                                            <ExcelColumn label=\"CO-LEADERS\" value=\"CO-LEADERS\" />\n                                            <ExcelColumn label=\"COMPANY\" value=\"COMPANY\" />\n                                            <ExcelColumn label=\"STATUS\" value=\"STATUS\" />\n                                            <ExcelColumn label=\"TYPE\" value=\"TYPE\" />\n                                            <ExcelColumn label=\"DESCRIPTION\" value=\"DESCRIPTION\" />\n                                            <ExcelColumn label=\"PROPOSAL DATE\" value=\"PROPOSAL DATE\" />\n                                            <ExcelColumn label=\"PRESENTATION DATE\" value=\"PRESENTATION DATE\" />\n                                            <ExcelColumn label=\"START DATE\" value=\"START DATE\" />\n                                            <ExcelColumn label=\"WON DATE\" value=\"WON DATE\" />\n                                            <ExcelColumn label=\"STAFF\" value=\"STAFF\" />\n                                        </ExcelSheet>\n                                    </ExcelFile>\n                                )}\n\n                                <DealList\n                                    history={history}\n                                    data={data.data}\n                                    filter={{\n                                        searchTitle: searchTitle,\n                                        setSearchTitle: setSearchTitle,\n                                        searchCompany: searchCompany,\n                                        setSearchCompany: setSearchCompany,\n                                        searchContact: searchContact,\n                                        setSearchContact: setSearchContact,\n                                        searchDealStatus: searchDealStatus,\n                                        setSearchDealStatus: setSearchDealStatus,\n                                        searchRequestStatus: searchRequestStatus,\n                                        setSearchRequestStatus: setSearchRequestStatus,\n                                        searchStaff: searchStaff,\n                                        setSearchStaff: setSearchStaff\n                                    }}\n                                />\n                            </Tab>\n                        ))}\n                    </Tabs>\n                </ListGroup.Item>\n            </DropDownTitleContainer>\n        </>\n    )\n}\n\nexport default DealsHistoryScreen\n","import React, { useState, useEffect } from 'react';\nimport { Form, ListGroup, Col, Row, Tabs, Tab, Button } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ACCESS_DATAS, ACCESS_MODES } from '../constants/accessConstants';\nimport DisplayChildren from '../components/DisplayChildren';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\nimport { getAllAccess, updateprofilFrontAcessRule } from '../actions/accessActions';\n\nconst AccessEditScreen = ({ history }) => {\n\n    const dispatch = useDispatch();\n\n    const userLogin = useSelector(state => state.userLogin);\n    const { userInfo } = userLogin;\n\n    const accessList = useSelector(state => state.accessList);\n    const { loading, error, access } = accessList;\n\n    const accessFrontUpdate = useSelector(state => state.accessFrontUpdate);\n    const { error: errorFrontUpdate } = accessFrontUpdate;\n\n    useEffect(() => {\n        if (!userInfo) {\n            history.push('/login');\n        }\n    }, [history, userInfo]);\n\n    useEffect(() => {\n        if (!access) {\n            dispatch(getAllAccess());\n        }\n    }, [dispatch, access]);\n    \n\n    return (\n        <DisplayChildren access='manageProfils'>\n            {loading && <Loader />}\n            {error && <Message variant='danger'>{error}</Message>}\n            {errorFrontUpdate && <Message variant='danger'>{errorFrontUpdate}</Message>}\n\n            <h1>Manage user profils screen</h1>\n            <Tabs defaultActiveKey={access && access[0].profil} id=\"uncontrolled-tab-example\">\n                {access && access.map((x, incr) => (\n                    <Tab key={incr} eventKey={x.profil} title={x.profil}>\n                        <ProfilDescription data={x} />\n                    </Tab>\n                ))}\n            </Tabs>\n        </DisplayChildren>\n    )\n}\n\nconst ProfilDescription = ({data}) => {\n\n    const categorizeFrontAccess = (frontAccess) => {\n        \n        const categories = [...new Set(frontAccess.map(x => x.category))];\n\n        const categorizedFrontAccess = [];\n        for (let incr = 0; incr < categories.length; incr++) {\n            const filterdData = frontAccess.filter(x => x.category === categories[incr]);\n            categorizedFrontAccess.push({\n                frontAccessRules: filterdData,\n                category: categories[incr],\n            });\n        }\n        return [categorizedFrontAccess, categories]\n    }\n    \n    const [categorizedFrontAccess, categories] = categorizeFrontAccess(data.frontAccess);\n\n\n    return (\n        <ListGroup>\n            {categorizedFrontAccess && categorizedFrontAccess.map((categoryRules, incr) => (\n                <ListGroup.Item key={incr} className='pt-3'>\n                    <CategoryAccess\n                        accessRules={categoryRules.frontAccessRules}\n                        category={categoryRules.category}\n                        categories={categories}\n                        profilId={data._id}\n                    />\n                </ListGroup.Item>\n            ))}\n        </ListGroup>\n    )\n};\n\nconst CategoryAccess = ({ accessRules, category, categories, profilId }) => {\n\n    const params = {\n        categories: categories,\n        modes: ACCESS_MODES,\n        datas: ACCESS_DATAS\n    }\n\n    return (\n        <>\n            <h4>{category && category}</h4>\n            <ListGroup variant='flush'>\n                <ListGroup.Item>\n                    <Row className='py-1 border-bottom bg-primary'>\n                        <Col className='text-white' xs={3}><strong>TECHNICAL ID</strong></Col>\n                        <Col className='text-white' xs={4}><strong>LABEL</strong></Col>\n                        <Col className='text-white' xs={2}><strong>MODE</strong></Col>\n                        <Col className='text-white' xs={2}><strong>ACCESS</strong></Col>\n                        <Col xs={1}><strong></strong></Col>\n                    </Row>\n                </ListGroup.Item>\n            </ListGroup>\n            {accessRules && accessRules.map((item, incr) => (\n                <ListGroup key={incr} variant='flush' className='border-bottom'>\n                    <ListGroup.Item>\n                        <AccessLineEdit\n                            frontAccessItem={item}\n                            params={params}\n                            profilId={profilId}\n                        />\n                    </ListGroup.Item>\n                </ListGroup>\n            ))}\n        </>\n    )\n}\n\nconst AccessLineEdit = ({ frontAccessItem, params, profilId }) => {\n\n    const dispatch = useDispatch()\n\n    const [id] = useState(frontAccessItem.id);\n    const [label, setLabel] = useState(frontAccessItem.label);\n    const [mode, setMode] = useState(frontAccessItem.mode);\n    const [data, setData] = useState(frontAccessItem.data);\n\n    const [loadingState, setLoadingState] = useState(false);\n\n    const accessFrontUpdate = useSelector(state => state.accessFrontUpdate);\n    const { error, success } = accessFrontUpdate;\n\n    useEffect(() => {\n        if(success) {\n            setLoadingState(false)\n        } \n    },[success]);\n\n    useEffect(() => {\n        if(error) {\n            setLoadingState(false)\n        } \n    },[error]);\n\n    const submitHandler = (e) => {\n        e.preventDefault();\n        setLoadingState(true);\n        const rule = {\n            id: id,\n            label: label,\n            mode: mode,\n            data: data,\n            profilId: profilId\n        }\n        dispatch(updateprofilFrontAcessRule(rule))\n        console.log('update to implement')\n    }\n\n    return (\n        <Form onSubmit={submitHandler}>\n            <Form.Row>\n                <Col xs={3}>\n                    <Form.Control\n                        type='text'\n                        value={id && id}\n                        plaintext\n                        readOnly\n                    ></Form.Control>\n                </Col>\n\n                <Col xs={4}>\n                    <Form.Control\n                        type='text'\n                        value={label && label}\n                        onChange={(e) => setLabel(e.target.value)}\n                    ></Form.Control>\n                </Col>\n\n                <Col xs={2}>\n                    <Form.Control\n                        as='select'\n                        value={mode && mode}\n                        onChange={(e) => setMode(e.target.value)}\n                    >\n                        <option value=''>--Select--</option>\n                        {params.modes.map((x, incr) => (\n                            <option key={incr} value={x}>{x}</option>\n                        ))}\n                    </Form.Control>\n                </Col>\n\n                <Col xs={2}>\n                    <Form.Control\n                        as='select'\n                        value={data && data}\n                        onChange={(e) => setData(e.target.value)}\n                    >\n                        <option value=''>--Select--</option>\n                        {params.datas.map((x, incr) => (\n                            <option key={incr} value={x}>{x}</option>\n                        ))}\n                    </Form.Control>\n                </Col>\n\n                <Col xs={1}>\n                    <Button variant='ligth' className='text-secondary' type='submit'>\n                        {loadingState ? <Loader /> : <i className=\"fas fa-download\"></i>}\n                    </Button>\n                </Col>\n\n            </Form.Row>\n        </Form>\n    )\n}\n\nexport default AccessEditScreen\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Table from 'react-bootstrap/Table'\nimport Button from 'react-bootstrap/Button';\nimport Loader from '../components/Loader';\nimport Message from '../components/Message';\nimport DisplayChildren from '../components/DisplayChildren';\nimport DropDownTitleContainer from '../components/DropDownTitleContainer';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Pagination from 'react-bootstrap/Pagination';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Modal from 'react-bootstrap/Modal';\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nimport { createAClient, deleteAClient, getAllClients, updateAClient } from '../actions/clientActions';\n\nconst ManageCompaniesScreen = ({ history }) => {\n\n    const dispatch = useDispatch();\n\n    // pagination configuration\n\n    const [pageSize, setPageSize] = useState(10);\n    const [pageNumber, setPageNumber] = useState(1);\n    const [keyword, setKeyword] = useState('');\n\n    const [showAddContact, setShowAddContact] = useState({state:false, companyId:'', companyName:\"\"});\n    const [contactName, setContactName] = useState('');\n    const [contactEmail, setContactEmail] = useState('');\n    const [message, setMessage] = useState('');\n\n    const [showModifyName, setShowModifyName] = useState({state:false, companyId:'', companyName:''});\n    const [newCompanyName, setNewCompanyName] = useState('');\n\n    const [showCreateCompany, setShowCreateCompany] = useState({state:false});\n\n    const userLogin = useSelector(state => state.userLogin);\n    const { userInfo } = userLogin;\n\n    const clientAll = useSelector(state => state.clientAll);\n    const { error, loading, clients: companies, count, page, pages } = clientAll;\n\n    const clientUpdate = useSelector(state => state.clientUpdate);\n    const { error: errorUpdate, success:successUpdate } = clientUpdate;\n\n    const clientDelete = useSelector(state => state.clientDelete);\n    const { error: errorDelete, success:successDelete } = clientDelete;\n\n    const clientCreate = useSelector(state => state.clientCreate);\n    const { error: errorCreate, success:successCreate } = clientCreate;\n\n    useEffect(() => {\n\n        if (userInfo) {\n            dispatch(getAllClients(keyword, pageNumber, pageSize));\n        } else {\n            history.push('/login');\n        }\n\n    }, [dispatch, history, userInfo, pageNumber, pageSize, keyword]);\n\n    useEffect(() => {\n        if (successUpdate) {\n            dispatch(getAllClients(keyword, pageNumber, pageSize));\n        }\n        // eslint-disable-next-line\n    }, [dispatch, successUpdate]);\n\n    useEffect(() => {\n        if (successDelete) {\n            dispatch(getAllClients(keyword, pageNumber, pageSize));\n        }\n        // eslint-disable-next-line\n    }, [dispatch, successDelete]);\n\n    useEffect(() => {\n        if (successCreate) {\n            dispatch(getAllClients(keyword, pageNumber, pageSize));\n        }\n        // eslint-disable-next-line\n    }, [dispatch, successCreate]);\n\n\n    const addCompanyHandler = (e, newCompanyName, contactName, contactEmail) => {\n        // Add company function\n        e.preventDefault();\n        dispatch(createAClient([{name:newCompanyName, commercialTeam:[{contactName: contactName, contactEmail: contactEmail}]}]));\n        setShowCreateCompany({state:false});\n        setContactEmail('');\n        setContactName('');\n        setNewCompanyName('');\n\n    }\n\n    const modifyCompanyNameHandler = (e, companyId, newCompanyName) => {\n        e.preventDefault();\n        let clientToUpdate = companies.filter(x => x._id === companyId)[0];\n        clientToUpdate.name = newCompanyName;\n        dispatch(updateAClient(clientToUpdate));\n        setShowModifyName({ state: false, companyId: '', companyName: '' });\n    }\n\n    const onClickDeleteHandler = (company) => {\n        if (window.confirm(`Are you sure to delete company: ${company.name} ?`)) {\n            dispatch(deleteAClient(company._id));\n        }\n    }\n\n    const addContactHandler = (e, contactName, contactEmail, companyId) => {\n        e.preventDefault();\n\n        let contactNameConform = false;\n        let contactEmailConform = false;\n        let message = []\n\n        if (contactName) {\n            contactNameConform = true\n        } else {\n            message.push('Thanks to enter a correct Name')\n        }\n\n        const regexEmail = /^(([^<>()[]\\.,;:s@]+(.[^<>()[]\\.,;:s@]+)*)|(.+))@(([[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}])|(([a-zA-Z-0-9]+.)+[a-zA-Z]{2,}))$/;\n        if (regexEmail.test(contactEmail)) {\n            contactEmailConform = true\n        } else {\n            message.push('Thanks to enter a correct Email address')\n        }\n\n        setMessage(message);\n\n        if (contactEmailConform && contactNameConform) {\n\n            let clientToUpdate = companies.filter(x => x._id === companyId)[0];\n            clientToUpdate.commercialTeam = clientToUpdate.commercialTeam.map(x => ({contactName: x.contactName, contactEmail:x.contactEmail}));\n            clientToUpdate.commercialTeam.push({contactName:contactName, contactEmail:contactEmail});\n\n            dispatch(updateAClient(clientToUpdate));\n\n            setShowAddContact({state:false, companyId:'', companyName:''});\n            setMessage('');\n        }\n    }\n\n    const deleteContactHandler = (contactEmail, companyId) => {\n        if (window.confirm(`Are you sure to delete contact: ${contactEmail} ?`)) {\n            let clientToUpdate = companies.filter(x => (x._id === companyId))[0];\n            clientToUpdate.commercialTeam = clientToUpdate.commercialTeam.map(x => ({contactName: x.contactName, contactEmail:x.contactEmail}));\n            const newContacts = clientToUpdate.commercialTeam.filter(x => x.contactEmail !== contactEmail);\n            clientToUpdate.commercialTeam = newContacts;\n\n            dispatch(updateAClient(clientToUpdate));\n        }\n\n    }\n\n    return (\n        <DisplayChildren access='manageCompanies'>\n            {errorUpdate && <Message variant='danger'>{errorUpdate}</Message>}\n            {errorDelete && <Message variant='danger'>{errorDelete}</Message>}\n            {errorCreate && <Message variant='danger'>{errorCreate}</Message>}\n            <DropDownTitleContainer title='Manage companies' close={false}>\n                <ListGroup.Item>\n                    <Row>\n\n                        <Col xs={6} md={4}>\n                            <Button className=\"mb-3\" onClick={() => setShowCreateCompany({state:true})}>\n                                <i className=\"fas fa-plus mr-2\"></i>Add\n                            </Button>\n                        </Col>\n\n                        <Col xs={6} md={2}>\n                            <InputGroup>\n                                <FormControl\n                                    type='text'\n                                    className=\"mb-3\"\n                                    placeholder='Search company'\n                                    value={keyword && keyword}\n                                    onChange={(e) => setKeyword(e.target.value)}\n                                ></FormControl>\n                            </InputGroup>\n                        </Col>\n\n                        <Col xs={6} md={4}>\n                            <Form.Control\n                                plaintext\n                                readOnly\n                                value={count ? `${count} companies found` : '0 company found'} />\n                        </Col>\n\n                        <Col xs={6} md={2}>\n                            <InputGroup>\n                                <FormControl\n                                    as='select'\n                                    id='number-c'\n                                    className=\"mb-3\"\n                                    value={pageSize && pageSize}\n                                    onChange={(e) => setPageSize(e.target.value)}\n                                >\n                                    {[5, 10, 15, 20, 50].map(x => (\n                                        <option\n                                            key={x}\n                                            value={x}\n                                        >{x} / page</option>\n                                    ))}\n                                </FormControl>\n                            </InputGroup>\n                        </Col>\n\n                    </Row>\n\n                    {companies && companies.length === 0 ? <Message variant='information'>You have not access to these information</Message> :\n                        loading ? <Loader /> : error ? <Message variant=\"danger\">{error}</Message> : (\n\n                            <Table responsive hover striped>\n                                <thead>\n                                    <tr className='table-primary'>\n                                        <th className='align-middle text-light'>Company name</th>\n                                        <th className='align-middle text-light'>Commercial contacts</th>\n                                    </tr>\n                                </thead>\n\n                                <tbody>\n                                    {companies && companies.map((company) => (\n                                        <tr key={company._id}>\n                                            <td className='align-middle'>\n                                                <Row><Col>{company.name}</Col></Row>\n                                                <Row><Col>\n                                                    <Button\n                                                        variant='ligth'\n                                                        className=\"m-0 p-1 text-primary\"\n                                                        onClick={() => setShowModifyName({ state: true, companyId: company._id, companyName: company.name })}\n                                                    ><i className=\"fas fa-minus\"></i><i>  modify</i>\n                                                    </Button>\n                                                    <Button\n                                                        variant='ligth'\n                                                        className='m-0 p-1 btn text-danger'\n                                                        onClick={() => onClickDeleteHandler(company)}\n                                                    ><i className=\"fas fa-times\"></i><i>  Delete</i>\n                                                    </Button>\n                                                </Col></Row>\n                                            </td>\n                                            <td className='align-middle'>\n                                                <DisplayContact\n                                                    company={company}\n                                                    setShowAddContact={setShowAddContact}\n                                                    deleteContactHandler={deleteContactHandler}\n                                                />\n                                            </td>\n                                        </tr>\n                                    ))}\n                                </tbody>\n                            </Table>\n\n                        )}\n\n                    <Pagination>\n                        <Pagination.Prev\n                            onClick={() => setPageNumber(page - 1)}\n                            disabled={page === 1}\n                        />\n                        {[...Array(pages).keys()].map(x => (\n                            [0, 1, pages - 2, pages - 1].includes(x) ? (\n                                <Pagination.Item\n                                    key={x + 1}\n                                    active={x + 1 === page}\n                                    onClick={() => {\n                                        dispatch(getAllClients(keyword, x + 1, pageSize));\n                                        setPageNumber(x + 1);\n                                    }}\n                                >{x + 1}</Pagination.Item>\n                            ) : (pages > 4 && x === 2) && (\n                                <Pagination.Ellipsis key={x + 1} />\n                            )\n\n                        ))}\n                        <Pagination.Next\n                            onClick={() => setPageNumber(page + 1)}\n                            disabled={page === pages}\n                        />\n                    </Pagination>\n                </ListGroup.Item>\n            </DropDownTitleContainer>\n\n            <Modal show={showAddContact.state} onHide={() => setShowAddContact({state:false, companyId:'', companyName:\"\"})}>\n                <Modal.Header closeButton>\n                    <Modal.Title>{`New contact for: ${showAddContact.companyName}`}</Modal.Title>\n                </Modal.Header>\n\n                <Modal.Body>\n                    <Form>\n                        <Form.Group>\n                            <Form.Label>Name *</Form.Label>\n                            <Form.Control\n                                type='text'\n                                value={contactName && contactName}\n                                onChange={(e) => setContactName(e.target.value)}\n                            />\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>Email *</Form.Label>\n                            <Form.Control\n                                type='email'\n                                value={contactEmail && contactEmail}\n                                onChange={(e) => setContactEmail(e.target.value)}\n                            />\n                        </Form.Group>\n                        <Button type='submit' variant=\"primary\" onClick={(e) => addContactHandler(e, contactName, contactEmail, showAddContact.companyId)} disabled={!contactEmail || !contactName}>Create</Button>\n                    </Form>\n                    {message && <Message variant='danger'>{message}</Message>}\n                </Modal.Body>\n\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={() => setShowAddContact({state:false, companyId:'', companyName:\"\"})}>Close</Button>\n                </Modal.Footer>\n            </Modal>\n\n            <Modal show={showModifyName.state} onHide={() => setShowModifyName({state:false, companyId:'', companyName:\"\"})}>\n                <Modal.Header closeButton>\n                    <Modal.Title>{`Original name: ${showModifyName.companyName}`}</Modal.Title>\n                </Modal.Header>\n\n                <Modal.Body>\n                    <Form>\n                        <Form.Group>\n                            <Form.Label>New company name *</Form.Label>\n                            <Form.Control\n                                type='text'\n                                value={newCompanyName ? newCompanyName : showModifyName.companyName}\n                                onChange={(e) => setNewCompanyName(e.target.value)}\n                            />\n                        </Form.Group>\n                        <Button \n                            type='submit' \n                            variant=\"primary\" \n                            onClick={(e) => modifyCompanyNameHandler(e, showModifyName.companyId, newCompanyName)} \n                            disabled={!(newCompanyName && (newCompanyName !== showModifyName.companyName))}>Modify</Button>\n                    </Form>\n                </Modal.Body>\n\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={() => {\n                        setShowModifyName({ state: false, companyId: '', companyName: \"\" });\n                        setNewCompanyName('')\n                    }}>Close</Button>\n                </Modal.Footer>\n            </Modal>\n\n            <Modal show={showCreateCompany.state} onHide={() => setShowCreateCompany({state:false})}>\n                <Modal.Header closeButton>\n                    <Modal.Title>{`Create a company:`}</Modal.Title>\n                </Modal.Header>\n\n                <Modal.Body>\n                    <Form>\n                        <Form.Group>\n                            <Form.Label>New company name *</Form.Label>\n                            <Form.Control\n                                type='text'\n                                value={newCompanyName ? newCompanyName : showModifyName.companyName}\n                                onChange={(e) => setNewCompanyName(e.target.value)}\n                            />\n                        </Form.Group>\n\n                        <Form.Group>\n                            <Form.Label>First contact name</Form.Label>\n                            <Form.Control\n                                type='text'\n                                value={contactName ? contactName : ''}\n                                placeholder='Contact name'\n                                onChange={(e) => setContactName(e.target.value)}\n                            />\n                        </Form.Group>\n\n                        <Form.Group>\n                            <Form.Label>First contact email</Form.Label>\n                            <Form.Control\n                                type='email'\n                                value={contactEmail ? contactEmail : ''}\n                                placeholder='Contact email'\n                                onChange={(e) => setContactEmail(e.target.value)}\n                            />\n                        </Form.Group>\n                        \n                        <Button \n                            type='submit' \n                            variant=\"primary\" \n                            onClick={(e) => addCompanyHandler(e, newCompanyName, contactName, contactEmail)} \n                            disabled={!(newCompanyName )}>Create</Button>\n                    </Form>\n                </Modal.Body>\n\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={() => {\n                        setShowModifyName({ state: false, companyId: '', companyName: \"\" });\n                        setNewCompanyName('')\n                    }}>Close</Button>\n                </Modal.Footer>\n            </Modal>\n        </DisplayChildren>\n    )\n}\n\nconst DisplayContact = ({ company, setShowAddContact, deleteContactHandler }) => {\n\n    const [contacts] = useState(company.commercialTeam || []);\n\n    return (\n        <div>\n            {contacts.map((contact, incr) => (\n                <Row key={incr}>\n                    <Col>\n                        {`${contact.contactName} (${contact.contactEmail})`}\n                        <Button\n                            variant='ligth'\n                            className='ml-3 px-1 text-danger'\n                            onClick={() => deleteContactHandler(contact.contactEmail, company._id)}\n                        ><i className=\"fas fa-times\"></i></Button>\n                    </Col>\n                </Row>\n            ))}\n            <Row><Col className='text-left'>\n                <Button\n                    className='m-0 p-1 text-primary'\n                    variant='ligth'\n                    onClick={() => setShowAddContact({state:true, companyId:company._id, companyName:company.name})}\n                ><i className=\"fas fa-plus\"></i><i>  add a contact</i></Button>\n            </Col></Row>\n\n        </div>\n    )\n}\n\nexport default ManageCompaniesScreen\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ProgressBar from 'react-bootstrap/ProgressBar';\nimport Table from 'react-bootstrap/Table';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n//import Message from '../components/Message';\nimport Meta from '../components/Meta';\nimport { getContactsList, sendDecisionEmail } from '../actions/emailActions';\nimport Loader from '../components/Loader';\nimport { EMAIL_SEND_DECISION_RESET } from '../constants/emailConstants';\n\nconst EnvoyerMailsScreen = ({history}) => {\n\n    const dispatch = useDispatch();\n\n    const [contactList, setContactList] = useState([]);\n    const [messsagesSendSuccess, setMessagesSendSuccess] = useState(0);\n    const [messsagesSendError, setMessagesSendError] = useState(0);\n    const [totalToSend, setTotalToSend] = useState(0);\n    \n    const [massSending, setMassSending] = useState(false);\n    const [progress, setProgress] = useState(0);\n\n    const userLogin = useSelector(state => state.userLogin);\n    const { userInfo } = userLogin;\n\n    const contactsList = useSelector(state => state.contactsList);\n    const { loading, contacts } = contactsList;\n\n    const sendOneEmail = useSelector(state => state.sendOneEmail);\n    const { success, error, email } = sendOneEmail;\n\n    const sleep = (milliseconds) => {\n        const date = Date.now();\n        let currentDate = null;\n        do {\n            currentDate = Date.now();\n        } while (currentDate - date < milliseconds);\n    }\n\n    const handlerSendADecision = (email, name) => {\n        const newContactsInfo = contactList.slice();\n        for (let incr = 0 ; incr < newContactsInfo.length; incr++){\n            if(newContactsInfo[incr].email === email){\n                newContactsInfo[incr].status = 'loading'\n            }\n        }\n        setContactList(newContactsInfo);\n        dispatch(sendDecisionEmail(email, name))\n    }\n\n    const handlerSendAllDecisions = () => {\n        dispatch({ type: EMAIL_SEND_DECISION_RESET });\n        setProgress(0);\n        setMassSending(true);\n    }\n\n    useEffect(() => {\n        dispatch(getContactsList());\n    }, [dispatch]);\n\n    useEffect(() => {\n        if (contacts) {\n            setContactList(contacts.map(x => ({ ...x, status: 'not sent' })));\n            setTotalToSend(contacts.length);\n        }\n    }, [contacts]);\n\n    useEffect(() => {\n        if(massSending) {\n            if(contactList[progress].status !== 'send') {\n                //sleep(1000);\n                handlerSendADecision(contactList[progress].email, contactList[progress].name);\n            } else {\n                if(progress < contactList.length - 1){\n                    setProgress(progress+1);\n                }\n            }\n        }\n    // eslint-disable-next-line\n    },[massSending, progress]);\n\n    useEffect(() => {\n        if(success) {\n            const successEmail = email;\n            const newContactsInfo = contactList.slice();\n            for (let incr = 0; incr < newContactsInfo.length; incr++) {\n                if (newContactsInfo[incr].email === successEmail) {\n                    newContactsInfo[incr].status = 'send'\n                }\n            }\n            setContactList(newContactsInfo);\n\n            if (massSending){\n                if (progress < contactList.length - 1){\n                    setProgress(progress+1);\n                } else {\n                    setMassSending(false);\n                }\n            }\n        }\n    // eslint-disable-next-line\n    }, [success]);\n\n    useEffect(() => {\n        if(error) {\n            //console.log('error', error);\n            const errorEmail = error;\n            const newContactsInfo = contactList.slice();\n            for (let incr = 0; incr < newContactsInfo.length; incr++) {\n                if (newContactsInfo[incr].email === errorEmail) {\n                    newContactsInfo[incr].status = 'error';\n                }\n            }\n            setContactList(newContactsInfo);\n\n            if (massSending){\n                if (progress < contactList.length - 1){\n                    setProgress(progress+1);\n                } else {\n                    setMassSending(false);\n                    setProgress(0);\n                }\n            }\n        }\n    // eslint-disable-next-line\n    }, [error]);\n\n    useEffect(() => {\n        setMessagesSendSuccess(contactList.filter(x => x.status === 'send').length);\n        setMessagesSendError(contactList.filter(x => x.status === 'error').length);\n        setTotalToSend(contactList.length);\n    },[contactList, error, success]);\n\n    return (\n        <div>\n            <Meta />\n            {loading && <Loader />}\n            <Button\n                variant='primary'\n                onClick={() => history.go(-1)}\n            >Go Back</Button>\n            <Row className='align-items-center pt-3'>\n                <Col>\n                    {`${messsagesSendSuccess} messages send / ${totalToSend} - ${messsagesSendError} messages with error`}\n                </Col>\n                <Col className='text-right'>\n                    <Button\n                        variant='ligth'\n                        className='text-primary'\n                        onClick={() => handlerSendAllDecisions()}\n                    ><i className=\"fas fa-envelope\"></i> {massSending ? <Loader /> : 'Send all messages'}</Button>\n                </Col>\n            </Row>\n            <Row className='pt-3'>\n                <Col>\n                    <ProgressBar>\n                        <ProgressBar animated={massSending} now={100* messsagesSendSuccess / totalToSend} variant='primary' />\n                        <ProgressBar animated={massSending} now={100* messsagesSendError / totalToSend} variant='danger' />\n                    </ProgressBar>\n                </Col>\n            </Row>\n\n            <Row className='pt-3'>\n                <Col>\n                    <Table responsive hover striped className='mt-3'>\n                        <thead>\n                            <tr className='table-primary'>\n                                <th className='align-middle text-light text-center col-md-5'>Name</th>\n                                <th className='align-middle text-light text-center col-md-5'>Email</th>\n                                <th className='align-middle text-light text-center col-md-2'>status</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {contactList && contactList.map((contact, incr) => (\n                                <tr key={incr}>\n                                    <td className='align-middle text-center'>{contact.name ? contact.name : \"Unknown\"}</td>\n                                    <td className='align-middle text-center'>{contact.email}</td>\n                                    <td className='align-middle text-center'>\n                                        <Button\n                                            variant='ligth'\n                                            className={contact.status === 'error' ? 'text-danger' \n                                                        : contact.status === 'send' ? 'text-success'\n                                                        : 'text-primary'}\n                                            size='sm'\n                                            onClick={() => handlerSendADecision(contact.email, contact.name)}\n                                            disabled={contact.status === 'send' || massSending === true}\n                                        ><i className=\"fas fa-envelope\"></i>  \n                                            {contact.status === 'not sent' && '  send'}\n                                            {contact.status === 'loading' && <Loader />}\n                                            {contact.status === 'error' && '  Error send again'}\n                                            {contact.status === 'send' && '  sent'}\n                                        </Button>\n                                    </td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </Table>\n                </Col>\n            </Row>\n\n        </div>\n    )\n}\n\nexport default EnvoyerMailsScreen;\n","import axios from 'axios';\nimport { \n    EMAIL_CONTACTS_LIST_FAIL, \n    EMAIL_CONTACTS_LIST_REQUEST, \n    EMAIL_CONTACTS_LIST_SUCCESS, \n    EMAIL_SEND_DECISION_FAIL, \n    EMAIL_SEND_DECISION_REQUEST, \n    EMAIL_SEND_DECISION_SUCCESS\n} from '../constants/emailConstants';\n\nexport const getContactsList = () => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: EMAIL_CONTACTS_LIST_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers:{\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        const { data } = await axios.get(`/api/emails/contacts`, config);\n\n        dispatch({ type: EMAIL_CONTACTS_LIST_SUCCESS, payload: data });\n\n\n    } catch (error) {\n        dispatch({\n            type: EMAIL_CONTACTS_LIST_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\nexport const sendDecisionEmail = (email, name) => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: EMAIL_SEND_DECISION_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers:{\n                //'Content-type': 'Application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        const { data } = await axios.get(`/api/emails/decision?email=${email}&name=${name}`, config);\n\n        dispatch({ type: EMAIL_SEND_DECISION_SUCCESS, payload: data });\n\n\n    } catch (error) {\n        dispatch({\n            type: EMAIL_SEND_DECISION_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};","import React, { useState, useEffect } from 'react';\nimport { Form, Button, Row, Col, Table } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\nimport { getUserDetails, updateUserProfile } from '../actions/userActions';\nimport DisplayChildren from '../components/DisplayChildren';\nimport { getAllDeals } from '../actions/dealActions';\nimport SelectInput from '../components/SelectInput';\nimport { getAllCDM, updateDelegateConsultant } from '../actions/consultantActions';\n\n\nconst ProfileScreen = ({ history }) => {\n    const [name, setName] = useState('');\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [confirmPassword, setConfirmPassword] = useState('');\n    const [message, setMessage] = useState(null);\n    const [messageUpdate, setMessageUpdate] = useState(null);\n\n    const [delegation, setDelegation] = useState(null);\n\n    const dispatch = useDispatch();\n\n    const userDetails = useSelector((state) => state.userDetails);\n    const { loading, error, user } = userDetails;\n\n    const userLogin = useSelector((state) => state.userLogin);\n    const { userInfo } = userLogin;\n\n    const userUpdateProfil = useSelector((state) => state.userUpdateProfil);\n    const { success: successUpdate, error: errorUpdate } = userUpdateProfil;\n\n    const dealAllList = useSelector(state => state.dealAllList);\n    const { error: errorDealList, loading: loadingDealList, deals } = dealAllList;\n\n    const consultantCDMList = useSelector(state => state.consultantCDMList);\n    const { cdmList } = consultantCDMList;\n\n    const consultantDelegateUpdate = useSelector(state => state.consultantDelegateUpdate);\n    const { loading: loadingDelegate } = consultantDelegateUpdate;\n\n    useEffect(() => {\n        if (!userInfo) {\n            history.push('/login');\n        } else {\n            if (!user || !user.name) {\n                dispatch(getUserDetails(userInfo._id));\n            } else {\n                setName(user.name);\n                setEmail(user.email);\n            }\n        }\n    }, [dispatch, history, userInfo, user]);\n\n    useEffect(() => {\n        if (successUpdate) {\n            setMessageUpdate({ type: 'success', message: 'Profile updated' });\n        }\n    }, [successUpdate]);\n\n    useEffect(() => {\n        if (errorUpdate) {\n            setMessageUpdate({ type: 'danger', message: 'Profile not updated' });\n        }\n    }, [errorUpdate]);\n\n    useEffect(() => {\n        if (userInfo) {\n            const keyword = {\n                title: '',\n                contact: '',\n                company: '',\n                status: '',\n                request: '',\n                staff: '',\n                filterMy: true\n            }\n            dispatch(getAllDeals(keyword, 1, 1000, 'active'));\n        }\n    }, [dispatch, userInfo]);\n\n    useEffect(() => {\n        if(user) {\n            setDelegation(user.consultantProfil.cdmDelegation.map(x => ({id: x.cdmId, value: x.name})));\n        }\n    }, [user]);\n\n    useEffect(() => {\n        if(!cdmList) {\n            dispatch(getAllCDM(userInfo.consultantProfil.practice))\n        }\n    }, [dispatch, cdmList, userInfo]);\n\n    const submitHandlerDelegation = () => {\n        const delegationToUpdate = delegation.map(x => ({cdmId: x.id, name: x.value}))\n        dispatch(updateDelegateConsultant(user.consultantProfil._id, delegationToUpdate))\n    }\n\n    const submitHandler = (e) => {\n        const form = e.currentTarget;\n        // Verification of validity of data\n        if (form.checkValidity() === false) {\n            setMessage('Please check your information');\n        } else {\n            e.preventDefault(); // to avoid page to refresh\n            setMessage(null); // to reinitialize the message before testing\n            setMessageUpdate(null);\n\n            const strongRegex = new RegExp(\"^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])(?=.{8,})\");\n            const lowRegex = new RegExp(\"([a-zA-Z0-9!@#\\$%\\^&\\*]){1,}\");\n            \n            const applyRegex = ['production', 'poc'].includes(process.env.NODE_ENV) ? strongRegex : lowRegex;\n            //console.log(applyRegex);\n\n            if (!password || !confirmPassword) {\n                setMessage('Please enter a password');\n                return;\n            }\n            if (password.match(applyRegex)) {\n                if (!password || password !== confirmPassword) {\n                    setMessage('Passwords do not match');\n                    return;\n                } else {\n                    dispatch(updateUserProfile({ id: user._id, name, password }));\n                    return;\n                }\n            } else {\n                setMessage(`Please enter strong password: \\n\n                    - must be eight characters or longer \\n\n                    - must contain at least 1 lowercase alphabetical character \\n\n                    - must contain at least 1 uppercase alphabetical character \\n\n                    - must contain at least 1 numeric character \\n\n                    - must contain at least one special character (!@#$%^&*)`)\n                return;\n            }\n        }\n    };\n\n    return (\n        <Row>\n            <Col md={3}>\n                <h2>User Profil</h2>\n                {message && <Message variant='danger'>{message}</Message>}\n                {error && <Message variant='danger'>{error}</Message>}\n                {messageUpdate && messageUpdate.type && <Message variant={messageUpdate.type}>{messageUpdate.message}</Message>}\n                {loading && <Loader />}\n                <Form onSubmit={submitHandler}>\n                    <Form.Group controlId='name'>\n                        <Form.Label>Name</Form.Label>\n                        <Form.Control\n                            type='name'\n                            placeholder='Enter Name'\n                            value={name}\n                            onChange={(e) => setName(e.target.value)}\n                        ></Form.Control>\n                    </Form.Group>\n                    <Form.Group controlId='email'>\n                        <Form.Label>Email Adress</Form.Label>\n                        <Form.Control\n                            type='email'\n                            placeholder='Enter Email'\n                            value={email}\n                            onChange={(e) => setEmail(e.target.value)}\n                        ></Form.Control>\n                    </Form.Group>\n                    <Form.Group controlId='password'>\n                        <Form.Label>Password</Form.Label>\n                        <Form.Control\n                            type='password'\n                            placeholder='Enter password'\n                            value={password}\n                            onChange={(e) => setPassword(e.target.value)}\n                        ></Form.Control>\n                    </Form.Group>\n                    <Form.Group controlId='confirm-password'>\n                        <Form.Label>Confirm Password</Form.Label>\n                        <Form.Control\n                            type='password'\n                            placeholder='Confirm password'\n                            value={confirmPassword}\n                            onChange={(e) => setConfirmPassword(e.target.value)}\n                        ></Form.Control>\n                    </Form.Group>\n                    <Button \n                        type='submit' \n                        className='my-3'\n                        variant='primary' \n                        block\n                    >Update Password</Button>\n                    \n                    {userInfo && userInfo.consultantProfil.isCDM && (\n                        <>\n                            <h3>Delegate </h3>\n                            <SelectInput\n                                options={cdmList ? cdmList.map(cdm => ({ value: cdm._id, label: cdm.name })) : []}\n                                value={delegation ? delegation.map(x => ({ value: x.id, label: x.value })) : []}\n                                setValue={setDelegation}\n                                multi={true}\n                            //disabled={!editRequest}\n                            />\n                            <Button\n                                onClick={submitHandlerDelegation}\n                                className='my-3'\n                                variant='primary'\n                                block\n                            >{loadingDelegate ? <Loader /> : 'Update Delegations'}</Button>\n                        </>\n                    )}\n                </Form>\n            </Col>\n\n            <Col md={9}>\n                <DisplayChildren access='viewProfilDetails'>\n                    <h2>Follow my Requests</h2>\n                    <Table striped hover responsive className='table-sm mt-3'>\n                        <thead>\n                            <tr className='table-light'>\n                                <th className='align-middle text-center'>Title</th>\n                                <th className='align-middle text-center'>Client</th>\n                                <th className='align-middle text-center'>Contacts</th>\n                                <th className='align-middle text-center'>Practice</th>\n                                <th className='align-middle text-center'>Step</th>\n                                <th className='align-middle text-center'>Request status</th>\n                                <th className='align-middle text-center'>Starting date</th>\n                                <th className='align-middle text-center'>Staffing</th>\n                                <th className='align-middle text-center'>Details</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {deals && deals.map( deal => (\n                                <tr key={deal._id}>\n                                    <td className='align-middle text-center'>{deal.title}</td>\n                                    <td className='align-middle text-center'>{deal.company}</td>\n                                    <td className='align-middle text-center'>{`${deal.contacts && deal.contacts.primary && deal.contacts.primary.name} \\n(${deal.contacts && deal.contacts.secondary && deal.contacts.secondary.map(c => c.name).join(', ')})`}</td>\n                                    <td className='align-middle text-center'>{`${deal.mainPractice} \\n(${deal.othersPractices && deal.othersPractices.join(', ')})`}</td>\n                                    <td className='align-middle text-center'>{deal.status}</td>\n                                    <td className='align-middle text-center'>{deal.staffingRequest && deal.staffingRequest.requestStatus}</td>\n                                    <td className='align-middle text-center'>{deal.startDate.substring(0,10)}</td>\n                                    <td className='align-middle text-center'>{deal.staffingDecision && deal.staffingDecision.staff && deal.staffingDecision.staff.map( s => `${s.idConsultant.name} - ${s.responsability} - ${s.priority}`).join(',\\n')}</td>\n                                    <td className='align-middle text-center'>\n                                        <Button\n                                            variant='ligth'\n                                            style={{ color: 'gray' }}\n                                            onClick={() => history.push(`/staffing/${deal._id}`)}\n                                            size='md'\n                                        ><i className=\"fas fa-edit\"></i>\n                                        </Button>\n                                    </td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </Table>\n                    \n                </DisplayChildren>\n            </Col>\n\n        </Row>\n    );\n};\n\nexport default ProfileScreen;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, useHistory } from 'react-router-dom';\nimport Container from 'react-bootstrap/Container';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport LoginScreen from './screens/LoginScreen';\nimport PxxEditScreen from './screens/PxxEditScreen';\nimport ConsultantEditScreen from './screens/ConsultantEditScreen';\nimport ManageConsultantScreen from './screens/ManageConsultantScreen';\nimport ManageUsersScreen from './screens/ManageUsersScreen';\nimport UserEditScreen from './screens/UserEditScreen';\nimport RegisterScreen from './screens/RegisterScreen';\nimport DashboardScreen from './screens/DashboardScreen';\nimport StaffingEditScreen from './screens/StaffingEditScreen';\nimport ManageSkillsScreen from './screens/ManageSkillsScreen';\nimport PxxDetailsScreen from './screens/PxxDetailsScreen';\nimport ManageDealsScreen from './screens/ManageDealsScreen';\nimport DealsHistoryScreen from './screens/DealsHistoryScreen';\nimport AccessEditScreen from './screens/AccessEditScreen';\nimport ManageCompaniesScreen from './screens/ManageCompaniesScreen';\nimport EnvoyerMailsScreen from './screens/EnvoyerMailsScreen';\n\n// MSAL imports\n// import { MsalProvider } from \"@azure/msal-react\";\n// import { CustomNavigationClient } from \"./utils/NavigationClient\";\nimport ProfileScreen from './screens/ProfileScreen';\n\n\nconst App = () => {\n\n  return (\n    <Router>\n      <Header />\n      <main className='py-3'>\n        <Container>\n          <Route path='/login' component={LoginScreen} exact />\n          <Route path='/register' component={RegisterScreen} exact />\n          <Route path='/profile' component={ProfileScreen} exact />\n          <Route path='/staffing' component={StaffingEditScreen} exact />\n          <Route path='/staffing/:id' component={StaffingEditScreen} exact />\n          <Route path='/pxx' component={PxxEditScreen} exact />\n          <Route path='/pxx/:id' component={PxxEditScreen} exact />\n          <Route path='/pxxdetails/:id' component={PxxDetailsScreen} exact />\n          <Route path='/editconsultant/:id' component={ConsultantEditScreen} exact />\n          <Route path='/admin/consultants' component={ManageConsultantScreen} exact />\n          <Route path='/admin/consultants/:keyword/page/:pageNumber' component={DashboardScreen} exact />\n          <Route path='/admin/users' component={ManageUsersScreen} exact />\n          <Route path='/admin/edituser/:id' component={UserEditScreen} exact />\n          <Route path='/admin/consultant/add' component={ConsultantEditScreen} exact />\n          <Route path='/admin/skills' component={ManageSkillsScreen} exact />\n          <Route path='/admin/deals' component={ManageDealsScreen} exact />\n          <Route path='/admin/deals/history' component={DealsHistoryScreen} exact />\n          <Route path='/admin/profils' component={AccessEditScreen} exact />\n          <Route path='/admin/companies' component={ManageCompaniesScreen} exact />\n          <Route path='/admin/send' component={EnvoyerMailsScreen} exact />\n          <Route path='/' component={DashboardScreen} exact />\n        </Container>\n      </main>\n      <Footer />\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport './bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}