{"version":3,"sources":["constants/pxxConstants.js","constants/userConstants.js","constants/consultantConstants.js","constants/skillsConstants.js","constants/dealConstants.js","constants/accessConstants.js","constants/clientConstants.js","constants/taceConstants.js","constants/emailConstants.js","store.js","reducers/userReducers.js","reducers/consultantReducers.js","reducers/pxxReducers.js","reducers/skillReducers.js","reducers/dealReducer.js","reducers/accessReducers.js","reducers/clientReducers.js","reducers/taceReducer.js","reducers/emailReducers.js","actions/userActions.js","components/DisplayChildren.js","components/Header.js","components/Footer.js","components/Message.js","components/Loader.js","components/FormContainer.js","screens/LoginScreen.js","actions/pxxActions.js","components/PxxUserLine.js","components/PxxEditor.js","components/DropDownTitleContainer.js","actions/consultantActions.js","components/ConsultantsTab.js","components/Meta.js","components/ViewStaffs.js","actions/dealActions.js","components/ViewOldStaffs.js","components/Rating.js","components/SkillsDetails.js","screens/PxxEditScreen.js","screens/ConsultantEditScreen.js","components/ImportExcelFile.js","components/FlowImportWKConsultants.js","screens/ManageConsultantScreen.js","screens/ManageUsersScreen.js","actions/accessActions.js","screens/UserEditScreen.js","screens/RegisterScreen.js","components/StaffAConsultant.js","components/SelectInput.js","actions/skillActions.js","components/ConsoDispo.js","components/Tace.js","actions/taceActions.js","screens/DashboardScreen.js","actions/clientActions.js","components/SelectCompany.js","screens/StaffingEditScreen.js","screens/ManageSkillsScreen.js","components/FlowImportPxx.js","screens/PxxDetailsScreen.js","components/DealList.js","screens/ManageDealsScreen.js","screens/DealsHistoryScreen.js","screens/AccessEditScreen.js","screens/ManageCompaniesScreen.js","screens/EnvoyerMailsScreen.js","actions/emailActions.js","App.js","serviceWorker.js","index.js"],"names":["PXX_MY_TO_EDIT_REQUEST","PXX_MY_TO_EDIT_SUCCESS","PXX_MY_TO_EDIT_FAIL","PXX_MY_TO_EDIT_RESET","PXX_UPDATE_REQUEST","PXX_UPDATE_SUCCESS","PXX_UPDATE_FAIL","PXX_UPDATE_RESET","PXX_LIST_REQUEST","PXX_LIST_SUCCESS","PXX_LIST_FAIL","PXX_LIST_RESET","PXX_TACE_REQUEST","PXX_TACE_SUCCESS","PXX_TACE_FAIL","PXX_TACE_RESET","PXX_AVAILABILITIES_REQUEST","PXX_AVAILABILITIES_SUCCESS","PXX_AVAILABILITIES_FAIL","PXX_AVAILABILITIES_RESET","PXX_ALL_REQUEST","PXX_ALL_SUCCESS","PXX_ALL_FAIL","PXX_ALL_RESET","PXX_IMPORT_LINE_REQUEST","PXX_IMPORT_LINE_SUCCESS","PXX_IMPORT_LINE_FAIL","PXX_IMPORT_LINE_RESET","PXX_UPLOAD_FILE_REQUEST","PXX_UPLOAD_FILE_SUCCESS","PXX_UPLOAD_FILE_FAIL","PXX_UPLOAD_FILE_RESET","PXX_UPDATE_PXX_REQUEST","PXX_UPDATE_PXX_SUCCESS","PXX_UPDATE_PXX_FAIL","PXX_UPDATE_PXX_RESET","USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGIN_FAIL","USER_LOGOUT","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_REGISTER_FAIL","USER_REGISTER_RESET","USER_DETAILS_REQUEST","USER_DETAILS_SUCCESS","USER_DETAILS_FAIL","USER_DETAILS_RESET","USER_LIST_REQUEST","USER_LIST_SUCCESS","USER_LIST_FAIL","USER_LIST_RESET","USER_DELETE_REQUEST","USER_DELETE_SUCCESS","USER_DELETE_FAIL","USER_DELETE_RESET","USER_UPDATE_REQUEST","USER_UPDATE_SUCCESS","USER_UPDATE_FAIL","USER_UPDATE_RESET","USER_STATUS","CONSULTANTS_MY_DETAILS_REQUEST","CONSULTANTS_MY_DETAILS_SUCCESS","CONSULTANTS_MY_DETAILS_FAIL","CONSULTANTS_MY_DETAILS_FOCUS","CONSULTANTS_MY_DETAILS_RESET","CONSULTANTS_ALL_ADMIN_DETAILS_REQUEST","CONSULTANTS_ALL_ADMIN_DETAILS_SUCCESS","CONSULTANTS_ALL_ADMIN_DETAILS_FAIL","CONSULTANTS_ALL_ADMIN_DETAILS_RESET","CONSULTANTS_ALL_LEADERS_REQUEST","CONSULTANTS_ALL_LEADERS_SUCCESS","CONSULTANTS_ALL_LEADERS_FAIL","CONSULTANTS_ALL_LEADERS_RESET","CONSULTANT_MY_REQUEST","CONSULTANT_MY_SUCCESS","CONSULTANT_MY_FAIL","CONSULTANT_MY_RESET","CONSULTANT_MY_UPDATE_REQUEST","CONSULTANT_MY_UPDATE_SUCCESS","CONSULTANT_MY_UPDATE_FAIL","CONSULTANT_MY_UPDATE_RESET","CONSULTANT_CREATE_REQUEST","CONSULTANT_CREATE_SUCCESS","CONSULTANT_CREATE_FAIL","CONSULTANT_CREATE_RESET","CONSULTANT_DELETE_REQUEST","CONSULTANT_DELETE_SUCCESS","CONSULTANT_DELETE_FAIL","CONSULTANT_DELETE_RESET","CONSULTANT_CDM_LIST_REQUEST","CONSULTANT_CDM_LIST_SUCCESS","CONSULTANT_CDM_LIST_FAIL","CONSULTANT_CDM_LIST_RESET","CONSULTANT_PRACTICE_LIST_REQUEST","CONSULTANT_PRACTICE_LIST_SUCCESS","CONSULTANT_PRACTICE_LIST_FAIL","CONSULTANT_PRACTICE_LIST_RESET","CONSULTANT_UPDATE_COMMENT_REQUEST","CONSULTANT_UPDATE_COMMENT_SUCCESS","CONSULTANT_UPDATE_COMMENT_FAIL","CONSULTANT_UPDATE_COMMENT_RESET","CONSULTANT_CDM_REQUEST","CONSULTANT_CDM_SUCCESS","CONSULTANT_CDM_FAIL","CONSULTANT_CDM_RESET","CONSULTANT_SKILLS_REQUEST","CONSULTANT_SKILLS_SUCCESS","CONSULTANT_SKILLS_FAIL","CONSULTANT_SKILLS_RESET","CONSULTANT_ALL_SKILLS_REQUEST","CONSULTANT_ALL_SKILLS_SUCCESS","CONSULTANT_ALL_SKILLS_FAIL","CONSULTANT_ALL_SKILLS_RESET","CONSULTANT_ALL_STAFF_REQUEST","CONSULTANT_ALL_STAFF_SUCCESS","CONSULTANT_ALL_STAFF_FAIL","CONSULTANT_ALL_STAFF_RESET","CONSULTANT_ADD_SKILL_REQUEST","CONSULTANT_ADD_SKILL_SUCCESS","CONSULTANT_ADD_SKILL_FAIL","CONSULTANT_ADD_SKILL_RESET","CONSULTANT_DELETE_SKILL_REQUEST","CONSULTANT_DELETE_SKILL_SUCCESS","CONSULTANT_DELETE_SKILL_FAIL","CONSULTANT_DELETE_SKILL_RESET","CONSULTANT_UPDATE_SKILL_REQUEST","CONSULTANT_UPDATE_SKILL_SUCCESS","CONSULTANT_UPDATE_SKILL_FAIL","CONSULTANT_UPDATE_SKILL_RESET","CONSULTANT_MASS_IMPORT_REQUEST","CONSULTANT_MASS_IMPORT_SUCCESS","CONSULTANT_MASS_IMPORT_FAIL","CONSULTANT_MASS_IMPORT_RESET","CONSULTANT_UPLOAD_WK_REQUEST","CONSULTANT_UPLOAD_WK_SUCCESS","CONSULTANT_UPLOAD_WK_FAIL","CONSULTANT_UPLOAD_WK_RESET","CONSULTANT_UPDATE_WK_REQUEST","CONSULTANT_UPDATE_WK_SUCCESS","CONSULTANT_UPDATE_WK_FAIL","CONSULTANT_UPDATE_WK_RESET","CONSULTANT_GRADE","SKILL_LIST_REQUEST","SKILL_LIST_SUCCESS","SKILL_LIST_FAIL","SKILL_LIST_RESET","SKILL_DELETE_REQUEST","SKILL_DELETE_SUCCESS","SKILL_DELETE_FAIL","SKILL_DELETE_RESET","SKILL_CREATE_REQUEST","SKILL_CREATE_SUCCESS","SKILL_CREATE_FAIL","SKILL_CREATE_RESET","DEAL_CREATE_REQUEST","DEAL_CREATE_SUCCESS","DEAL_CREATE_FAIL","DEAL_CREATE_RESET","DEAL_UPDATE_REQUEST","DEAL_UPDATE_SUCCESS","DEAL_UPDATE_FAIL","DEAL_UPDATE_RESET","DEAL_ALL_LIST_REQUEST","DEAL_ALL_LIST_SUCCESS","DEAL_ALL_LIST_FAIL","DEAL_ALL_LIST_RESET","DEAL_DELETE_REQUEST","DEAL_DELETE_SUCCESS","DEAL_DELETE_FAIL","DEAL_DELETE_RESET","DEAL_EDIT_REQUEST","DEAL_EDIT_SUCCESS","DEAL_EDIT_FAIL","DEAL_EDIT_RESET","DEAL_OLD_REQUEST","DEAL_OLD_SUCCESS","DEAL_OLD_FAIL","DEAL_OLD_RESET","DEAL_MASS_IMPORT_REQUEST","DEAL_MASS_IMPORT_SUCCESS","DEAL_MASS_IMPORT_FAIL","DEAL_MASS_IMPORT_RESET","REQUEST_STATUS","name","staff","priority","TYPE_BUSINESS","DEAL_STATUS","display","DEAL_PROBABILITY","ACCESS_LIST_REQUEST","ACCESS_LIST_SUCCESS","ACCESS_LIST_FAIL","ACCESS_LIST_RESET","ACCESS_UPDATE_FRONTACCESS_REQUEST","ACCESS_UPDATE_FRONTACCESS_SUCCESS","ACCESS_UPDATE_FRONTACCESS_FAIL","ACCESS_UPDATE_FRONTACCESS_RESET","ACCESS_MODES","ACCESS_DATAS","CLIENT_ALL_REQUEST","CLIENT_ALL_SUCCESS","CLIENT_ALL_FAIL","CLIENT_ALL_RESET","CLIENT_CREATE_REQUEST","CLIENT_CREATE_SUCCESS","CLIENT_CREATE_FAIL","CLIENT_CREATE_RESET","CLIENT_UPDATE_REQUEST","CLIENT_UPDATE_SUCCESS","CLIENT_UPDATE_FAIL","CLIENT_UPDATE_RESET","CLIENT_DELETE_REQUEST","CLIENT_DELETE_SUCCESS","CLIENT_DELETE_FAIL","CLIENT_DELETE_RESET","TACE_CREATE_REQUEST","TACE_CREATE_SUCCESS","TACE_CREATE_FAIL","TACE_CREATE_RESET","EMAIL_CONTACTS_LIST_REQUEST","EMAIL_CONTACTS_LIST_SUCCESS","EMAIL_CONTACTS_LIST_FAIL","EMAIL_CONTACTS_LIST_RESET","EMAIL_SEND_DECISION_REQUEST","EMAIL_SEND_DECISION_SUCCESS","EMAIL_SEND_DECISION_FAIL","EMAIL_SEND_DECISION_RESET","reducer","combineReducers","userRegister","state","action","type","loading","userInfo","payload","error","userLogin","userList","users","pages","page","count","userDetails","user","userUpdate","success","userDelete","consultantUpdateComment","consultantsMyAdminList","consultantsMyAdmin","consultants","consultantsMyList","focus","consultantsMy","consultantMy","consultant","consultantMyUpdate","consultantCreate","consultantCreated","consultantDelete","consultantCDMList","cdmList","consultantPracticeList","practiceList","consultantSkills","skills","consultantAllSkills","consultantAllStaffs","staffings","consultantAddSkill","consultantDeleteSkill","consultantUpdateSkill","consultantGetCdm","cdm","consultantsAllLeaders","leaderslist","consultantsMassImport","consultantUploadWk","path","consultantUpdateWk","message","pxxList","pxxs","pxxMonthInformation","pxxUserList","pxxAllList","pxxMyToEdit","pxx","pxxUpdate","pxxTACE","tace","pxxAvailabilities","availabilities","updatePxx","pxxImportLine","updatedLine","pxxUploadFile","skillList","skillDelete","skillCreate","dealCreate","createId","dealAllList","deals","dealDelete","dealEdit","deal","dealUpdate","dealOld","oldDeals","dealsImportMass","datas","accessList","access","accessFrontUpdate","clientAll","clients","clientCreate","clientUpdate","clientDelete","createTace","taceData","contactsList","contacts","sendOneEmail","email","initialState","localStorage","getItem","JSON","parse","middleware","thunk","store","createStore","composeWithDevTools","applyMiddleware","listUsers","practice","keyword","pageNumber","pageSize","dispatch","getState","a","config","headers","Authorization","token","axios","get","data","response","DisplayChildren","children","useSelector","grantedAccess","rule","profil","frontAccess","filter","x","id","length","mode","Header","useDispatch","Navbar","bg","variant","expand","collapseOnSelect","fixed","Container","to","Brand","Toggle","aria-controls","Collapse","Nav","className","Link","NavDropdown","title","Item","Divider","onClick","clear","Footer","Row","Col","Message","Alert","defaultProps","Loader","Spinner","animation","role","stype","width","height","margin","FormContainer","xs","md","LoginScreen","location","history","useState","setEmail","password","setPassword","setMessage","redirect","search","split","useEffect","status","push","Form","onSubmit","e","currentTarget","checkValidity","preventDefault","post","setItem","stringify","login","Group","controlId","Label","Control","placeholder","value","onChange","target","Button","Table","hover","striped","getAvailabilities","start","end","experienceStart","experienceEnd","searchMode","searchExperience","toString","getAllPxx","month","keywork","PxxUserLine","Number","prodDay","prodDayComponent","setProdDayComponent","notProdDay","notProdDayComponent","setNotProdDayComponent","leavingDay","leavingDayComponent","setLeavingDayComponent","availableDay","availableDayComponent","setAvailableDayComponent","workingDay","hasChange","setHasChange","firstDayOfCurrentMonth","Date","now","setDate","toISOString","substring","editable","firstDay","_id","put","InputGroup","FormControl","min","max","step","disabled","match","PxxEditor","consultantFocus","searchDate","navigationMonthHandler","numberOfMonth","loadingPxx","errorPxx","loadingUpdate","errorUpdate","consultantId","setUTCDate","getMyConsultantPxxToEdit","ListGroup","style","map","line","key","size","block","DropDownTitleContainer","close","hide","setHide","setConsultantFocus","getMyConsultant","getAllPractice","getAllMyAdminConsultants","getConsultantSkills","quality","getAllConsultantSkills","ConsultantsTab","focusActive","responsive","matricule","valued","arrival","leaving","comment","onClickHandler","Meta","Helmet","ViewStaffs","displayedDeal","onNavigate","getAllStaffs","company","mainPractice","probability","startDate","requestStatus","updateDeal","dealId","getAllDeals","contact","request","filterMy","ViewOldStaffs","getOldDeals","staffingRequest","Rating","setValue","text","color","valueList","Array","Math","floor","fill","val","SkillDisplayLine","skill","setUpdate","successConsultantUpdateSkill","successConsultantDeleteSkill","level","setLevel","waitingValidationLevel","setWaitingValidationLevel","handlerDeleteConsultantSkill","skillId","delete","plaintext","readOnly","newLevel","consultantUpdateASkillLevel","SkillsDetails","skillCategory","setSkillCategory","setSkillId","skillLevel","setSkillLevel","skillCategoryList","setSkillCategoryList","qualityOrdonned","setQualityOrdonned","update","skillsAll","loadingConsultantAddSkill","successConsultantAddSkill","errorConsultantAddSkill","ordonnedSkills","orderSkills","categoryList","category","Set","incr","handleAddSkill","consultantAddASkill","as","required","OverlayTrigger","placement","overlay","Tooltip","description","PxxEditScreen","commentText","setCommentText","loadingConsultantsMyList","errorConsultantsMyList","setSearchDate","navigationConsultantHandler","updateCommentHandler","updateComment","consultantProfil","htmlFor","rows","navigationDate","setMonth","getMonth","ConsultantEditScreen","setName","setMatricule","setPractice","grade","setGrade","setCdm","setArrival","setValued","setLeaving","seniority","setSeniority","isCDM","setIsCDM","partialTime","setPartialTime","startPartialTime","setStartPartialTime","endPartialTime","setEndPartialTime","valueMonday","setValueMonday","valueTuesday","setValueTuesday","valueWednesday","setValueWednesday","valueThursday","setValueThursday","valueFriday","setValueFriday","errorMessage","setErrorMessage","successMessage","setSuccessMessage","valueEditType","params","successUpdate","loadingCreate","errorCreate","successCreate","errorCDM","errorPractice","getAllCDM","cdmId","isPartialTime","week","num","worked","go","updatedUser","Error","updateMyConsultant","createConsultant","changeValueDateHandler","Check","label","checked","ImportExcelFile","setImportData","sheets","fileName","setFileName","readFileHandler","file","files","reader","FileReader","onload","result","workBook","XLSX","jsonData","SheetNames","wsName","ws","Sheets","sheet_to_json","readAsBinaryString","File","custom","data-browse","Input","FlowImportWKConsultants","props","setStep","loadingUpload","errorUpload","Modal","aria-labelledby","centered","closeButton","Title","Body","href","rel","Image","src","rounded","fluid","FormData","append","updateConsultantWk","onHide","ExcelFile","ReactExport","ExcelSheet","ExcelColumn","ManageConsultantScreen","setPageSize","setPageNumber","setKeyword","exportExcel","setExportExcel","importData","showImportConsultant","setShowImportConsultant","successConsultantDelete","loadingMassImport","errorMassImport","successMassImport","exportExcelData","onClickDeleteHandler","window","confirm","show","element","Pagination","Prev","keys","includes","active","Ellipsis","Next","ManageUsersScreen","console","log","createdAt","userId","getAllAccess","UserEditScreen","linkConsultant","setLinkConsultant","setProfil","setStatus","errorMyAdmin","updateUser","Append","newProfil","updateProfilHandler","RegisterScreen","confirmPassword","setConfirmPassword","register","variat","StaffAConsultant","loadingData","addStaffHandler","responsability","sdResponsability","setSdResponsability","sdPriority","setSdPriority","information","sdInformation","setSdInformation","SelectInput","options","multi","closeMenuOnSelect","isMulti","valuesSelected","isDisabled","getAllSkills","ConsoDispoUnit","monthData","grades","addStaff","setFocus","formatName","fullName","separateName","word","indice1","toUpperCase","join","Card","consultantData","yVal","sm","date","background","onFocus","ConsoDispo","searchExperienceStart","setSearchExperienceStart","searchExperienceEnd","setSearchExperienceEnd","searchSkillsList","setSearchSkillsList","setSearchMode","modalWindowShow","setModalWindowShow","sdConsultant","setSdConsultant","loadingAvailabilities","errorAvailabilities","moreConsultantDetails","Tabs","defaultActiveKey","Tab","eventKey","xVal","Tace","setTarget","bid","setBid","editRequest","setEditRequest","missingFTEToBid","setMissingFTEToBid","missingFTEToTarget","setMissingFTEToTarget","totalProdDay","totalProdDayToBid","totalNotProdDay","totalAvailableDay","totalProdDayToTarget","today","lastMonthDay","setUTCMonth","getUTCMonth","todayToEnd","Text","totalTACE","toFixed","totalLeaving","totalETP","DashboardScreen","startDefault","endDefault","setStart","setEnd","loadingTACE","errorTACE","getTace","endDate","replace","getAllClients","createAClient","updateAClient","SelectCompany","setCompany","companies","isClearable","commercialTeam","StaffingEditScreen","successEdit","dealToEdit","setTitle","client","setClient","setType","setProbability","setDescription","proposalDate","setProposalDate","presentationDate","setPresentationDate","setStartDate","setMainPractice","othersPractices","setOthersPractices","setLocation","srInstruction","setSrInstruction","srStatus","setSrStatus","srRessources","setSrRessources","comments","setComments","duration","setDuration","othersContacts","setOthersContacts","newComment","setNewComment","sdInstructions","sdStatus","setSdStatus","sdStaff","setSdStaff","wonDate","setWonDate","loadingSdConsultantData","setLoadingSdConsultantData","dealChange","setDealChange","leader","setLeader","coLeaders","setCoLeaders","companyMessage","setCompanyMessage","searchValue","getAllLeaders","instructions","ressources","staffingDecision","staffingStatus","primary","secondary","coLeader","idConsultant","tampon","addCommentHandler","newComments","slice","sender","sort","b","createDeal","prob","multiple","selectedList","selectBox","document","getElementById","i","selected","updateOthersPractices","trigger","Popover","Content","removeStaffHandler","updatedAt","onKeyUp","index","textAlign","marginBottom","deleteCommentHandler","ManageSkillsScreen","skillName","setSkillName","skillDescription","setSkillDescription","loadingCreateSkill","errorCreateSkill","successCreateSkill","loadingSkills","skillsList","FlowImportPxx","pxxUploadFiles","webkitdirectory","directory","updatePxxFiles","PxxDetailsScreen","monthId","progress","setProgress","massImport","setMassImport","errorImportMessage","setErrorImportMessage","messsagesImportSuccess","setMessagesImportSuccess","messsagesImportError","setMessagesImportError","totalToImport","setTotalToImport","showImportPxx","setShowImportPxx","loadingImportLine","errorImportLine","successImportLine","handlerImportData","lineToImport","newImportData","MATRICULE","updatedMatricule","newErrorMessage","ProgressBar","animated","DealList","searchTitle","setSearchTitle","searchContact","setSearchContact","searchCompany","setSearchCompany","searchDealStatus","setSearchDealStatus","searchRequestStatus","setSearchRequestStatus","searchStaff","setSearchStaff","colSpan","ManageDealsScreen","dealStatus","myDeals","searchMyDeals","setSearchMyDeals","updateFilter","setUpdateFilter","notUpdateFilter","setNotUpdateFilter","newDealFilter","setNewDealFilter","wonDealFilter","setWonDealFilter","changePeriod","setChangePeriod","tabsFilter","defaultTabs","setDefaultTabs","dataFiltered","setDataFiltered","errorDelete","successDelete","loadingImportMass","successImportData","updateTime","getUTCDate","notUpdateTime","newDealTime","wonDealTime","filteredData","dealsFiltered","needStaff","toDisplay","param","setParam","dealsImportInMass","activeKey","onSelect","k","DealsHistoryScreen","getFullYear","ProfilDescription","categories","categorizedFrontAccess","filterdData","frontAccessRules","categorizeFrontAccess","categoryRules","accessRules","profilId","CategoryAccess","modes","item","frontAccessItem","AccessLineEdit","setLabel","setMode","setData","loadingState","setLoadingState","updateprofilFrontAcessRule","AccessEditScreen","errorFrontUpdate","DisplayContact","setShowAddContact","deleteContactHandler","contactName","contactEmail","companyId","companyName","ManageCompaniesScreen","showAddContact","setContactName","setContactEmail","showModifyName","setShowModifyName","newCompanyName","setNewCompanyName","showCreateCompany","setShowCreateCompany","clientsId","clientToUpdate","newContacts","contactNameConform","contactEmailConform","test","addContactHandler","modifyCompanyNameHandler","addCompanyHandler","EnvoyerMailsScreen","contactList","setContactList","messsagesSendSuccess","setMessagesSendSuccess","messsagesSendError","setMessagesSendError","totalToSend","setTotalToSend","massSending","setMassSending","handlerSendADecision","newContactsInfo","sendDecisionEmail","successEmail","errorEmail","App","component","exact","Boolean","hostname","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.c22837ae.chunk.js","sourcesContent":["export const PXX_MY_TO_EDIT_REQUEST = 'PXX_MY_TO_EDIT_REQUEST';\nexport const PXX_MY_TO_EDIT_SUCCESS = 'PXX_MY_TO_EDIT_SUCCESS';\nexport const PXX_MY_TO_EDIT_FAIL = 'PXX_MY_TO_EDIT_FAIL';\nexport const PXX_MY_TO_EDIT_RESET = 'PXX_MY_TO_EDIT_RESET';\n\nexport const PXX_UPDATE_REQUEST = 'PXX_UPDATE_REQUEST';\nexport const PXX_UPDATE_SUCCESS = 'PXX_UPDATE_SUCCESS';\nexport const PXX_UPDATE_FAIL = 'PXX_UPDATE_FAIL';\nexport const PXX_UPDATE_RESET = 'PXX_UPDATE_RESET';\n\nexport const PXX_LIST_REQUEST = 'PXX_LIST_REQUEST';\nexport const PXX_LIST_SUCCESS = 'PXX_LIST_SUCCESS';\nexport const PXX_LIST_FAIL = 'PXX_LIST_FAIL';\nexport const PXX_LIST_RESET = 'PXX_LIST_RESET';\n\nexport const PXX_USER_LIST_REQUEST = 'PXX_USER_LIST_REQUEST';\nexport const PXX_USER_LIST_SUCCESS = 'PXX_USER_LIST_SUCCESS';\nexport const PXX_USER_LIST_FAIL = 'PXX_USER_LIST_FAIL';\nexport const PXX_USER_LIST_RESET = 'PXX_USER_LIST_RESET';\n\nexport const PXX_TACE_REQUEST = 'PXX_TACE_REQUEST';\nexport const PXX_TACE_SUCCESS = 'PXX_TACE_SUCCESS';\nexport const PXX_TACE_FAIL = 'PXX_TACE_FAIL';\nexport const PXX_TACE_RESET = 'PXX_TACE_RESET';\n\nexport const PXX_AVAILABILITIES_REQUEST = 'PXX_AVAILABILITIES_REQUEST';\nexport const PXX_AVAILABILITIES_SUCCESS = 'PXX_AVAILABILITIES_SUCCESS';\nexport const PXX_AVAILABILITIES_FAIL = 'PXX_AVAILABILITIES_FAIL';\nexport const PXX_AVAILABILITIES_RESET = 'PXX_AVAILABILITIES_RESET';\n\nexport const PXX_ALL_REQUEST = 'PXX_ALL_REQUEST';\nexport const PXX_ALL_SUCCESS = 'PXX_ALL_SUCCESS';\nexport const PXX_ALL_FAIL = 'PXX_ALL_FAIL';\nexport const PXX_ALL_RESET = 'PXX_ALL_RESET';\n\nexport const PXX_IMPORT_MASS_REQUEST = 'PXX_IMPORT_MASS_REQUEST';\nexport const PXX_IMPORT_MASS_SUCCESS = 'PXX_IMPORT_MASS_SUCCESS';\nexport const PXX_IMPORT_MASS_FAIL = 'PXX_IMPORT_MASS_FAIL';\nexport const PXX_IMPORT_MASS_RESET = 'PXX_IMPORT_MASS_RESET';\n\nexport const PXX_IMPORT_LINE_REQUEST = 'PXX_IMPORT_LINE_REQUEST';\nexport const PXX_IMPORT_LINE_SUCCESS = 'PXX_IMPORT_LINE_SUCCESS';\nexport const PXX_IMPORT_LINE_FAIL = 'PXX_IMPORT_LINE_FAIL';\nexport const PXX_IMPORT_LINE_RESET = 'PXX_IMPORT_LINE_RESET';\n\nexport const PXX_UPLOAD_FILE_REQUEST = 'PXX_UPLOAD_FILE_REQUEST';\nexport const PXX_UPLOAD_FILE_SUCCESS = 'PXX_UPLOAD_FILE_SUCCESS';\nexport const PXX_UPLOAD_FILE_FAIL = 'PXX_UPLOAD_FILE_FAIL';\nexport const PXX_UPLOAD_FILE_RESET = 'PXX_UPLOAD_FILE_RESET';\n\nexport const PXX_UPDATE_PXX_REQUEST = 'PXX_UPDATE_PXX_REQUEST';\nexport const PXX_UPDATE_PXX_SUCCESS = 'PXX_UPDATE_PXX_SUCCESS';\nexport const PXX_UPDATE_PXX_FAIL = 'PXX_UPDATE_PXX_FAIL';\nexport const PXX_UPDATE_PXX_RESET = 'PXX_UPDATE_PXX_RESET';","export const USER_LOGIN_REQUEST = 'USER_LOGIN_REQUEST';\nexport const USER_LOGIN_SUCCESS = 'USER_LOGIN_SUCCESS';\nexport const USER_LOGIN_FAIL = 'USER_LOGIN_FAIL';\nexport const USER_LOGOUT = 'USER_LOGOUT';\n\nexport const USER_REGISTER_REQUEST = 'USER_REGISTER_REQUEST';\nexport const USER_REGISTER_SUCCESS = 'USER_REGISTER_SUCCESS';\nexport const USER_REGISTER_FAIL = 'USER_REGISTER_FAIL';\nexport const USER_REGISTER_RESET = 'USER_REGISTER_RESET';\n\n\nexport const USER_DETAILS_REQUEST = 'USER_DETAILS_REQUEST';\nexport const USER_DETAILS_SUCCESS = 'USER_DETAILS_SUCCESS';\nexport const USER_DETAILS_FAIL = 'USER_DETAILS_FAIL';\nexport const USER_DETAILS_RESET = 'USER_DETAILS_RESET';\n\nexport const USER_LIST_REQUEST = 'USER_LIST_REQUEST';\nexport const USER_LIST_SUCCESS = 'USER_LIST_SUCCESS';\nexport const USER_LIST_FAIL = 'USER_LIST_FAIL';\nexport const USER_LIST_RESET = 'USER_LIST_RESET';\n\nexport const USER_DELETE_REQUEST = 'USER_DELETE_REQUEST';\nexport const USER_DELETE_SUCCESS = 'USER_DELETE_SUCCESS';\nexport const USER_DELETE_FAIL = 'USER_DELETE_FAIL';\nexport const USER_DELETE_RESET = 'USER_DELETE_RESET';\n\nexport const USER_UPDATE_REQUEST = 'USER_UPDATE_REQUEST';\nexport const USER_UPDATE_SUCCESS = 'USER_UPDATE_SUCCESS';\nexport const USER_UPDATE_FAIL = 'USER_UPDATE_FAIL';\nexport const USER_UPDATE_RESET = 'USER_UPDATE_RESET';\n\nexport const USER_STATUS = ['Waiting approval', 'Validated', 'Refused'];","export const CONSULTANTS_MY_DETAILS_REQUEST = 'CONSULTANTS_MY_DETAILS_REQUEST';\nexport const CONSULTANTS_MY_DETAILS_SUCCESS = 'CONSULTANTS_MY_DETAILS_SUCCESS';\nexport const CONSULTANTS_MY_DETAILS_FAIL = 'CONSULTANTS_MY_DETAILS_FAIL';\nexport const CONSULTANTS_MY_DETAILS_FOCUS = 'CONSULTANTS_MY_DETAILS_FOCUS';\nexport const CONSULTANTS_MY_DETAILS_RESET = 'CONSULTANTS_MY_DETAILS_RESET';\n\nexport const CONSULTANTS_ALL_ADMIN_DETAILS_REQUEST = 'CONSULTANTS_ALL_ADMIN_DETAILS_REQUEST';\nexport const CONSULTANTS_ALL_ADMIN_DETAILS_SUCCESS = 'CONSULTANTS_ALL_ADMIN_DETAILS_SUCCESS';\nexport const CONSULTANTS_ALL_ADMIN_DETAILS_FAIL = 'CONSULTANTS_ALL_ADMIN_DETAILS_FAIL';\nexport const CONSULTANTS_ALL_ADMIN_DETAILS_FOCUS = 'CONSULTANTS_ALL_ADMIN_DETAILS_FOCUS';\nexport const CONSULTANTS_ALL_ADMIN_DETAILS_RESET = 'CONSULTANTS_ALL_ADMIN_DETAILS_RESET';\n\nexport const CONSULTANTS_ALL_LEADERS_REQUEST = 'CONSULTANTS_ALL_LEADERS_REQUEST';\nexport const CONSULTANTS_ALL_LEADERS_SUCCESS = 'CONSULTANTS_ALL_LEADERS_SUCCESS';\nexport const CONSULTANTS_ALL_LEADERS_FAIL = 'CONSULTANTS_ALL_LEADERS_FAIL';\nexport const CONSULTANTS_ALL_LEADERS_FOCUS = 'CONSULTANTS_ALL_LEADERS_FOCUS';\nexport const CONSULTANTS_ALL_LEADERS_RESET = 'CONSULTANTS_ALL_LEADERS_RESET';\n\nexport const CONSULTANT_MY_REQUEST = 'CONSULTANT_MY_REQUEST';\nexport const CONSULTANT_MY_SUCCESS = 'CONSULTANT_MY_SUCCESS';\nexport const CONSULTANT_MY_FAIL = 'CONSULTANT_MY_FAIL';\nexport const CONSULTANT_MY_RESET = 'CONSULTANT_MY_RESET';\n\nexport const CONSULTANT_MY_UPDATE_REQUEST = 'CONSULTANT_MY_UPDATE_REQUEST';\nexport const CONSULTANT_MY_UPDATE_SUCCESS = 'CONSULTANT_MY_UPDATE_SUCCESS';\nexport const CONSULTANT_MY_UPDATE_FAIL = 'CONSULTANT_MY_UPDATE_FAIL';\nexport const CONSULTANT_MY_UPDATE_RESET = 'CONSULTANT_MY_UPDATE_RESET';\n\nexport const CONSULTANT_CREATE_REQUEST = 'CONSULTANT_CREATE_REQUEST';\nexport const CONSULTANT_CREATE_SUCCESS = 'CONSULTANT_CREATE_SUCCESS';\nexport const CONSULTANT_CREATE_FAIL = 'CONSULTANT_CREATE_FAIL';\nexport const CONSULTANT_CREATE_RESET = 'CONSULTANT_CREATE_RESET';\n\nexport const CONSULTANT_DELETE_REQUEST = 'CONSULTANT_DELETE_REQUEST';\nexport const CONSULTANT_DELETE_SUCCESS = 'CONSULTANT_DELETE_SUCCESS';\nexport const CONSULTANT_DELETE_FAIL = 'CONSULTANT_DELETE_FAIL';\nexport const CONSULTANT_DELETE_RESET = 'CONSULTANT_DELETE_RESET';\n\nexport const CONSULTANT_CDM_LIST_REQUEST = 'CONSULTANT_CDM_LIST_REQUEST';\nexport const CONSULTANT_CDM_LIST_SUCCESS = 'CONSULTANT_CDM_LIST_SUCCESS';\nexport const CONSULTANT_CDM_LIST_FAIL = 'CONSULTANT_CDM_LIST_FAIL';\nexport const CONSULTANT_CDM_LIST_RESET = 'CONSULTANT_CDM_LIST_RESET';\n\nexport const CONSULTANT_PRACTICE_LIST_REQUEST = 'CONSULTANT_PRACTICE_LIST_REQUEST';\nexport const CONSULTANT_PRACTICE_LIST_SUCCESS = 'CONSULTANT_PRACTICE_LIST_SUCCESS';\nexport const CONSULTANT_PRACTICE_LIST_FAIL = 'CONSULTANT_PRACTICE_LIST_FAIL';\nexport const CONSULTANT_PRACTICE_LIST_RESET = 'CONSULTANT_PRACTICE_LIST_RESET';\n\nexport const CONSULTANT_UPDATE_COMMENT_REQUEST = 'CONSULTANT_UPDATE_COMMENT_REQUEST';\nexport const CONSULTANT_UPDATE_COMMENT_SUCCESS = 'CONSULTANT_UPDATE_COMMENT_SUCCESS';\nexport const CONSULTANT_UPDATE_COMMENT_FAIL = 'CONSULTANT_UPDATE_COMMENT_FAIL';\nexport const CONSULTANT_UPDATE_COMMENT_RESET = 'CONSULTANT_UPDATE_COMMENT_RESET';\n\nexport const CONSULTANT_CDM_REQUEST = 'CONSULTANT_CDM_REQUEST';\nexport const CONSULTANT_CDM_SUCCESS = 'CONSULTANT_CDM_SUCCESS';\nexport const CONSULTANT_CDM_FAIL = 'CONSULTANT_CDM_FAIL';\nexport const CONSULTANT_CDM_RESET = 'CONSULTANT_CDM_RESET';\n\nexport const CONSULTANT_SKILLS_REQUEST = 'CONSULTANT_SKILLS_REQUEST';\nexport const CONSULTANT_SKILLS_SUCCESS = 'CONSULTANT_SKILLS_SUCCESS';\nexport const CONSULTANT_SKILLS_FAIL = 'CONSULTANT_SKILLS_FAIL';\nexport const CONSULTANT_SKILLS_RESET = 'CONSULTANT_SKILLS_RESET';\n\nexport const CONSULTANT_ALL_SKILLS_REQUEST = 'CONSULTANT_ALL_SKILLS_REQUEST';\nexport const CONSULTANT_ALL_SKILLS_SUCCESS = 'CONSULTANT_ALL_SKILLS_SUCCESS';\nexport const CONSULTANT_ALL_SKILLS_FAIL = 'CONSULTANT_ALL_SKILLS_FAIL';\nexport const CONSULTANT_ALL_SKILLS_RESET = 'CONSULTANT_ALL_SKILLS_RESET';\n\nexport const CONSULTANT_ALL_STAFF_REQUEST = 'CONSULTANT_ALL_STAFF_REQUEST';\nexport const CONSULTANT_ALL_STAFF_SUCCESS = 'CONSULTANT_ALL_STAFF_SUCCESS';\nexport const CONSULTANT_ALL_STAFF_FAIL = 'CONSULTANT_ALL_STAFF_FAIL';\nexport const CONSULTANT_ALL_STAFF_RESET = 'CONSULTANT_ALL_STAFF_RESET';\n\nexport const CONSULTANT_ADD_SKILL_REQUEST = 'CONSULTANT_ADD_SKILL_REQUEST';\nexport const CONSULTANT_ADD_SKILL_SUCCESS = 'CONSULTANT_ADD_SKILL_SUCCESS';\nexport const CONSULTANT_ADD_SKILL_FAIL = 'CONSULTANT_ADD_SKILL_FAIL';\nexport const CONSULTANT_ADD_SKILL_RESET = 'CONSULTANT_ADD_SKILL_RESET';\n\nexport const CONSULTANT_DELETE_SKILL_REQUEST = 'CONSULTANT_DELETE_SKILL_REQUEST';\nexport const CONSULTANT_DELETE_SKILL_SUCCESS = 'CONSULTANT_DELETE_SKILL_SUCCESS';\nexport const CONSULTANT_DELETE_SKILL_FAIL = 'CONSULTANT_DELETE_SKILL_FAIL';\nexport const CONSULTANT_DELETE_SKILL_RESET = 'CONSULTANT_DELETE_SKILL_RESET';\n\nexport const CONSULTANT_UPDATE_SKILL_REQUEST = 'CONSULTANT_UPDATE_SKILL_REQUEST';\nexport const CONSULTANT_UPDATE_SKILL_SUCCESS = 'CONSULTANT_UPDATE_SKILL_SUCCESS';\nexport const CONSULTANT_UPDATE_SKILL_FAIL = 'CONSULTANT_UPDATE_SKILL_FAIL';\nexport const CONSULTANT_UPDATE_SKILL_RESET = 'CONSULTANT_UPDATE_SKILL_RESET';\n\nexport const CONSULTANT_MASS_IMPORT_REQUEST = 'CONSULTANT_MASS_IMPORT_REQUEST';\nexport const CONSULTANT_MASS_IMPORT_SUCCESS = 'CONSULTANT_MASS_IMPORT_SUCCESS';\nexport const CONSULTANT_MASS_IMPORT_FAIL = 'CONSULTANT_MASS_IMPORT_FAIL';\nexport const CONSULTANT_MASS_IMPORT_RESET = 'CONSULTANT_MASS_IMPORT_RESET';\n\nexport const CONSULTANT_UPLOAD_WK_REQUEST = 'CONSULTANT_UPLOAD_WK_REQUEST';\nexport const CONSULTANT_UPLOAD_WK_SUCCESS = 'CONSULTANT_UPLOAD_WK_SUCCESS';\nexport const CONSULTANT_UPLOAD_WK_FAIL = 'CONSULTANT_UPLOAD_WK_FAIL';\nexport const CONSULTANT_UPLOAD_WK_RESET = 'CONSULTANT_UPLOAD_WK_RESET';\n\nexport const CONSULTANT_UPDATE_WK_REQUEST = 'CONSULTANT_UPDATE_WK_REQUEST';\nexport const CONSULTANT_UPDATE_WK_SUCCESS = 'CONSULTANT_UPDATE_WK_SUCCESS';\nexport const CONSULTANT_UPDATE_WK_FAIL = 'CONSULTANT_UPDATE_WK_FAIL';\nexport const CONSULTANT_UPDATE_WK_RESET = 'CONSULTANT_UPDATE_WK_RESET';\n\nexport const CONSULTANT_GRADE = ['Intern', 'Analyst', 'Consultant', 'Senior consultant', 'Manager', 'Senior manager', 'Director', 'Partner', 'Unknown', 'Commercial', 'Research'];","export const SKILL_LIST_REQUEST = 'SKILL_LIST_REQUEST';\nexport const SKILL_LIST_SUCCESS = 'SKILL_LIST_SUCCESS';\nexport const SKILL_LIST_FAIL = 'SKILL_LIST_FAIL';\nexport const SKILL_LIST_RESET = 'SKILL_LIST_RESET';\n\nexport const SKILL_DELETE_REQUEST = 'SKILL_DELETE_REQUEST';\nexport const SKILL_DELETE_SUCCESS = 'SKILL_DELETE_SUCCESS';\nexport const SKILL_DELETE_FAIL = 'SKILL_DELETE_FAIL';\nexport const SKILL_DELETE_RESET = 'SKILL_DELETE_RESET';\n\nexport const SKILL_CREATE_REQUEST = 'SKILL_CREATE_REQUEST';\nexport const SKILL_CREATE_SUCCESS = 'SKILL_CREATE_SUCCESS';\nexport const SKILL_CREATE_FAIL = 'SKILL_CREATE_FAIL';\nexport const SKILL_CREATE_RESET = 'SKILL_CREATE_RESET';","export const DEAL_CREATE_REQUEST = 'DEAL_CREATE_REQUEST';\nexport const DEAL_CREATE_SUCCESS = 'DEAL_CREATE_SUCCESS';\nexport const DEAL_CREATE_FAIL = 'DEAL_CREATE_FAIL';\nexport const DEAL_CREATE_RESET = 'DEAL_CREATE_RESET';\n\nexport const DEAL_UPDATE_REQUEST = 'DEAL_UPDATE_REQUEST';\nexport const DEAL_UPDATE_SUCCESS = 'DEAL_UPDATE_SUCCESS';\nexport const DEAL_UPDATE_FAIL = 'DEAL_UPDATE_FAIL';\nexport const DEAL_UPDATE_RESET = 'DEAL_UPDATE_RESET';\n\nexport const DEAL_ALL_LIST_REQUEST = 'DEAL_ALL_LIST_REQUEST';\nexport const DEAL_ALL_LIST_SUCCESS = 'DEAL_ALL_LIST_SUCCESS';\nexport const DEAL_ALL_LIST_FAIL = 'DEAL_ALL_LIST_FAIL';\nexport const DEAL_ALL_LIST_RESET = 'DEAL_ALL_LIST_RESET';\n\nexport const DEAL_DELETE_REQUEST = 'DEAL_DELETE_REQUEST';\nexport const DEAL_DELETE_SUCCESS = 'DEAL_DELETE_SUCCESS';\nexport const DEAL_DELETE_FAIL = 'DEAL_DELETE_FAIL';\nexport const DEAL_DELETE_RESET = 'DEAL_DELETE_RESET';\n\nexport const DEAL_EDIT_REQUEST = 'DEAL_EDIT_REQUEST';\nexport const DEAL_EDIT_SUCCESS = 'DEAL_EDIT_SUCCESS';\nexport const DEAL_EDIT_FAIL = 'DEAL_EDIT_FAIL';\nexport const DEAL_EDIT_RESET = 'DEAL_EDIT_RESET';\n\nexport const DEAL_OLD_REQUEST = 'DEAL_OLD_REQUEST';\nexport const DEAL_OLD_SUCCESS = 'DEAL_OLD_SUCCESS';\nexport const DEAL_OLD_FAIL = 'DEAL_OLD_FAIL';\nexport const DEAL_OLD_RESET = 'DEAL_OLD_RESET';\n\nexport const DEAL_MASS_IMPORT_REQUEST = 'DEAL_MASS_IMPORT_REQUEST';\nexport const DEAL_MASS_IMPORT_SUCCESS = 'DEAL_MASS_IMPORT_SUCCESS';\nexport const DEAL_MASS_IMPORT_FAIL = 'DEAL_MASS_IMPORT_FAIL';\nexport const DEAL_MASS_IMPORT_RESET = 'DEAL_MASS_IMPORT_RESET';\n\nexport const REQUEST_STATUS = [\n    {name: 'Identify Leader', staff: true, priority: 10},\n    {name: 'Identify Staff', staff: true, priority: 7},\n    {name: 'Staff to validate by leader', staff: false, priority: 5},\n    {name: 'Staff validated by leader', staff: false, priority: 0},\n    {name: 'Staff validated by client', staff: false, priority: 0},\n    {name: 'You can staff elsewhere', staff: false, priority: 0},\n    {name: 'Close', staff: false, priority: 0}\n];\n\nexport const TYPE_BUSINESS = [\n    {name: 'New business', priority: 10},\n    {name: 'New position', priority: 5},\n    {name: 'Replacement', priority: 1}\n];\n\nexport const DEAL_STATUS = [\n    {name: 'Lead', priority: 0, display: 'onTrack'},\n    {name: 'Proposal to send', priority: 5, display: 'onTrack'},\n    {name: 'Proposal sent', priority: 5, display: 'onTrack'},\n    {name: 'Won', priority: 10, display: 'win'},\n    {name: 'Abandoned', priority: 0, display: 'lost'},\n    {name: 'Lost', priority: 0, display: 'lots'},\n];\n\nexport const DEAL_PROBABILITY = [\n    {name: 10, priority: 1},\n    {name: 30, priority: 3},\n    {name: 50, priority: 5},\n    {name: 70, priority: 7},\n    {name: 100, priority: 10},\n];","export const ACCESS_LIST_REQUEST = 'ACCESS_LIST_REQUEST';\nexport const ACCESS_LIST_SUCCESS = 'ACCESS_LIST_SUCCESS';\nexport const ACCESS_LIST_FAIL = 'ACCESS_LIST_FAIL';\nexport const ACCESS_LIST_RESET = 'ACCESS_LIST_RESET';\n\nexport const ACCESS_UPDATE_FRONTACCESS_REQUEST = 'ACCESS_UPDATE_FRONTACCESS_REQUEST';\nexport const ACCESS_UPDATE_FRONTACCESS_SUCCESS = 'ACCESS_UPDATE_FRONTACCESS_SUCCESS';\nexport const ACCESS_UPDATE_FRONTACCESS_FAIL = 'ACCESS_UPDATE_FRONTACCESS_FAIL';\nexport const ACCESS_UPDATE_FRONTACCESS_RESET = 'ACCESS_UPDATE_FRONTACCESS_RESET';\n\nexport const ACCESS_MODES = ['no', 'yes', 'read', 'write'];\nexport const ACCESS_DATAS = ['my', 'team', 'department', 'domain', 'all'];","export const CLIENT_ALL_REQUEST = 'CLIENT_ALL_REQUEST';\nexport const CLIENT_ALL_SUCCESS = 'CLIENT_ALL_SUCCESS';\nexport const CLIENT_ALL_FAIL = 'CLIENT_ALL_FAIL';\nexport const CLIENT_ALL_RESET = 'CLIENT_ALL_RESET';\n\nexport const CLIENT_CREATE_REQUEST = 'CLIENT_CREATE_REQUEST';\nexport const CLIENT_CREATE_SUCCESS = 'CLIENT_CREATE_SUCCESS';\nexport const CLIENT_CREATE_FAIL = 'CLIENT_CREATE_FAIL';\nexport const CLIENT_CREATE_RESET = 'CLIENT_CREATE_RESET';\n\nexport const CLIENT_UPDATE_REQUEST = 'CLIENT_UPDATE_REQUEST';\nexport const CLIENT_UPDATE_SUCCESS = 'CLIENT_UPDATE_SUCCESS';\nexport const CLIENT_UPDATE_FAIL = 'CLIENT_UPDATE_FAIL';\nexport const CLIENT_UPDATE_RESET = 'CLIENT_UPDATE_RESET';\n\nexport const CLIENT_DELETE_REQUEST = 'CLIENT_DELETE_REQUEST';\nexport const CLIENT_DELETE_SUCCESS = 'CLIENT_DELETE_SUCCESS';\nexport const CLIENT_DELETE_FAIL = 'CLIENT_DELETE_FAIL';\nexport const CLIENT_DELETE_RESET = 'CLIENT_DELETE_RESET';","export const TACE_CREATE_REQUEST = 'TACE_CREATE_REQUEST';\nexport const TACE_CREATE_SUCCESS = 'TACE_CREATE_SUCCESS';\nexport const TACE_CREATE_FAIL = 'TACE_CREATE_FAIL';\nexport const TACE_CREATE_RESET = 'TACE_CREATE_RESET';","export const EMAIL_CONTACTS_LIST_REQUEST = 'EMAIL_CONTACTS_LIST_REQUEST';\nexport const EMAIL_CONTACTS_LIST_SUCCESS = 'EMAIL_CONTACTS_LIST_SUCCESS';\nexport const EMAIL_CONTACTS_LIST_FAIL = 'EMAIL_CONTACTS_LIST_FAIL';\nexport const EMAIL_CONTACTS_LIST_RESET = 'EMAIL_CONTACTS_LIST_RESET';\n\nexport const EMAIL_SEND_DECISION_REQUEST = 'EMAIL_SEND_DECISION_REQUEST';\nexport const EMAIL_SEND_DECISION_SUCCESS = 'EMAIL_SEND_DECISION_SUCCESS';\nexport const EMAIL_SEND_DECISION_FAIL = 'EMAIL_SEND_DECISION_FAIL';\nexport const EMAIL_SEND_DECISION_RESET = 'EMAIL_SEND_DECISION_RESET';","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { pxxAvailabilitiesReducer, pxxListReducer, pxxAllListReducer, pxxTACEReducer, pxxUpdateReducer, pxxMyToEditReducer, pxxImportLineReducer, pxxUploadFileReducer, updatePxxReducer } from './reducers/pxxReducers';\nimport { userLoginReducer, userListReducer, userDeleteReducer, userDetailsReducer, userUpdateReducer, userRegisterReducer } from './reducers/userReducers';\nimport { \n    consultantMyReducer, \n    consultantsMyListReducer, \n    consultantMyUpdateReducer, \n    consultantsMyAdminListReducer,\n    consultantCreateReducer,\n    consultantCDMListReducer,\n    consultantPracticeListReducer,\n    consultantDeleteReducer,\n    consultantUpdateCommentReducer,\n    consultantAllSkillsReducer,\n    consultantAddSkillReducer,\n    consultantDeleteSkillReducer,\n    consultantUpdateSkillReducer,\n    consultantAllStaffsReducer,\n    consultantSkillsReducer,\n    consultantGetCDMReducer,\n    consultantsAllLeadersReducer,\n    consultantsMassImportReducer,\n    consultantUploadWkReducer,\n    consultantUpdateWkReducer\n } from './reducers/consultantReducers';\n//import {  } from './reducers/pxxReducers';\nimport { skillCreateReducer, skillDelteReducer, skillListReducer } from './reducers/skillReducers'\nimport { dealAllListReducer, dealCreateReducer, dealDeleteReducer, dealEditeReducer, dealOldReducer, dealsImportMassReducer, dealUpdateReducer } from './reducers/dealReducer';\nimport { accessFrontUpdateReducer, accessListReducer } from './reducers/accessReducers';\nimport { clientAllReducer, clientCreateReducer, clientUpdateReducer, clientDeleteReducer } from './reducers/clientReducers';\nimport { createTaceReducer } from './reducers/taceReducer';\nimport { contactsListReducer, sendOneEmailReducer } from './reducers/emailReducers';\n\nexport const reducer = combineReducers({\n    userRegister: userRegisterReducer,\n    userLogin: userLoginReducer,\n    userList: userListReducer,\n    userDetails: userDetailsReducer,\n    userUpdate: userUpdateReducer,\n    userDelete: userDeleteReducer,\n    consultantUpdateComment: consultantUpdateCommentReducer,\n    consultantsMyAdminList: consultantsMyAdminListReducer,\n    consultantsMyList: consultantsMyListReducer,\n    consultantMy: consultantMyReducer,\n    consultantMyUpdate: consultantMyUpdateReducer,\n    consultantCreate: consultantCreateReducer,\n    consultantDelete: consultantDeleteReducer,\n    consultantCDMList: consultantCDMListReducer,\n    consultantPracticeList: consultantPracticeListReducer,\n    //consultantAllAccess: consultantAllAccessReducer,\n    consultantSkills: consultantSkillsReducer,\n    consultantAllSkills: consultantAllSkillsReducer,\n    consultantAllStaffs: consultantAllStaffsReducer,\n    consultantAddSkill: consultantAddSkillReducer,\n    consultantDeleteSkill: consultantDeleteSkillReducer,\n    consultantUpdateSkill: consultantUpdateSkillReducer,\n    consultantGetCdm: consultantGetCDMReducer,\n    consultantsAllLeaders: consultantsAllLeadersReducer,\n    consultantsMassImport: consultantsMassImportReducer,\n    consultantUploadWk: consultantUploadWkReducer,\n    consultantUpdateWk: consultantUpdateWkReducer,\n    pxxList: pxxListReducer,\n    pxxAllList: pxxAllListReducer,\n    pxxMyToEdit: pxxMyToEditReducer,\n    pxxUpdate: pxxUpdateReducer,\n    pxxTACE: pxxTACEReducer,\n    pxxAvailabilities: pxxAvailabilitiesReducer,\n    updatePxx: updatePxxReducer,\n    //pxxImportMass: pxxImportMassReducer,\n    pxxImportLine: pxxImportLineReducer,\n    pxxUploadFile: pxxUploadFileReducer,\n    skillList: skillListReducer,\n    skillDelete: skillDelteReducer,\n    skillCreate: skillCreateReducer,\n    dealCreate: dealCreateReducer,\n    dealAllList: dealAllListReducer,\n    dealDelete: dealDeleteReducer,\n    dealEdit: dealEditeReducer,\n    dealUpdate: dealUpdateReducer,\n    dealOld: dealOldReducer,\n    dealsImportMass: dealsImportMassReducer,\n    accessList: accessListReducer,\n    accessFrontUpdate: accessFrontUpdateReducer,\n    clientAll: clientAllReducer,\n    clientCreate: clientCreateReducer,\n    clientUpdate: clientUpdateReducer,\n    clientDelete: clientDeleteReducer,\n    createTace: createTaceReducer,\n    contactsList: contactsListReducer,\n    sendOneEmail: sendOneEmailReducer\n});\n\n// space for store on local\nconst userItemsFromStorage = localStorage.getItem('userInfo') ? JSON.parse(localStorage.getItem('userInfo')) : null;\n\nconst initialState = {\n    userLogin: {userInfo: userItemsFromStorage}\n};\n\nconst middleware = [thunk];\n\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(...middleware)));\n\nexport default store;","import { USER_LOGIN_FAIL, \n    USER_LOGIN_REQUEST, \n    USER_LOGIN_SUCCESS, \n    USER_LOGOUT, \n    USER_REGISTER_REQUEST, \n    USER_REGISTER_SUCCESS,\n    USER_REGISTER_FAIL,\n    USER_REGISTER_RESET,\n    USER_DETAILS_FAIL,\n    USER_DETAILS_SUCCESS,\n    USER_DETAILS_REQUEST, \n    USER_DETAILS_RESET,\n    //USER_UPDATE_PROFILE_REQUEST,\n    //USER_UPDATE_PROFILE_SUCCESS,\n    //USER_UPDATE_PROFILE_FAIL,\n    //USER_UPDATE_PROFILE_RESET,\n    USER_LIST_REQUEST,\n    USER_LIST_SUCCESS,\n    USER_LIST_FAIL,\n    USER_LIST_RESET,\n    USER_DELETE_REQUEST,\n    USER_DELETE_SUCCESS,\n    USER_DELETE_FAIL,\n    USER_DELETE_RESET,\n    USER_UPDATE_REQUEST,\n    USER_UPDATE_SUCCESS,\n    USER_UPDATE_RESET,\n    USER_UPDATE_FAIL\n} from \"../constants/userConstants\";\n\nexport const userLoginReducer = (state = {}, action) => {\n    switch (action.type) {\n        case USER_LOGIN_REQUEST:\n            return { loading: true };\n        case USER_LOGIN_SUCCESS:\n            return { loading: false, userInfo: action.payload };\n        case USER_LOGIN_FAIL:\n            return { loading: false, error: action.payload };\n        case USER_LOGOUT:\n            return {};\n        default:\n            return state;\n    }\n};\n\nexport const userRegisterReducer = (state = {}, action) => {\n    switch (action.type) {\n        case USER_REGISTER_REQUEST:\n            return { loading: true };\n        case USER_REGISTER_SUCCESS:\n            return { loading: false, userInfo: action.payload };\n        case USER_REGISTER_FAIL:\n            return { loading: false, error: action.payload };\n        case USER_REGISTER_RESET:\n            return {};\n        default:\n            return state;\n    }\n};\n\nexport const userDetailsReducer = (state = {}, action) => {\n    switch (action.type) {\n        case USER_DETAILS_REQUEST:\n            return { loading: true };\n        case USER_DETAILS_SUCCESS:\n            return { loading: false, user: action.payload };\n        case USER_DETAILS_FAIL:\n            return { loading: false, error: action.payload };\n        case USER_DETAILS_RESET:\n            return {}\n        default:\n            return state;\n    }\n};\n\n/*\nexport const userUpdateProfileReducer = (state = { }, action) => {\n    switch (action.type) {\n        case USER_UPDATE_PROFILE_REQUEST:\n            return { loading: true };\n        case USER_UPDATE_PROFILE_SUCCESS:\n            //return { loading: false, success: true, userInfo: action.payload };\n            return { loading: false, userInfo: action.payload };\n        case USER_UPDATE_PROFILE_FAIL:\n            return { loading: false, error: action.payload };\n        case USER_UPDATE_PROFILE_RESET:\n            return { };\n        default:\n            return state;\n    }\n};\n*/\n\nexport const userListReducer = (state = {}, action) => {\n    switch (action.type) {\n        case USER_LIST_REQUEST:\n            return { loading: true };\n        case USER_LIST_SUCCESS:\n            return { \n                loading: false, \n                users: action.payload.users,\n                pages: action.payload.pages,\n                page: action.payload.page,\n                count: action.payload.count \n            };\n        case USER_LIST_FAIL:\n            return { loading: false, error: action.payload };\n        case USER_LIST_RESET:\n            return { };\n        default:\n            return state;\n    }\n};\n\n\nexport const userDeleteReducer = (state = { }, action) => {\n    switch (action.type) {\n        case USER_DELETE_REQUEST:\n            return { loading: true };\n        case USER_DELETE_SUCCESS:\n            return { loading: false, success: true };\n        case USER_DELETE_FAIL:\n            return { loading: false, error: action.payload };\n        case USER_DELETE_RESET:\n            return { };\n        default:\n            return state;\n    }\n};\n\n\nexport const userUpdateReducer = (state = {}, action) => {\n    switch (action.type) {\n        case USER_UPDATE_REQUEST:\n            return { loading: true };\n        case USER_UPDATE_SUCCESS:\n            return { loading: false, success: true };\n        case USER_UPDATE_FAIL:\n            return { loading: false, error: action.payload };\n        case USER_UPDATE_RESET:\n            return {}\n        default:\n            return state;\n    }\n};","import {\n    CONSULTANTS_MY_DETAILS_REQUEST,\n    CONSULTANTS_MY_DETAILS_SUCCESS,\n    CONSULTANTS_MY_DETAILS_FAIL,\n    CONSULTANTS_MY_DETAILS_FOCUS,\n    CONSULTANTS_MY_DETAILS_RESET,\n    CONSULTANT_MY_REQUEST,\n    CONSULTANT_MY_SUCCESS,\n    CONSULTANT_MY_FAIL,\n    CONSULTANT_MY_RESET,\n    CONSULTANT_MY_UPDATE_REQUEST,\n    CONSULTANT_MY_UPDATE_SUCCESS,\n    CONSULTANT_MY_UPDATE_FAIL,\n    CONSULTANT_MY_UPDATE_RESET,\n    CONSULTANTS_ALL_ADMIN_DETAILS_REQUEST,\n    CONSULTANTS_ALL_ADMIN_DETAILS_SUCCESS,\n    CONSULTANTS_ALL_ADMIN_DETAILS_FAIL,\n    CONSULTANTS_ALL_ADMIN_DETAILS_RESET,\n    CONSULTANT_CREATE_REQUEST,\n    CONSULTANT_CREATE_SUCCESS,\n    CONSULTANT_CREATE_FAIL,\n    CONSULTANT_CREATE_RESET,\n    CONSULTANT_CDM_LIST_REQUEST,\n    CONSULTANT_CDM_LIST_SUCCESS,\n    CONSULTANT_CDM_LIST_FAIL,\n    CONSULTANT_CDM_LIST_RESET,\n    CONSULTANT_PRACTICE_LIST_REQUEST,\n    CONSULTANT_PRACTICE_LIST_SUCCESS,\n    CONSULTANT_PRACTICE_LIST_FAIL,\n    CONSULTANT_PRACTICE_LIST_RESET,\n    CONSULTANT_DELETE_REQUEST,\n    CONSULTANT_DELETE_SUCCESS,\n    CONSULTANT_DELETE_FAIL,\n    CONSULTANT_DELETE_RESET,\n    CONSULTANT_UPDATE_COMMENT_REQUEST,\n    CONSULTANT_UPDATE_COMMENT_SUCCESS,\n    CONSULTANT_UPDATE_COMMENT_FAIL,\n    CONSULTANT_UPDATE_COMMENT_RESET,\n    //CONSULTANT_ALL_ACCESS_REQUEST,\n    //CONSULTANT_ALL_ACCESS_SUCCESS,\n    //CONSULTANT_ALL_ACCESS_FAIL,\n    //CONSULTANT_ALL_ACCESS_RESET,\n    CONSULTANT_ALL_SKILLS_REQUEST,\n    CONSULTANT_ALL_SKILLS_SUCCESS,\n    CONSULTANT_ALL_SKILLS_FAIL,\n    CONSULTANT_ALL_SKILLS_RESET,\n    CONSULTANT_ADD_SKILL_REQUEST,\n    CONSULTANT_ADD_SKILL_SUCCESS,\n    CONSULTANT_ADD_SKILL_FAIL,\n    CONSULTANT_ADD_SKILL_RESET,\n    CONSULTANT_DELETE_SKILL_REQUEST,\n    CONSULTANT_DELETE_SKILL_SUCCESS,\n    CONSULTANT_DELETE_SKILL_FAIL,\n    CONSULTANT_DELETE_SKILL_RESET,\n    CONSULTANT_UPDATE_SKILL_REQUEST,\n    CONSULTANT_UPDATE_SKILL_SUCCESS,\n    CONSULTANT_UPDATE_SKILL_FAIL,\n    CONSULTANT_UPDATE_SKILL_RESET,\n    CONSULTANT_ALL_STAFF_REQUEST,\n    CONSULTANT_ALL_STAFF_SUCCESS,\n    CONSULTANT_ALL_STAFF_FAIL,\n    CONSULTANT_ALL_STAFF_RESET,\n    CONSULTANT_SKILLS_REQUEST,\n    CONSULTANT_SKILLS_SUCCESS,\n    CONSULTANT_SKILLS_FAIL,\n    CONSULTANT_SKILLS_RESET,\n    CONSULTANT_CDM_REQUEST,\n    CONSULTANT_CDM_SUCCESS,\n    CONSULTANT_CDM_FAIL,\n    CONSULTANT_CDM_RESET,\n    CONSULTANTS_ALL_LEADERS_REQUEST,\n    CONSULTANTS_ALL_LEADERS_SUCCESS,\n    CONSULTANTS_ALL_LEADERS_FAIL,\n    CONSULTANTS_ALL_LEADERS_RESET,\n    CONSULTANT_MASS_IMPORT_REQUEST,\n    CONSULTANT_MASS_IMPORT_SUCCESS,\n    CONSULTANT_MASS_IMPORT_FAIL,\n    CONSULTANT_MASS_IMPORT_RESET,\n    CONSULTANT_UPLOAD_WK_REQUEST,\n    CONSULTANT_UPLOAD_WK_SUCCESS,\n    CONSULTANT_UPLOAD_WK_FAIL,\n    CONSULTANT_UPLOAD_WK_RESET,\n    CONSULTANT_UPDATE_WK_REQUEST,\n    CONSULTANT_UPDATE_WK_SUCCESS,\n    CONSULTANT_UPDATE_WK_FAIL,\n    CONSULTANT_UPDATE_WK_RESET\n} from '../constants/consultantConstants';\n\nexport const consultantsMyListReducer = (state = {focus: 0}, action) => {\n    switch (action.type) {\n        case CONSULTANTS_MY_DETAILS_REQUEST:\n            return { ...state, loading: true };\n        case CONSULTANTS_MY_DETAILS_SUCCESS:\n            return { ...state, loading: false, consultantsMy: action.payload };\n        case CONSULTANTS_MY_DETAILS_FAIL:\n            return { ...state, loading: false, error: action.payload };\n        case CONSULTANTS_MY_DETAILS_FOCUS:\n            return { ...state, focus: action.payload }\n        case CONSULTANTS_MY_DETAILS_RESET:\n            return { focus: 0 }\n        default:\n            return state;\n    }\n};\n\n/*\nexport const consultantsMyAdminListReducer = (state = {\n    loading: true, \n    consultantsMyAdmin: [\n        {\n            name: '',\n            matricule: '',\n            arrival: '',\n            leaving: '',\n            seriority: '',\n            comment: '',\n            practice: ''\n        }],\n    focus: 0\n}, action) => {\n    switch (action.type) {\n        case CONSULTANTS_ALL_ADMIN_DETAILS_REQUEST:\n            return { ...state, loading: true };\n        case CONSULTANTS_ALL_ADMIN_DETAILS_SUCCESS:\n            return { ...state, loading: false, consultantsMyAdmin: action.payload };\n        case CONSULTANTS_ALL_ADMIN_DETAILS_FAIL:\n            return { ...state, loading: false, error: action.payload };\n        case CONSULTANTS_ALL_ADMIN_DETAILS_FOCUS:\n            return { ...state, focus: action.payload }\n        case CONSULTANTS_ALL_ADMIN_DETAILS_RESET:\n            return { loading: true, consultantsMyAdmin: [\n                                {\n                                    name: '',\n                                    matricule: '',\n                                    arrival: '',\n                                    leaving: '',\n                                    seriority: '',\n                                    comment: '',\n                                    practice: ''\n                                }], focus: 0 }\n        default:\n            return state;\n    }\n};\n*/\n/*\nexport const consultantMyReducer = (state = { consultant: {} }, action) => {\n    switch (action.type) {\n        case CONSULTANT_MY_REQUEST:\n            return { ...state, loading: true };\n        case CONSULTANT_MY_SUCCESS:\n            return { loading: false, consultant: action.payload };\n        case CONSULTANT_MY_FAIL:\n            return { loading: false, error: action.payload };\n        case CONSULTANT_MY_RESET:\n            return { consultant: {} }\n        default:\n            return state;\n    }\n};\n*/\n\nexport const consultantMyReducer = (state = {}, action) => {\n    switch (action.type) {\n        case CONSULTANT_MY_REQUEST:\n            return { loading: true };\n        case CONSULTANT_MY_SUCCESS:\n            return { loading: false, consultant: action.payload };\n        case CONSULTANT_MY_FAIL:\n            return { loading: false, error: action.payload };\n        case CONSULTANT_MY_RESET:\n            return {}\n        default:\n            return state;\n    }\n};\n\nexport const consultantMyUpdateReducer = (state = {}, action) => {\n    switch (action.type) {\n        case CONSULTANT_MY_UPDATE_REQUEST:\n            return { loading: true };\n        case CONSULTANT_MY_UPDATE_SUCCESS:\n            return { loading: false, success: true };\n        case CONSULTANT_MY_UPDATE_FAIL:\n            return { loading: false, error: action.payload };\n        case CONSULTANT_MY_UPDATE_RESET:\n            return { }\n        default:\n            return state;\n    }\n};\n\nexport const consultantCreateReducer = (state = {}, action) => {\n    switch (action.type) {\n        case CONSULTANT_CREATE_REQUEST:\n            return { loading: true };\n        case CONSULTANT_CREATE_SUCCESS:\n            return { loading: false, success: true, consultantCreated: action.payload };\n        case CONSULTANT_CREATE_FAIL:\n            return { loading: false, error: action.payload };\n        case CONSULTANT_CREATE_RESET:\n            return { }\n        default:\n            return state;\n    }\n};\n\nexport const consultantDeleteReducer = (state = {}, action) => {\n    switch (action.type) {\n        case CONSULTANT_DELETE_REQUEST:\n            return { loading: true };\n        case CONSULTANT_DELETE_SUCCESS:\n            return { loading: false, success: true };\n        case CONSULTANT_DELETE_FAIL:\n            return { loading: false, error: action.payload };\n        case CONSULTANT_DELETE_RESET:\n            return { }\n        default:\n            return state;\n    }\n};\n\nexport const consultantCDMListReducer = (state = {}, action) => {\n    switch (action.type) {\n        case CONSULTANT_CDM_LIST_REQUEST:\n            return { loading: true };\n        case CONSULTANT_CDM_LIST_SUCCESS:\n            return { loading: false, cdmList: action.payload };\n        case CONSULTANT_CDM_LIST_FAIL:\n            return { loading: false, error: action.payload };\n        case CONSULTANT_CDM_LIST_RESET:\n            return {}\n        default:\n            return state;\n    }\n};\n\nexport const consultantPracticeListReducer = (state = {}, action) => {\n    switch (action.type) {\n        case CONSULTANT_PRACTICE_LIST_REQUEST:\n            return { loading: true };\n        case CONSULTANT_PRACTICE_LIST_SUCCESS:\n            return { loading: false, practiceList: action.payload };\n        case CONSULTANT_PRACTICE_LIST_FAIL:\n            return { loading: false, error: action.payload };\n        case CONSULTANT_PRACTICE_LIST_RESET:\n            return {}\n        default:\n            return state;\n    }\n};\n\nexport const consultantUpdateCommentReducer = (state = { }, action) => {\n    switch (action.type) {\n        case CONSULTANT_UPDATE_COMMENT_REQUEST:\n            return { loading: true };\n        case CONSULTANT_UPDATE_COMMENT_SUCCESS:\n            return { loading: false, success: true };\n        case CONSULTANT_UPDATE_COMMENT_FAIL:\n            return { loading: false, error: action.payload };\n        case CONSULTANT_UPDATE_COMMENT_RESET:\n            return {}\n        default:\n            return state;\n    }\n};\n\nexport const consultantsMyAdminListReducer = (state = {}, action) => {\n    switch (action.type) {\n        case CONSULTANTS_ALL_ADMIN_DETAILS_REQUEST:\n            return { loading: true };\n        case CONSULTANTS_ALL_ADMIN_DETAILS_SUCCESS:\n            return { \n                loading: false, \n                consultantsMyAdmin: action.payload.consultants,\n                pages: action.payload.pages,\n                page: action.payload.page,\n                count: action.payload.count\n            };\n        case CONSULTANTS_ALL_ADMIN_DETAILS_FAIL:\n            return { loading: false, error: action.payload };\n        case CONSULTANTS_ALL_ADMIN_DETAILS_RESET:\n            return {}\n        default:\n            return state;\n    }\n};\n\nexport const consultantsAllLeadersReducer = (state = {}, action) => {\n    switch (action.type) {\n        case CONSULTANTS_ALL_LEADERS_REQUEST:\n            return { loading: true };\n        case CONSULTANTS_ALL_LEADERS_SUCCESS:\n            return { loading: false, leaderslist: action.payload };\n        case CONSULTANTS_ALL_LEADERS_FAIL:\n            return { loading: false, error: action.payload };\n        case CONSULTANTS_ALL_LEADERS_RESET:\n            return {}\n        default:\n            return state;\n    }\n};\n\nexport const consultantGetCDMReducer = (state = { }, action) => {\n    switch (action.type) {\n        case CONSULTANT_CDM_REQUEST:\n            return { loading: true };\n        case CONSULTANT_CDM_SUCCESS:\n            return { loading: false, success: true, cdm: action.payload };\n        case CONSULTANT_CDM_FAIL:\n            return { loading: false, error: action.payload };\n        case CONSULTANT_CDM_RESET:\n            return {}\n        default:\n            return state;\n    }\n};\n\nexport const consultantSkillsReducer = (state = {}, action) => {\n    switch (action.type) {\n        case CONSULTANT_SKILLS_REQUEST:\n            return { loading: true };\n        case CONSULTANT_SKILLS_SUCCESS:\n            return { loading: false, skills: action.payload };\n        case CONSULTANT_SKILLS_FAIL:\n            return { loading: false, error: action.payload };\n        case CONSULTANT_SKILLS_RESET:\n            return {}\n        default:\n            return state;\n    }\n};\n\nexport const consultantAllSkillsReducer = (state = {}, action) => {\n    switch (action.type) {\n        case CONSULTANT_ALL_SKILLS_REQUEST:\n            return { loading: true };\n        case CONSULTANT_ALL_SKILLS_SUCCESS:\n            return { loading: false, skills: action.payload };\n        case CONSULTANT_ALL_SKILLS_FAIL:\n            return { loading: false, error: action.payload };\n        case CONSULTANT_ALL_SKILLS_RESET:\n            return {}\n        default:\n            return state;\n    }\n};\n\nexport const consultantAllStaffsReducer = (state = {}, action) => {\n    switch (action.type) {\n        case CONSULTANT_ALL_STAFF_REQUEST:\n            return { loading: true };\n        case CONSULTANT_ALL_STAFF_SUCCESS:\n            return { loading: false, staffings: action.payload };\n        case CONSULTANT_ALL_STAFF_FAIL:\n            return { loading: false, error: action.payload };\n        case CONSULTANT_ALL_STAFF_RESET:\n            return {}\n        default:\n            return state;\n    }\n};\n\nexport const consultantAddSkillReducer = (state = {}, action) => {\n    switch (action.type) {\n        case CONSULTANT_ADD_SKILL_REQUEST:\n            return { loading: true };\n        case CONSULTANT_ADD_SKILL_SUCCESS:\n            return { loading: false, success: true };\n        case CONSULTANT_ADD_SKILL_FAIL:\n            return { loading: false, success: false, error: action.payload };\n        case CONSULTANT_ADD_SKILL_RESET:\n            return {}\n        default:\n            return state;\n    }\n};\n\nexport const consultantDeleteSkillReducer = (state = {}, action) => {\n    switch (action.type) {\n        case CONSULTANT_DELETE_SKILL_REQUEST:\n            return { loading: true };\n        case CONSULTANT_DELETE_SKILL_SUCCESS:\n            return { loading: false, success: true };\n        case CONSULTANT_DELETE_SKILL_FAIL:\n            return { loading: false, success: false, error: action.payload };\n        case CONSULTANT_DELETE_SKILL_RESET:\n            return {}\n        default:\n            return state;\n    }\n};\n\nexport const consultantUpdateSkillReducer = (state = {}, action) => {\n    switch (action.type) {\n        case CONSULTANT_UPDATE_SKILL_REQUEST:\n            return { loading: true };\n        case CONSULTANT_UPDATE_SKILL_SUCCESS:\n            return { loading: false, success: true };\n        case CONSULTANT_UPDATE_SKILL_FAIL:\n            return { loading: false, success: false, error: action.payload };\n        case CONSULTANT_UPDATE_SKILL_RESET:\n            return {}\n        default:\n            return state;\n    }\n};\n\nexport const consultantsMassImportReducer = (state = {}, action) => {\n    switch (action.type) {\n        case CONSULTANT_MASS_IMPORT_REQUEST:\n            return { loading: true };\n        case CONSULTANT_MASS_IMPORT_SUCCESS:\n            return { loading: false, success: true };\n        case CONSULTANT_MASS_IMPORT_FAIL:\n            return { loading: false, success: false, error: action.payload };\n        case CONSULTANT_MASS_IMPORT_RESET:\n            return {}\n        default:\n            return state;\n    }\n};\n\nexport const consultantUploadWkReducer = (state = {}, action) => {\n    switch (action.type) {\n        case CONSULTANT_UPLOAD_WK_REQUEST:\n            return { loading: true };\n        case CONSULTANT_UPLOAD_WK_SUCCESS:\n            return { loading: false, success: true, path: action.payload };\n        case CONSULTANT_UPLOAD_WK_FAIL:\n            return { loading: false, success: false, error: action.payload };\n        case CONSULTANT_UPLOAD_WK_RESET:\n            return {}\n        default:\n            return state;\n    }\n};\n\nexport const consultantUpdateWkReducer = (state = {}, action) => {\n    switch (action.type) {\n        case CONSULTANT_UPDATE_WK_REQUEST:\n            return { loading: true };\n        case CONSULTANT_UPDATE_WK_SUCCESS:\n            return { loading: false, success: true, message: action.payload };\n        case CONSULTANT_UPDATE_WK_FAIL:\n            return { loading: false, success: false, error: action.payload };\n        case CONSULTANT_UPDATE_WK_RESET:\n            return {}\n        default:\n            return state;\n    }\n};","import {\n    PXX_LIST_REQUEST,\n    PXX_LIST_SUCCESS,\n    PXX_LIST_FAIL,\n    PXX_LIST_RESET,\n    PXX_MY_TO_EDIT_REQUEST,\n    PXX_MY_TO_EDIT_SUCCESS,\n    PXX_MY_TO_EDIT_FAIL,\n    PXX_MY_TO_EDIT_RESET,\n    PXX_UPDATE_REQUEST,\n    PXX_UPDATE_SUCCESS,\n    PXX_UPDATE_FAIL,\n    PXX_UPDATE_RESET,\n    PXX_TACE_REQUEST,\n    PXX_TACE_SUCCESS,\n    PXX_TACE_FAIL,\n    PXX_TACE_RESET,\n    PXX_AVAILABILITIES_REQUEST,\n    PXX_AVAILABILITIES_SUCCESS,\n    PXX_AVAILABILITIES_FAIL,\n    PXX_AVAILABILITIES_RESET,\n    PXX_ALL_REQUEST,\n    PXX_ALL_SUCCESS,\n    PXX_ALL_FAIL,\n    PXX_ALL_RESET,\n    PXX_IMPORT_MASS_REQUEST,\n    PXX_IMPORT_MASS_SUCCESS,\n    PXX_IMPORT_MASS_FAIL,\n    PXX_IMPORT_MASS_RESET,\n    PXX_IMPORT_LINE_REQUEST,\n    PXX_IMPORT_LINE_SUCCESS,\n    PXX_IMPORT_LINE_FAIL,\n    PXX_IMPORT_LINE_RESET,\n    PXX_UPLOAD_FILE_REQUEST,\n    PXX_UPLOAD_FILE_SUCCESS,\n    PXX_UPLOAD_FILE_FAIL,\n    PXX_UPLOAD_FILE_RESET,\n    PXX_UPDATE_PXX_REQUEST,\n    PXX_UPDATE_PXX_SUCCESS,\n    PXX_UPDATE_PXX_FAIL,\n    PXX_UPDATE_PXX_RESET\n} from '../constants/pxxConstants';\n\nexport const pxxMyToEditReducer = (state= { pxx: [] }, action) => {\n    switch(action.type) {\n        case PXX_MY_TO_EDIT_REQUEST:\n            return { loading: true };\n        case PXX_MY_TO_EDIT_SUCCESS:\n            return { loading: false, pxx: action.payload };\n        case PXX_MY_TO_EDIT_FAIL:\n            return { loading: false, error: action.payload };\n        case PXX_MY_TO_EDIT_RESET:\n            return { pxx: [] };\n        default:\n            return state ;\n    }\n};\n\nexport const pxxUpdateReducer = (state= { }, action) => {\n    switch(action.type) {\n        case PXX_UPDATE_REQUEST:\n            return { loading: true };\n        case PXX_UPDATE_SUCCESS:\n            return { loading: false, success: true };\n        case PXX_UPDATE_FAIL:\n            return { loading: false, error: action.payload };\n        case PXX_UPDATE_RESET:\n            return {};\n        default:\n            return state ;\n    }\n};\n\nexport const pxxTACEReducer = (state= {}, action) => {\n    switch(action.type) {\n        case PXX_TACE_REQUEST:\n            return { loading: true, success: false };\n        case PXX_TACE_SUCCESS:\n            return { loading: false, success: true, tace: action.payload };\n        case PXX_TACE_FAIL:\n            return { loading: false, error: action.payload };\n        case PXX_TACE_RESET:\n            return {};\n        default:\n            return state ;\n    }\n};\n\nexport const pxxAvailabilitiesReducer = (state= {}, action) => {\n    switch(action.type) {\n        case PXX_AVAILABILITIES_REQUEST:\n            return { loading: true, success: false };\n        case PXX_AVAILABILITIES_SUCCESS:\n            return { loading: false, success: true, availabilities: action.payload };\n        case PXX_AVAILABILITIES_FAIL:\n            return { loading: false, error: action.payload };\n        case PXX_AVAILABILITIES_RESET:\n            return {};\n        default:\n            return state ;\n    }\n};\n\nexport const pxxAllListReducer = (state= {}, action) => {\n    switch(action.type) {\n        case PXX_ALL_REQUEST:\n            return { loading: true, success: false };\n        case PXX_ALL_SUCCESS:\n            return { \n                loading: false, \n                success: true, \n                pxxs: action.payload.pxxs,\n                pages: action.payload.pages,\n                page: action.payload.page,\n                count: action.payload.count\n            };\n        case PXX_ALL_FAIL:\n            return { loading: false, error: action.payload };\n        case PXX_ALL_RESET:\n            return {};\n        default:\n            return state ;\n    }\n};\n\n/* export const pxxImportMassReducer = (state= { pxx: [] }, action) => {\n    switch(action.type) {\n        case PXX_IMPORT_MASS_REQUEST:\n            return { loading: true };\n        case PXX_IMPORT_MASS_SUCCESS:\n            return { \n                loading: false, \n                success:true, \n                message: action.payload.message,\n                datas: action.payload.datas\n            };\n        case PXX_IMPORT_MASS_FAIL:\n            return { loading: false, error: action.payload };\n        case PXX_IMPORT_MASS_RESET:\n            return { pxx: [] };\n        default:\n            return state ;\n    }\n}; */\n\nexport const pxxImportLineReducer = (state= { pxx: [] }, action) => {\n    switch(action.type) {\n        case PXX_IMPORT_LINE_REQUEST:\n            return { loading: true };\n        case PXX_IMPORT_LINE_SUCCESS:\n            return { loading: false, success:true, updatedLine: action.payload };\n        case PXX_IMPORT_LINE_FAIL:\n            return { loading: false, error: action.payload };\n        case PXX_IMPORT_LINE_RESET:\n            return { pxx: [] };\n        default:\n            return state ;\n    }\n};\n\nexport const pxxUploadFileReducer = (state= { }, action) => {\n    switch(action.type) {\n        case PXX_UPLOAD_FILE_REQUEST:\n            return { loading: true };\n        case PXX_UPLOAD_FILE_SUCCESS:\n            return { loading: false, success:true, path: action.payload };\n        case PXX_UPLOAD_FILE_FAIL:\n            return { loading: false, error: action.payload };\n        case PXX_UPLOAD_FILE_RESET:\n            return { };\n        default:\n            return state ;\n    }\n};\n\nexport const updatePxxReducer = (state= { }, action) => {\n    switch(action.type) {\n        case PXX_UPDATE_PXX_REQUEST:\n            return { loading: true };\n        case PXX_UPDATE_PXX_SUCCESS:\n            return { loading: false, success:true, message: action.payload };\n        case PXX_UPDATE_PXX_FAIL:\n            return { loading: false, error: action.payload };\n        case PXX_UPDATE_PXX_RESET:\n            return { };\n        default:\n            return state ;\n    }\n};\n\n\n// TO DELETE //\n\nexport const pxxListReducer = (state= { pxxs: { pxxMonthInformation: [], pxxUserList: [] } }, action) => {\n    switch(action.type) {\n        case PXX_LIST_REQUEST:\n            return { loading: true, pxxs: {} };\n        case PXX_LIST_SUCCESS:\n            return { loading: false, pxxs: action.payload };\n        case PXX_LIST_FAIL:\n            return { loading: false, error: action.payload };\n        case PXX_LIST_RESET:\n            return { pxxs: { pxxMonthInformation: [], pxxUserList: [] } };\n        default:\n            return state ;\n    }\n};","import { \n    SKILL_LIST_REQUEST, \n    SKILL_LIST_RESET, \n    SKILL_LIST_SUCCESS, \n    SKILL_LIST_FAIL, \n    SKILL_DELETE_REQUEST,\n    SKILL_DELETE_SUCCESS,\n    SKILL_DELETE_FAIL,\n    SKILL_DELETE_RESET,\n    SKILL_CREATE_REQUEST,\n    SKILL_CREATE_SUCCESS,\n    SKILL_CREATE_FAIL,\n    SKILL_CREATE_RESET\n} from \"../constants/skillsConstants\";\n\nexport const skillListReducer = (state= {}, action) => {\n    switch(action.type) {\n        case SKILL_LIST_REQUEST:\n            return { loading: true, success: false };\n        case SKILL_LIST_SUCCESS:\n            return { \n                loading: false, \n                success: true, \n                skills: action.payload.skills,\n                pages: action.payload.pages,\n                page: action.payload.page,\n                count: action.payload.count\n             };\n        case SKILL_LIST_FAIL:\n            return { loading: false, error: action.payload };\n        case SKILL_LIST_RESET:\n            return {};\n        default:\n            return state ;\n    }\n};\n\nexport const skillDelteReducer = (state= {}, action) => {\n    switch(action.type) {\n        case SKILL_DELETE_REQUEST:\n            return { loading: true, success: false };\n        case SKILL_DELETE_SUCCESS:\n            return { loading: false, success: true };\n        case SKILL_DELETE_FAIL:\n            return { loading: false, error: action.payload };\n        case SKILL_DELETE_RESET:\n            return {};\n        default:\n            return state ;\n    }\n};\n\nexport const skillCreateReducer = (state= {}, action) => {\n    switch(action.type) {\n        case SKILL_CREATE_REQUEST:\n            return { loading: true, success: false };\n        case SKILL_CREATE_SUCCESS:\n            return { loading: false, success: true };\n        case SKILL_CREATE_FAIL:\n            return { loading: false, error: action.payload };\n        case SKILL_CREATE_RESET:\n            return {};\n        default:\n            return state ;\n    }\n};","import { \n    DEAL_ALL_LIST_FAIL,\n    DEAL_ALL_LIST_REQUEST,\n    DEAL_ALL_LIST_RESET,\n    DEAL_ALL_LIST_SUCCESS,\n    DEAL_CREATE_FAIL, \n    DEAL_CREATE_REQUEST, \n    DEAL_CREATE_RESET, \n    DEAL_CREATE_SUCCESS, \n    DEAL_DELETE_FAIL, \n    DEAL_DELETE_REQUEST,\n    DEAL_DELETE_RESET,\n    DEAL_DELETE_SUCCESS,\n    DEAL_EDIT_FAIL,\n    DEAL_EDIT_REQUEST,\n    DEAL_EDIT_RESET,\n    DEAL_EDIT_SUCCESS,\n    DEAL_MASS_IMPORT_FAIL,\n    DEAL_MASS_IMPORT_REQUEST,\n    DEAL_MASS_IMPORT_RESET,\n    DEAL_MASS_IMPORT_SUCCESS,\n    DEAL_OLD_FAIL,\n    DEAL_OLD_REQUEST,\n    DEAL_OLD_RESET,\n    DEAL_OLD_SUCCESS,\n    DEAL_UPDATE_FAIL,\n    DEAL_UPDATE_REQUEST,\n    DEAL_UPDATE_RESET,\n    DEAL_UPDATE_SUCCESS\n} from \"../constants/dealConstants\";\n\nexport const dealCreateReducer = (state = {}, action) => {\n    switch (action.type) {\n        case DEAL_CREATE_REQUEST:\n            return { loading: true };\n        case DEAL_CREATE_SUCCESS:\n            return { loading: false, success: true, createId: action.payload };\n        case DEAL_CREATE_FAIL:\n            return { loading: false, error: action.payload };\n        case DEAL_CREATE_RESET:\n            return {}\n        default:\n            return state;\n    }\n};\n\nexport const dealUpdateReducer = (state = {}, action) => {\n    switch (action.type) {\n        case DEAL_UPDATE_REQUEST:\n            return { loading: true };\n        case DEAL_UPDATE_SUCCESS:\n            return { loading: false, success: true };\n        case DEAL_UPDATE_FAIL:\n            return { loading: false, error: action.payload };\n        case DEAL_UPDATE_RESET:\n            return {}\n        default:\n            return state;\n    }\n};\n\nexport const dealAllListReducer = (state = {}, action) => {\n    switch (action.type) {\n        case DEAL_ALL_LIST_REQUEST:\n            return { loading: true };\n        case DEAL_ALL_LIST_SUCCESS:\n            return { \n                loading: false, \n                success: true,\n                deals: action.payload.deals,\n                pages: action.payload.pages,\n                page: action.payload.page,\n                count: action.payload.count\n            };\n        case DEAL_ALL_LIST_FAIL:\n            return { loading: false, error: action.payload };\n        case DEAL_ALL_LIST_RESET:\n            return {}\n        default:\n            return state;\n    }\n};\n\nexport const dealDeleteReducer = (state = {}, action) => {\n    switch (action.type) {\n        case DEAL_DELETE_REQUEST:\n            return { loading: true };\n        case DEAL_DELETE_SUCCESS:\n            return { loading: false, success: true };\n        case DEAL_DELETE_FAIL:\n            return { loading: false, error: action.payload };\n        case DEAL_DELETE_RESET:\n            return {}\n        default:\n            return state;\n    }\n};\n\nexport const dealEditeReducer = (state = {}, action) => {\n    switch (action.type) {\n        case DEAL_EDIT_REQUEST:\n            return { loading: true };\n        case DEAL_EDIT_SUCCESS:\n            return { loading: false, success: true, deal: action.payload };\n        case DEAL_EDIT_FAIL:\n            return { loading: false, error: action.payload };\n        case DEAL_EDIT_RESET:\n            return {}\n        default:\n            return state;\n    }\n};\n\nexport const dealOldReducer = (state = {}, action) => {\n    switch (action.type) {\n        case DEAL_OLD_REQUEST:\n            return { loading: true };\n        case DEAL_OLD_SUCCESS:\n            return { loading: false, success: true, oldDeals: action.payload };\n        case DEAL_OLD_FAIL:\n            return { loading: false, error: action.payload };\n        case DEAL_OLD_RESET:\n            return {}\n        default:\n            return state;\n    }\n};\n\nexport const dealsImportMassReducer = (state = {}, action) => {\n    switch (action.type) {\n        case DEAL_MASS_IMPORT_REQUEST:\n            return { loading: true };\n        case DEAL_MASS_IMPORT_SUCCESS:\n            return { loading: false, success: true, datas: action.payload.datas };\n        case DEAL_MASS_IMPORT_FAIL:\n            return { loading: false, error: action.payload };\n        case DEAL_MASS_IMPORT_RESET:\n            return {}\n        default:\n            return state;\n    }\n};","import { \n    ACCESS_LIST_FAIL, \n    ACCESS_LIST_REQUEST, \n    ACCESS_LIST_RESET, \n    ACCESS_LIST_SUCCESS, \n    ACCESS_UPDATE_FRONTACCESS_FAIL, \n    ACCESS_UPDATE_FRONTACCESS_REQUEST,\n    ACCESS_UPDATE_FRONTACCESS_SUCCESS,\n    ACCESS_UPDATE_FRONTACCESS_RESET\n} from \"../constants/accessConstants\";\n\nexport const accessListReducer = (state = {}, action) => {\n    switch (action.type) {\n        case ACCESS_LIST_REQUEST:\n            return { loading: true };\n        case ACCESS_LIST_SUCCESS:\n            return { loading: false, access: action.payload };\n        case ACCESS_LIST_FAIL:\n            return { loading: false, error: action.payload };\n        case ACCESS_LIST_RESET:\n            return {}\n        default:\n            return state;\n    }\n};\n\nexport const accessFrontUpdateReducer = (state = {}, action) => {\n    switch (action.type) {\n        case ACCESS_UPDATE_FRONTACCESS_REQUEST:\n            return { loading: true };\n        case ACCESS_UPDATE_FRONTACCESS_SUCCESS:\n            return { loading: false, success: true };\n        case ACCESS_UPDATE_FRONTACCESS_FAIL:\n            return { loading: false, error: action.payload };\n        case ACCESS_UPDATE_FRONTACCESS_RESET:\n            return {}\n        default:\n            return state;\n    }\n};","import { \n    CLIENT_ALL_FAIL, \n    CLIENT_ALL_REQUEST, \n    CLIENT_ALL_RESET, \n    CLIENT_ALL_SUCCESS, \n    CLIENT_CREATE_FAIL, \n    CLIENT_CREATE_REQUEST,\n    CLIENT_CREATE_RESET,\n    CLIENT_CREATE_SUCCESS,\n    CLIENT_UPDATE_FAIL,\n    CLIENT_UPDATE_REQUEST,\n    CLIENT_UPDATE_SUCCESS,\n    CLIENT_UPDATE_RESET,\n    CLIENT_DELETE_REQUEST,\n    CLIENT_DELETE_SUCCESS,\n    CLIENT_DELETE_FAIL,\n    CLIENT_DELETE_RESET\n} from \"../constants/clientConstants\";\n\nexport const clientAllReducer = (state = { }, action) => {\n    switch (action.type) {\n        case CLIENT_ALL_REQUEST:\n            return { loading: true };\n        case CLIENT_ALL_SUCCESS:\n            return { \n                loading: false, \n                success: true, \n                clients: action.payload.clients,\n                page: action.payload.page,\n                pages: action.payload.pages,\n                count: action.payload.count\n            };\n        case CLIENT_ALL_FAIL:\n            return { loading: false, error: action.payload };\n        case CLIENT_ALL_RESET:\n            return {}\n        default:\n            return state;\n    }\n};\n\nexport const clientCreateReducer = (state = { }, action) => {\n    switch (action.type) {\n        case CLIENT_CREATE_REQUEST:\n            return { loading: true };\n        case CLIENT_CREATE_SUCCESS:\n            return { loading: false, success: true };\n        case CLIENT_CREATE_FAIL:\n            return { loading: false, error: action.payload };\n        case CLIENT_CREATE_RESET:\n            return {}\n        default:\n            return state;\n    }\n};\n\nexport const clientUpdateReducer = (state = { }, action) => {\n    switch (action.type) {\n        case CLIENT_UPDATE_REQUEST:\n            return { loading: true };\n        case CLIENT_UPDATE_SUCCESS:\n            return { loading: false, success: true };\n        case CLIENT_UPDATE_FAIL:\n            return { loading: false, error: action.payload };\n        case CLIENT_UPDATE_RESET:\n            return {}\n        default:\n            return state;\n    }\n};\n\nexport const clientDeleteReducer = (state = { }, action) => {\n    switch (action.type) {\n        case CLIENT_DELETE_REQUEST:\n            return { loading: true };\n        case CLIENT_DELETE_SUCCESS:\n            return { loading: false, success: true };\n        case CLIENT_DELETE_FAIL:\n            return { loading: false, error: action.payload };\n        case CLIENT_DELETE_RESET:\n            return {}\n        default:\n            return state;\n    }\n};","import { \n    TACE_CREATE_FAIL,\n    TACE_CREATE_REQUEST,\n    TACE_CREATE_RESET,\n    TACE_CREATE_SUCCESS,\n} from \"../constants/taceConstants\";\n\nexport const createTaceReducer = (state= {}, action) => {\n    switch(action.type) {\n        case TACE_CREATE_REQUEST:\n            return { loading: true, success: false };\n        case TACE_CREATE_SUCCESS:\n            return { loading: false, taceData: action.payload };\n        case TACE_CREATE_FAIL:\n            return { loading: false, error: action.payload };\n        case TACE_CREATE_RESET:\n            return {};\n        default:\n            return state ;\n    }\n};","import { \n    EMAIL_CONTACTS_LIST_FAIL, \n    EMAIL_CONTACTS_LIST_REQUEST, \n    EMAIL_CONTACTS_LIST_RESET, \n    EMAIL_CONTACTS_LIST_SUCCESS, \n    EMAIL_SEND_DECISION_FAIL, \n    EMAIL_SEND_DECISION_REQUEST,\n    EMAIL_SEND_DECISION_SUCCESS,\n    EMAIL_SEND_DECISION_RESET\n} from \"../constants/emailConstants\";\n\nexport const contactsListReducer = (state= { }, action) => {\n    switch(action.type) {\n        case EMAIL_CONTACTS_LIST_REQUEST:\n            return { loading: true };\n        case EMAIL_CONTACTS_LIST_SUCCESS:\n            return { loading: false, contacts: action.payload };\n        case EMAIL_CONTACTS_LIST_FAIL:\n            return { loading: false, error: action.payload };\n        case EMAIL_CONTACTS_LIST_RESET:\n            return { };\n        default:\n            return state ;\n    }\n};\n\nexport const sendOneEmailReducer = (state= { }, action) => {\n    switch(action.type) {\n        case EMAIL_SEND_DECISION_REQUEST:\n            return { loading: true };\n        case EMAIL_SEND_DECISION_SUCCESS:\n            return { success:true, loading: false, email: action.payload.email };\n        case EMAIL_SEND_DECISION_FAIL:\n            return { loading: false, error: action.payload };\n        case EMAIL_SEND_DECISION_RESET:\n            return { };\n        default:\n            return state ;\n    }\n};","import axios from 'axios';\nimport { CONSULTANTS_MY_DETAILS_RESET, CONSULTANT_MY_RESET } from '../constants/consultantConstants';\nimport { PXX_LIST_RESET, PXX_MY_TO_EDIT_RESET, PXX_UPDATE_RESET } from '../constants/pxxConstants';\nimport { \n\n    USER_REGISTER_REQUEST,\n    USER_REGISTER_SUCCESS,\n    USER_REGISTER_FAIL,\n    USER_DELETE_REQUEST, \n    USER_DELETE_SUCCESS,\n    USER_DELETE_FAIL,\n    USER_DETAILS_REQUEST,\n    USER_DETAILS_SUCCESS, \n    USER_DETAILS_FAIL, \n    USER_LIST_REQUEST,\n    USER_LIST_SUCCESS,\n    USER_LIST_FAIL, \n    USER_LOGIN_REQUEST,\n    USER_LOGIN_SUCCESS,\n    USER_LOGIN_FAIL,\n    USER_LOGOUT,\n    //USER_UPDATE_PROFILE_REQUEST,\n    //USER_UPDATE_PROFILE_SUCCESS,\n    //USER_UPDATE_PROFILE_FAIL,\n    USER_UPDATE_REQUEST,\n    USER_UPDATE_SUCCESS,\n    USER_UPDATE_FAIL,\n    USER_REGISTER_RESET\n} from \"../constants/userConstants\";\n\n\nexport const login = (email, password) => async(dispatch) => {\n    try {\n        dispatch({\n            type: USER_LOGIN_REQUEST,\n        });\n\n        const config = {\n            headers:{\n                'Content-type': 'Application/json'\n            }\n        };\n\n        // data contains all shared user informations\n        const { data } = await axios.post('/api/users/login', {email, password}, config);\n\n        dispatch({\n            type: USER_LOGIN_SUCCESS,\n            payload: data\n        });\n\n        localStorage.setItem('userInfo', JSON.stringify(data))\n\n    } catch (error) {\n        dispatch({\n            type: USER_LOGIN_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\nexport const logout = () => (dispatch) => {\n    //localStorage.removeItem('userInfo');\n    localStorage.clear();\n    dispatch({type: USER_LOGOUT});\n    dispatch({type: USER_REGISTER_RESET});\n    dispatch({type: CONSULTANTS_MY_DETAILS_RESET});\n    dispatch({type: CONSULTANT_MY_RESET});\n    dispatch({type: PXX_LIST_RESET});\n    dispatch({type: PXX_MY_TO_EDIT_RESET});\n    dispatch({type: PXX_UPDATE_RESET});\n};\n\nexport const register = (name, email, password) => async(dispatch) => {\n    try {\n        dispatch({\n            type: USER_REGISTER_REQUEST,\n        });\n\n        const config = {\n            headers:{\n                'Content-type': 'Application/json'\n            }\n        };\n\n        // data contains all shared user informations\n        const { data } = await axios.post('/api/users', {name, email, password}, config);\n\n        dispatch({\n            type: USER_REGISTER_SUCCESS,\n            payload: data\n        });\n\n        /*\n        // we also want to inform user is logged\n        dispatch({\n            type: USER_LOGIN_SUCCESS,\n            payload: data\n        });\n        localStorage.setItem('userInfo', JSON.stringify(data))\n        */\n\n\n    } catch (error) {\n        dispatch({\n            type: USER_REGISTER_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\nexport const getUserDetails = (id) => async(dispatch, getState) => {\n    try {\n        dispatch({\n            type: USER_DETAILS_REQUEST,\n        });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers:{\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        // data contains all shared user informations\n        const { data } = await axios.get(`/api/users/${id}`, config);\n\n        dispatch({\n            type: USER_DETAILS_SUCCESS,\n            payload: data\n        });\n\n    } catch (error) {\n        dispatch({\n            type: USER_DETAILS_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\n/*\nexport const updateUserProfile = (user) => async(dispatch, getState) => {\n    try {\n\n        dispatch({\n            type: USER_UPDATE_PROFILE_REQUEST,\n        });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers:{\n                'Content-type': 'Application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        // data contains all shared user informations\n        const { data } = await axios.put(`/api/users/profile`, user, config);\n\n        dispatch({\n            type: USER_UPDATE_PROFILE_SUCCESS,\n            payload: data\n        });\n\n        dispatch({\n            type: USER_LOGIN_SUCCESS,\n            payload: data,\n        });\n\n        dispatch({\n            type: USER_DETAILS_SUCCESS,\n            payload: data,\n        });\n\n        localStorage.setItem('userInfo', JSON.stringify(data));\n\n    } catch (error) {\n        dispatch({\n            type: USER_UPDATE_PROFILE_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n*/\n\nexport const listUsers = (practice='', keyword='', pageNumber='', pageSize='15') => async(dispatch, getState) => {\n    try {\n\n        dispatch({\n            type: USER_LIST_REQUEST,\n        });\n\n        const { userLogin: { userInfo } } = getState();\n        //const userPractice = userInfo.consultantProfil.practice;\n\n        const config = {\n            headers:{\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        //const { data } = await axios.get(`/api/users`, config);\n        const { data } = await axios.get(`/api/users?practice=${practice}&keyword=${keyword}&pageNumber=${pageNumber}&pageSize=${pageSize}`, config);\n\n        dispatch({\n            type: USER_LIST_SUCCESS,\n            payload: data\n        });\n\n    } catch (error) {\n        dispatch({\n            type: USER_LIST_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\n\nexport const deleteUser = (id) => async(dispatch, getState) => {\n    try {\n\n        dispatch({\n            type: USER_DELETE_REQUEST,\n        });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers:{\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        await axios.delete(`/api/users/${id}`, config);\n\n        dispatch({\n            type: USER_DELETE_SUCCESS,\n        });\n\n    } catch (error) {\n        dispatch({\n            type: USER_DELETE_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\n\nexport const updateUser = (user) => async(dispatch, getState) => {\n    try {\n\n        dispatch({\n            type: USER_UPDATE_REQUEST,\n        });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers:{\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        await axios.put(`/api/users/${user._id}`, user, config);\n\n        dispatch({ type: USER_UPDATE_SUCCESS });\n\n    } catch (error) {\n        dispatch({\n            type: USER_UPDATE_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nconst DisplayChildren = ({ access, children }) => {\n\n    const userLogin = useSelector(state => state.userLogin);\n    const { userInfo } = userLogin;\n    let grantedAccess = false;\n\n    if (userInfo) {\n        const rule = userInfo.profil.frontAccess.filter(x => x.id === access);\n        if (rule.length > 0) {\n            grantedAccess = rule[0].mode !== 'no' ? true : false\n        }\n    }\n\n    return (\n        <span>\n            {grantedAccess && children}\n        </span>\n    )\n}\n\nexport default DisplayChildren;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { LinkContainer } from 'react-router-bootstrap';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport NavDropdown from 'react-bootstrap/NavDropdown';\nimport Container from 'react-bootstrap/Container';\nimport { logout } from '../actions/userActions';\nimport DisplayChildren from './DisplayChildren';\n\nconst Header = () => {\n\n    const dispatch = useDispatch();\n\n    const userLogin = useSelector(state => state.userLogin);\n    const { userInfo } = userLogin;\n\n    const logoutHandler = () => {\n        dispatch(logout());\n    };\n\n    return (\n        <header>\n            <Navbar bg=\"primary\" variant=\"dark\" expand=\"lg\" collapseOnSelect fixed=\"top\">\n                <Container>\n                    <LinkContainer to='/'>\n                        <Navbar.Brand>Performance App</Navbar.Brand>\n                    </LinkContainer>\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\n                        <Nav className=\"ml-auto\">\n\n                            <DisplayChildren access='staffingRequest'>\n                                <LinkContainer to='/staffing'>\n                                    <Nav.Link>Staffing Request</Nav.Link>\n                                </LinkContainer>\n                            </DisplayChildren>\n\n                            <DisplayChildren access='editMyPxx'>\n                                <LinkContainer to='/pxx'>\n                                    <Nav.Link>Edit My Pxx</Nav.Link>\n                                </LinkContainer>\n                            </DisplayChildren>\n\n                            {userInfo ? (\n\n                                <NavDropdown title={`${userInfo.name} (${userInfo.profil.profil && userInfo.profil.profil})` || 'no user'} id=\"username\">\n\n                                    <DisplayChildren access='editMyProfil'>\n                                        <LinkContainer to='/profile'>\n                                            <NavDropdown.Item>Edit My Profil</NavDropdown.Item>\n                                        </LinkContainer>\n                                    </DisplayChildren>\n\n                                    <DisplayChildren access={'manageConsultants'}>\n                                        <NavDropdown.Divider />\n                                        <LinkContainer to='/admin/consultants'>\n                                            <NavDropdown.Item>Manage Consultant</NavDropdown.Item>\n                                        </LinkContainer>\n                                    </DisplayChildren>\n\n                                    <DisplayChildren access={'manageDeals'}>\n                                        <NavDropdown.Divider />\n                                        <LinkContainer to='/admin/deals'>\n                                            <NavDropdown.Item>Manage Deals</NavDropdown.Item>\n                                        </LinkContainer>\n                                    </DisplayChildren>\n\n                                    <NavDropdown.Divider />\n                                    <LinkContainer to='/login'>\n                                        <NavDropdown.Item onClick={logoutHandler}>Logout</NavDropdown.Item>\n                                    </LinkContainer>\n                                </NavDropdown>\n\n                            ) : (\n                                    <LinkContainer to='/login'>\n                                        <Nav.Link><i className='fas fa-user'></i>Sign In</Nav.Link>\n                                    </LinkContainer>)}\n\n                            <DisplayChildren access='adminMenu'>\n                                <NavDropdown title='admin'>\n\n                                    <DisplayChildren access='manageUsers'>\n                                        <LinkContainer to='/admin/users'>\n                                            <NavDropdown.Item>Manage Users</NavDropdown.Item>\n                                        </LinkContainer>\n                                    </DisplayChildren>\n\n                                    <DisplayChildren access='manageSkills'>\n                                        <NavDropdown.Divider />\n                                        <LinkContainer to='/admin/skills'>\n                                            <NavDropdown.Item>Manage Skills</NavDropdown.Item>\n                                        </LinkContainer>\n                                    </DisplayChildren>\n\n                                    <DisplayChildren access='manageProfils'>\n                                        <NavDropdown.Divider />\n                                        <LinkContainer to='/admin/profils'>\n                                            <NavDropdown.Item>Manage Profils</NavDropdown.Item>\n                                        </LinkContainer>\n                                    </DisplayChildren>\n\n                                    <DisplayChildren access='manageCompanies'>\n                                        <NavDropdown.Divider />\n                                        <LinkContainer to='/admin/companies'>\n                                            <NavDropdown.Item>Manage companies</NavDropdown.Item>\n                                        </LinkContainer>\n                                    </DisplayChildren>\n\n                                </NavDropdown>\n                            </DisplayChildren>\n                        </Nav>\n                    </Navbar.Collapse>\n                </Container>\n            </Navbar>\n        </header>\n    )\n}\n\nexport default Header\n","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nconst Footer = () => {\n    return (\n        <footer>\n            <Container>\n                <Row>\n                    <Col className='text-center py-3'>\n                        Copyright &copy; byJPR\n                    </Col>\n                </Row>\n            </Container>\n        </footer>\n    )\n}\n\nexport default Footer\n","import React from 'react';\nimport { Alert } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\n\nconst Message = ({ variant, children }) => {\n    return (\n        <Alert variant={variant} className='my-1'>\n            {children}\n        </Alert>\n    )\n};\n\nMessage.defaultProps = {\n    variant: 'info',\n};\n\nMessage.propTypes = {\n    variant: PropTypes.string\n}\n\nexport default Message;\n","import React from 'react';\nimport { Spinner } from 'react-bootstrap';\n\nconst Loader = () => {\n    return (\n        <Spinner \n            animation='border' \n            role='status' \n            stype={{ \n                width:'100px', \n                height: '100px',\n                margin: 'auto',\n                display: 'block'\n            }}>\n                <span className='sr-only'>Loading...</span>\n        </Spinner>\n    )\n};\n\nexport default Loader;\n","import React from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\n\nconst FormContainer = ({ children }) => {\n    return (\n        <Container>\n            <Row className='justify-content-md-center'>\n                <Col xs={12} md={6}>\n                    {children}\n                </Col>\n            </Row>\n        </Container>\n    )\n};\n\nexport default FormContainer;\n","import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Form, Button, Row, Col, Container, Table } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\nimport FormContainer from '../components/FormContainer';\nimport { login } from '../actions/userActions'\n\nconst LoginScreen = ({ location, history }) => {\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [message, setMessage] = useState(null);\n\n    const dispatch = useDispatch();\n    const userLogin = useSelector(state => state.userLogin);\n    const { loading, error, userInfo } = userLogin;\n\n    const redirect = location.search ? location.search.split('=')[1] : '/';\n\n    useEffect(() => {\n        if (userInfo && userInfo.status === 'Validated') {\n            history.push(redirect);\n            // If user is authenticate, there is no search and user is redirect to home page\n        }\n    });\n\n    const submitHandler = (e) => {\n        const form = e.currentTarget;\n        // Verification of validity of data\n        if (form.checkValidity() === false) {\n            setMessage('Please check your information');\n        } else {\n            e.preventDefault(); // to avoid page to refresh\n            // Dispatch Login\n            dispatch(login(email, password));\n        }\n    };\n\n    return (\n        <>\n            <FormContainer>\n                <h1>Sign In</h1>\n                {message && <Message variant='danger'>{message}</Message>}\n                {error && <Message variant='danger'>{error}</Message>}\n                {loading && <Loader />}\n                <Form onSubmit={submitHandler}>\n                    <Form.Group controlId='email'>\n                        <Form.Label>Email Address</Form.Label>\n                        <Form.Control\n                            type='email'\n                            placeholder='Enter Email'\n                            value={email}\n                            onChange={(e) => setEmail(e.target.value)}\n                        ></Form.Control>\n                    </Form.Group>\n                    <Form.Group controlId='password'>\n                        <Form.Label>Password</Form.Label>\n                        <Form.Control\n                            type='password'\n                            placeholder='Enter password'\n                            value={password}\n                            onChange={(e) => setPassword(e.target.value)}\n                        ></Form.Control>\n                    </Form.Group>\n\n                    <Button type='submit' variant='primary'>\n                        Sign In\n                </Button>\n\n                    <Row className='py-3'>\n                        <Col>\n                            New User ? <Link to={redirect ?\n                                `/register?reditect=${redirect}`\n                                : '/register'}>Register</Link>\n                        </Col>\n                    </Row>\n                </Form>\n\n            </FormContainer>\n\n            <Container>\n                <Row className='justify-content-md-center'>\n                    <Col xs={12} md={6} className='mt-5'>\n                        <h3>Disclaimer</h3>\n                        <p>Welcome on this demo! Please note that this is not an official Wavestone product.<br />\n                        On this online resource management application, you'll be able to:</p>\n                        <ul>\n                            <li>Login with different profiles (admin, coordinator, CDM, manager)</li>\n                            <li>Edit your Pxx</li>\n                            <li>Edit your consultants' profiles (position, expertise, partial time, etc.)</li>\n                            <li>Create, edit and keep track of your staffing requests</li>\n                            <li>Staff your available consultants on staffing requests</li>\n                            <li>Check where a consultant is staffed</li>\n                            <li>Create and manage a dataset of skills for your consultants</li>\n                            <li>Get access to latest KPIs and export the data on Excel</li>\n                        </ul>\n                        <h4>Test acounts logins:</h4>\n                        <Table hover striped>\n                            <thead>\n                                <tr className='table-secondary'>\n                                    <th className='align-middle text-light text-center'>Email</th>\n                                    <th className='align-middle text-light text-center'>Password</th>\n                                    <th className='align-middle text-light text-center'>Description</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                <tr>\n                                    <td className='align-middle text-center'>cdmptc11000@mail.com</td>\n                                    <td className='align-middle text-center'>123456</td>\n                                    <td className='align-middle text-center'>Admin account with all accreditation on application</td>\n                                </tr>\n                                <tr>\n                                    <td className='align-middle text-center'>cdmptc11001@mail.com</td>\n                                    <td className='align-middle text-center'>123456</td>\n                                    <td className='align-middle text-center'>Coordinator of practice PTC1 account</td>\n                                </tr>\n                                <tr>\n                                    <td className='align-middle text-center'>cdmptc11004@mail.com</td>\n                                    <td className='align-middle text-center'>123456</td>\n                                    <td className='align-middle text-center'>CDM of practice PTC1 account</td>\n                                </tr>\n                                <tr>\n                                    <td className='align-middle text-center'>jessicamichelptc179@mail.com</td>\n                                    <td className='align-middle text-center'>123456</td>\n                                    <td className='align-middle text-center'>Manager of practice PTC1 account</td>\n                                </tr>\n                                <tr>\n                                    <td className='align-middle text-center'>arthurthomasptc112@mail.com</td>\n                                    <td className='align-middle text-center'>123456</td>\n                                    <td className='align-middle text-center'>Consultant of practice PTC1 account</td>\n                                </tr>\n                            </tbody>\n                        </Table>\n                    </Col>\n                </Row>\n            </Container>\n        </>\n    );\n};\n\nexport default LoginScreen;\n","import axios from 'axios';\n//import fetch from 'fetch';\n//import fs from 'fs';\n//import path from 'path';\nimport {\n    PXX_LIST_REQUEST,\n    PXX_LIST_SUCCESS,\n    PXX_LIST_FAIL,\n    PXX_MY_TO_EDIT_REQUEST,\n    PXX_MY_TO_EDIT_FAIL,\n    PXX_MY_TO_EDIT_SUCCESS,\n    PXX_UPDATE_REQUEST,\n    PXX_UPDATE_SUCCESS,\n    PXX_UPDATE_FAIL,\n    PXX_TACE_REQUEST,\n    PXX_TACE_SUCCESS,\n    PXX_TACE_FAIL,\n    PXX_AVAILABILITIES_REQUEST,\n    PXX_AVAILABILITIES_SUCCESS,\n    PXX_AVAILABILITIES_FAIL,\n    PXX_ALL_REQUEST,\n    PXX_ALL_FAIL,\n    PXX_ALL_SUCCESS,\n    PXX_IMPORT_MASS_SUCCESS,\n    PXX_IMPORT_MASS_FAIL,\n    PXX_IMPORT_MASS_REQUEST,\n    PXX_IMPORT_LINE_REQUEST,\n    PXX_IMPORT_LINE_SUCCESS,\n    PXX_IMPORT_LINE_FAIL,\n    PXX_UPLOAD_FILE_REQUEST,\n    PXX_UPLOAD_FILE_SUCCESS,\n    PXX_UPLOAD_FILE_FAIL,\n    PXX_UPDATE_PXX_REQUEST,\n    PXX_UPDATE_PXX_SUCCESS,\n    PXX_UPDATE_PXX_FAIL\n} from '../constants/pxxConstants';\n\nexport const getMyConsultantPxxToEdit = (consultantId, searchDate, numberOfMonth) => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: PXX_MY_TO_EDIT_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                'Content-type': 'Application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        searchDate.setUTCDate(1);\n        const month = searchDate.toISOString().substring(0,10);\n\n        const { data } = await axios.get(`/api/pxx/edit?consultantId=${consultantId}&month=${month}&numberOfMonth=${numberOfMonth}`, config)\n        \n        /*\n        const functionDate = new Date(searchDate);\n        functionDate.setDate(1);\n        const pxx = [];\n        for (let incr = 0; incr < numberOfMonth; incr++){\n            \n            const transformDate = functionDate.toISOString().substring(0,10);\n            const { data } = await axios.get(`/api/pxx/consultantId/${consultantId}/month/${transformDate}`, config);\n            pxx.push(data);\n            functionDate.setMonth(functionDate.getMonth()+1);\n        }\n        dispatch({ type: PXX_MY_TO_EDIT_SUCCESS, payload: pxx });\n        */\n\n       dispatch({ type: PXX_MY_TO_EDIT_SUCCESS, payload: data });\n\n    } catch (error) {\n        dispatch({\n            type: PXX_MY_TO_EDIT_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\nexport const updatePxx = (pxx) => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: PXX_UPDATE_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                'Content-type': 'Application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        await axios.put(`/api/pxx`, pxx, config);    \n\n        dispatch({ type: PXX_UPDATE_SUCCESS });\n\n    } catch (error) {\n        dispatch({\n            type: PXX_UPDATE_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\n\n// TO DELETE //\n\nconst transformListPxxToDisplay = (pxxData, pxxInfo) => {\n\n    const listConsultant = pxxData.data.map(pxx => (pxx.name));\n\n    // collect unique _id for consultant\n    const tampon = []\n    for (let incr = listConsultant.length - 1; incr >= 0; incr--) {\n        if (tampon.includes(listConsultant[incr]._id)) {\n            listConsultant.splice(incr, 1);\n        } else {\n            tampon.push(listConsultant[incr]._id);\n        }\n    }\n\n    const listPxx = [];\n    for (let incr = 0; incr < listConsultant.length; incr++) {\n\n        let pxx = [];\n\n        pxx.push({\n            type: \"lineInformation\",\n            value: listConsultant[incr].name,\n            userId: listConsultant[incr]._id,\n            information: \"consultantName\"\n        });\n        pxx.push({\n            type: \"lineInformation\",\n            value: listConsultant[incr].arrival,\n            userId: listConsultant[incr]._id,\n            information: \"consultantArrivalDate\"\n        });\n        pxx.push({\n            type: \"lineInformation\",\n            value: listConsultant[incr].leaving,\n            userId: listConsultant[incr]._id,\n            information: \"consultantLeavingDate\"\n        });\n        pxx.push({\n            type: \"lineInformation\",\n            value: listConsultant[incr].seniority,\n            userId: listConsultant[incr]._id,\n            information: \"consultantSeniority\"\n        });\n\n        for (let incrMonth = 0; incrMonth < pxxInfo.data.length; incrMonth++) {\n\n            let val = pxxData.data.filter(x => (x.name._id === listConsultant[incr]._id && x.month._id === pxxInfo.data[incrMonth]._id))[0];\n            if (val.length > 1) {\n                throw new Error({ message: 'number of value can not be up to 1' })\n            }\n            pxx.push({\n                type: \"day\",\n                value: val.prodDay,\n                userId: listConsultant[incr]._id,\n                pxxId: pxxInfo.data[incrMonth]._id,\n                information: 'productionDay'\n            });\n            pxx.push({\n                type: \"day\",\n                value: val.notProdDay,\n                userId: listConsultant[incr]._id,\n                pxxId: pxxInfo.data[incrMonth]._id,\n                information: 'notProductionDay'\n            });\n            pxx.push({\n                type: \"day\",\n                value: val.leavingDay,\n                userId: listConsultant[incr]._id,\n                pxxId: pxxInfo.data[incrMonth]._id,\n                information: 'leavingDay'\n            });\n            pxx.push({\n                type: \"day\",\n                value: val.availableDay,\n                userId: listConsultant[incr]._id,\n                pxxId: pxxInfo.data[incrMonth]._id,\n                information: 'availableDay'\n            });\n        }\n\n        listPxx.push(pxx);\n    }\n\n    return listPxx;\n\n}\n\nconst transformPxxMonthInfoToDisplay = (pxxInfo) => {\n    const pxxMonthInfoList = []\n    const firstLine = [];\n    const secondLine = [];\n\n    for (let incr = 0; incr < pxxInfo.data.length; incr++){\n        \n        firstLine.push({\n            name: pxxInfo.data[incr].name,\n            value: pxxInfo.data[incr].workingday\n        });\n        firstLine.push({ name:'', value:'' });\n        firstLine.push({ name:'', value:'' });\n        firstLine.push({ name:'', value:'' });\n    }\n\n    for (let incr = 0; incr < pxxInfo.data.length; incr++){\n        secondLine.push({ name:'Prod', value: 'P'});\n        secondLine.push({ name: 'Not Prod', value: 'NP'});\n        secondLine.push({ name: 'Hollidays', value: 'H'});\n        secondLine.push({ name: 'Availability', value: 'A'});\n    }\n    pxxMonthInfoList.push(firstLine, secondLine);\n\n    return pxxMonthInfoList;\n}\n\nexport const getPxxList = (searchDate, numberOfMonth) => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: PXX_LIST_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers:{\n                'Content-type': 'Application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n        \n        const pxxInfo = await axios.get(`/api/monthdata?searchdate=${searchDate}&numberofmonths=${numberOfMonth}`);\n        const pxxMonthInfoList = transformPxxMonthInfoToDisplay(pxxInfo);\n\n        let monthId = \"\";\n        for (let incr = 0; incr < pxxInfo.data.length; incr++) {\n            if (incr === 0) {\n                monthId = pxxInfo.data[incr]._id;\n            }\n            monthId = monthId + '_' + pxxInfo.data[incr]._id;\n        }\n\n        const pxxData = await axios.get(`/api/pxx/${monthId}`, config);\n        const listPxx = transformListPxxToDisplay(pxxData, pxxInfo);\n\n        dispatch({ type: PXX_LIST_SUCCESS, payload: { pxxMonthInformation: pxxMonthInfoList, pxxUserList: listPxx } });\n\n\n    } catch (error) {\n        dispatch({\n            type: PXX_LIST_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\nexport const getTace = (practice, start, end) => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: PXX_TACE_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers:{\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n        const { data } = await axios.get(`/api/pxx/chart/tace?practice=${practice}&start=${start}&end=${end}`, config);\n\n        dispatch({ type: PXX_TACE_SUCCESS, payload: data });\n\n\n    } catch (error) {\n        dispatch({\n            type: PXX_TACE_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\nexport const getAvailabilities = (practice='', start, end, skills='', experienceStart='', experienceEnd='', searchMode) => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: PXX_AVAILABILITIES_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers:{\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        let searchExperience = experienceStart.toString();\n        if (experienceEnd) {\n            searchExperience = searchExperience + '-' + experienceEnd.toString()\n        }\n\n        const { data } = await axios.get(`/api/pxx/chart/availability?practice=${practice}&start=${start}&end=${end}&skills=${skills}&experience=${searchExperience}&filterMode=${searchMode}`, config);\n\n        dispatch({ type: PXX_AVAILABILITIES_SUCCESS, payload: data });\n\n\n    } catch (error) {\n        dispatch({\n            type: PXX_AVAILABILITIES_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\nexport const getAllPxx = (practice = '', month = '', keywork = '', pageSize = '10', pageNumber = '1') => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: PXX_ALL_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers:{\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n        const { data } = await axios.get(`/api/pxx?practice=${practice}&month=${month}&keyword=${keywork}&pageSize=${pageSize}&pageNumber=${pageNumber}`, config);\n\n        dispatch({ type: PXX_ALL_SUCCESS, payload: data });\n\n\n    } catch (error) {\n        dispatch({\n            type: PXX_ALL_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\n/* export const pxxImportInMass = (datas) => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: PXX_IMPORT_MASS_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers:{\n                'Content-type': 'Application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n        const { data } = await axios.put(`/api/pxx/admin/mass-import`, datas, config);\n\n        dispatch({ type: PXX_IMPORT_MASS_SUCCESS, payload: data });\n\n\n    } catch (error) {\n        dispatch({\n            type: PXX_IMPORT_MASS_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n}; */\n\nexport const pxxUpdateALine = (line) => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: PXX_IMPORT_LINE_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers:{\n                'Content-type': 'Application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n        const { data } = await axios.put(`/api/pxx/admin/line-import`, line, config);\n\n        dispatch({ type: PXX_IMPORT_LINE_SUCCESS, payload: data });\n\n\n    } catch (error) {\n        dispatch({\n            type: PXX_IMPORT_LINE_FAIL,\n            payload: {\n                message: error.response && error.response.data.message\n                    ? error.response.data.message\n                    : error.message\n            }\n        });\n    }\n};\n\nexport const pxxUploadFiles = (files) => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: PXX_UPLOAD_FILE_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers:{\n                \"Content-Type\": \"application/vnd.ms-excel\",\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        let result = '';\n        for (let incr=0 ; incr < files.length ; incr++) {\n            const file = files[incr];\n            const { data } = await axios.post(`/api/upload/pxx`, file, config);\n            result = data;\n        }\n\n\n        dispatch({ type: PXX_UPLOAD_FILE_SUCCESS, payload: result });\n\n\n    } catch (error) {\n        dispatch({\n            type: PXX_UPLOAD_FILE_FAIL,\n            payload: {\n                message: error.response && error.response.data.message\n                    ? error.response.data.message\n                    : error.message\n            }\n        });\n    }\n};\n\nexport const updatePxxFiles = (path) => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: PXX_UPDATE_PXX_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers:{\n                \"Content-Type\": \"application/json\",\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        const { data } = await axios.put(`/api/pxx/admin/line-import-wk`, path, config);\n\n        dispatch({ type: PXX_UPDATE_PXX_SUCCESS, payload: data });\n\n    } catch (error) {\n        dispatch({\n            type: PXX_UPDATE_PXX_FAIL,\n            payload: {\n                message: error.response && error.response.data.message\n                    ? error.response.data.message\n                    : error.message\n            }\n        });\n    }\n};","import React, { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nimport { updatePxx } from '../actions/pxxActions';\n\nconst PxxUserLine = ({ data }) => {\n\n    const dispatch = useDispatch();\n\n    const [prodDayComponent, setProdDayComponent] = useState(Number(data.prodDay) || 0);\n    const [notProdDayComponent, setNotProdDayComponent] = useState(Number(data.notProdDay) || 0);\n    const [leavingDayComponent, setLeavingDayComponent] = useState(Number(data.leavingDay) || 0);\n    const [availableDayComponent, setAvailableDayComponent] = useState(Number(data.availableDay) || 0);\n    const [workingDay] = useState(Number(data.prodDay) + Number(data.notProdDay) + Number(data.leavingDay) + Number(data.availableDay));\n\n    const [hasChange, setHasChange] = useState(false);\n\n    // Calculate firstday of current month to compare with firstDayMonth of displayed Pxx\n    let firstDayOfCurrentMonth = new Date(Date.now());\n    firstDayOfCurrentMonth.setDate(1);\n    firstDayOfCurrentMonth = firstDayOfCurrentMonth.toISOString().substring(0, 10);\n\n    const editable = data.month ? (data.month.firstDay >= firstDayOfCurrentMonth) : false;\n\n    useEffect(() => {\n        if (hasChange && workingDay >= (prodDayComponent + notProdDayComponent + leavingDayComponent)) {\n            setAvailableDayComponent(workingDay - (prodDayComponent + notProdDayComponent + leavingDayComponent))\n            dispatch(updatePxx({\n                _id: data._id,\n                name: data.name,\n                month: data.month._id,\n                prodDay: prodDayComponent,\n                notProdDay: notProdDayComponent,\n                leavingDay: leavingDayComponent,\n                availableDay: workingDay - (prodDayComponent + notProdDayComponent + leavingDayComponent)\n            }));\n            setHasChange(false);\n        }\n    // eslint-disable-next-line\n    },[workingDay, prodDayComponent, notProdDayComponent, leavingDayComponent, data]);\n\n    return (\n        <>\n            <Row className=\"py-1\">\n                <Col xs={4} className=\"text-center align-middle\"><b>{data.month ? data.month.name : 'Not created Yeat'}</b> <i>{workingDay ? `(${workingDay}d)` : null}</i></Col>\n                <Col xs={2} className=\"text-center align-middle px-1\">\n                    <InputGroup>\n                        <FormControl\n                            type=\"number\"\n                            min={0}\n                            max={(workingDay - notProdDayComponent - leavingDayComponent) ? (workingDay - notProdDayComponent - leavingDayComponent) : '-'}\n                            step={0.5}\n                            disabled={!editable || !workingDay}\n                            className=\"align-middle text-center p-0\"\n                            value={prodDayComponent && prodDayComponent.toString()}\n                            onChange={(e) => {\n                                setProdDayComponent(Number(e.target.value));\n                                setHasChange(true);\n                            }}\n                        />\n                    </InputGroup>\n                </Col>\n                <Col xs={2} className=\"text-center align-middle px-1\">\n                    <InputGroup>\n                        <FormControl\n                            type=\"number\"\n                            min={0}\n                            max={(workingDay - prodDayComponent - leavingDayComponent) ? (workingDay - prodDayComponent - leavingDayComponent) : '-'}\n                            step={0.5}\n                            disabled={!editable || !workingDay}\n                            className=\"align-middle text-center p-0\"\n                            value={notProdDayComponent && notProdDayComponent.toString()}\n                            onChange={(e) => {\n                                if (!e.target.value.toString().match(/[0-9]*[,.]$/g)) {\n                                    setNotProdDayComponent(Number(e.target.value));\n                                    setHasChange(true);\n                                }\n                            }}\n                        />\n                    </InputGroup>\n                </Col>\n                <Col xs={2} className=\"text-center align-middle px-1\">\n                    <InputGroup>\n                        <FormControl\n                            type=\"number\"\n                            min={0}\n                            max={(workingDay - prodDayComponent - notProdDayComponent) ? (workingDay - prodDayComponent - notProdDayComponent) : '-'}\n                            step={0.5}\n                            disabled={!editable || !workingDay}\n                            className=\"align-middle text-center p-0\"\n                            value={leavingDayComponent && leavingDayComponent.toString()}\n                            onChange={(e) => {\n                                setLeavingDayComponent(Number(e.target.value));\n                                setHasChange(true);\n                            }}\n                        />\n                    </InputGroup>\n                </Col>\n                <Col xs={2} className=\"text-center align-middle px-1\">\n                    <InputGroup>\n                        <FormControl\n                            type=\"number\"\n                            min={0}\n                            max={workingDay ? workingDay : '-'}\n                            step={0.5}\n                            className=\"align-middle text-center p-0\"\n                            value={availableDayComponent && availableDayComponent.toString()}\n                            disabled\n                        />\n                    </InputGroup>\n                </Col>\n\n            </Row>\n        </>\n    )\n}\n\nexport default PxxUserLine;\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport Button from 'react-bootstrap/Button';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\nimport PxxUserLine from '../components/PxxUserLine';\nimport { getMyConsultantPxxToEdit } from '../actions/pxxActions';\nimport ListGroup from 'react-bootstrap/ListGroup';\n\nconst PxxEditor = ({ consultantsMy, consultantFocus, searchDate, navigationMonthHandler }) => {\n\n    const dispatch = useDispatch();\n\n    const [numberOfMonth] = useState(5);\n\n    const pxxMyToEdit = useSelector(state => state.pxxMyToEdit);\n    const { loading: loadingPxx, error: errorPxx, pxx } = pxxMyToEdit;\n\n    const pxxUpdate = useSelector(state => state.pxxUpdate);\n    const { loading: loadingUpdate, error: errorUpdate } = pxxUpdate;\n\n    let consultantId = consultantsMy[consultantFocus]._id;\n    \n    useEffect(() => {\n\n        // Effect when loading component and each time entry parameters change\n        dispatch(getMyConsultantPxxToEdit(consultantId, searchDate, numberOfMonth));\n    }, [dispatch, searchDate, numberOfMonth, consultantId]);\n\n    return (\n        <ListGroup.Item>\n\n            <Row>\n                <Col xs={4} className=\"text-center align-middle px-1 pb-2\" style={{height: '2em'}}> {loadingUpdate && <Loader />}</Col>\n                <Col xs={2} className=\"text-center align-middle px-1 pb-2\"><strong>Prd</strong></Col>\n                <Col xs={2} className=\"text-center align-middle px-1 pb-2\"><strong>NPrd</strong></Col>\n                <Col xs={2} className=\"text-center align-middle px-1 pb-2\"><strong>Hld</strong></Col>\n                <Col xs={2} className=\"text-center align-middle px-1 pb-2\"><strong>Avlb</strong></Col>\n            </Row>\n\n            {loadingPxx ? <Loader /> : errorPxx ? <Message variant=\"danger\">{errorPxx}</Message> : (\n                pxx.map((line, key) => (\n                        <PxxUserLine\n                            key={key}\n                            data={line}\n                        />\n                ))\n            )}\n\n            {errorUpdate && (\n                <Row><Message variant='danger'>{errorUpdate}</Message></Row>\n            )}\n            \n            <Row>\n                <Col xs={0} md={6}></Col>\n                <Col xs={6} md={2} className=\"text-right\">\n                    <Button\n                        className='btn btn-primary mt-3'\n                        variant='primary'\n                        size='sm'\n                        onClick={() => navigationMonthHandler(-1)}\n                        block\n                    ><i className=\"fas fa-caret-left\"></i>  Previous</Button>\n                </Col>\n                <Col xs={6} md={2} className=\"text-left\">\n                    <Button\n                        className='btn btn-primary mt-3'\n                        variant='primary'\n                        size='sm'\n                        onClick={() => navigationMonthHandler(1)}\n                        block\n                    >Next  <i className=\"fas fa-caret-right\"></i></Button>\n                </Col>\n                <Col xs={0} md={2}></Col>\n            </Row>\n\n        </ListGroup.Item>\n    )\n}\n\nexport default PxxEditor;\n","import React, {useState} from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nconst DropDownTitleContainer = ({children, title, close}) => {\n\n    const [hide, setHide] = useState(close);\n\n    return (\n        <Row className='mt-3'>\n            <Col>\n                <Button\n                    onClick={() => setHide(!hide)}\n                    variant='light'\n                    className='text-left'\n                    block\n                > <h3>{hide ? (\n                    <><i className=\"fas fa-caret-down\"></i> {title}</>\n                ) : (\n                        <><i className=\"fas fa-caret-up\"></i> {title}</>\n                    )}</h3></Button>\n\n                {!hide && children}\n            </Col>\n        </Row>\n    )\n}\n\nDropDownTitleContainer.defaultProps = {\n    close: true\n};\n\nexport default DropDownTitleContainer\n","import axios from 'axios';\nimport fs from 'fs';\nimport {\n    CONSULTANTS_ALL_ADMIN_DETAILS_FAIL,\n    CONSULTANTS_ALL_ADMIN_DETAILS_REQUEST,\n    CONSULTANTS_ALL_ADMIN_DETAILS_SUCCESS,\n    CONSULTANTS_MY_DETAILS_FAIL,\n    CONSULTANTS_MY_DETAILS_FOCUS,\n    CONSULTANTS_MY_DETAILS_REQUEST,\n    CONSULTANTS_MY_DETAILS_SUCCESS,\n    CONSULTANT_MY_FAIL,\n    CONSULTANT_MY_REQUEST,\n    CONSULTANT_MY_SUCCESS,\n    CONSULTANT_MY_UPDATE_FAIL,\n    CONSULTANT_MY_UPDATE_REQUEST,\n    CONSULTANT_MY_UPDATE_SUCCESS,\n    CONSULTANT_CREATE_REQUEST,\n    CONSULTANT_CREATE_SUCCESS,\n    CONSULTANT_CREATE_FAIL,\n    CONSULTANT_CDM_LIST_REQUEST,\n    CONSULTANT_CDM_LIST_SUCCESS,\n    CONSULTANT_CDM_LIST_FAIL,\n    CONSULTANT_PRACTICE_LIST_REQUEST,\n    CONSULTANT_PRACTICE_LIST_FAIL,\n    CONSULTANT_PRACTICE_LIST_SUCCESS,\n    CONSULTANT_DELETE_REQUEST,\n    CONSULTANT_DELETE_FAIL,\n    CONSULTANT_DELETE_SUCCESS,\n    CONSULTANT_UPDATE_COMMENT_REQUEST,\n    CONSULTANT_UPDATE_COMMENT_SUCCESS,\n    CONSULTANT_UPDATE_COMMENT_FAIL,\n    //CONSULTANT_ALL_ACCESS_REQUEST,\n    //CONSULTANT_ALL_ACCESS_SUCCESS,\n    //CONSULTANT_ALL_ACCESS_FAIL,\n    CONSULTANT_ALL_SKILLS_REQUEST,\n    CONSULTANT_ALL_SKILLS_SUCCESS,\n    CONSULTANT_ALL_SKILLS_FAIL,\n    CONSULTANT_ADD_SKILL_REQUEST,\n    CONSULTANT_ADD_SKILL_SUCCESS,\n    CONSULTANT_ADD_SKILL_FAIL,\n    CONSULTANT_DELETE_SKILL_REQUEST,\n    CONSULTANT_DELETE_SKILL_FAIL,\n    CONSULTANT_UPDATE_SKILL_REQUEST,\n    CONSULTANT_UPDATE_SKILL_FAIL,\n    CONSULTANT_UPDATE_SKILL_SUCCESS,\n    CONSULTANT_ALL_STAFF_REQUEST,\n    CONSULTANT_ALL_STAFF_SUCCESS,\n    CONSULTANT_ALL_STAFF_FAIL,\n    CONSULTANT_DELETE_SKILL_SUCCESS,\n    CONSULTANT_SKILLS_REQUEST,\n    CONSULTANT_SKILLS_FAIL,\n    CONSULTANT_SKILLS_SUCCESS,\n    CONSULTANT_CDM_REQUEST,\n    CONSULTANT_CDM_SUCCESS,\n    CONSULTANT_CDM_FAIL,\n    CONSULTANTS_ALL_LEADERS_REQUEST,\n    CONSULTANTS_ALL_LEADERS_SUCCESS,\n    CONSULTANTS_ALL_LEADERS_FAIL,\n    CONSULTANT_MASS_IMPORT_REQUEST,\n    CONSULTANT_MASS_IMPORT_SUCCESS,\n    CONSULTANT_MASS_IMPORT_FAIL,\n    CONSULTANT_UPLOAD_WK_REQUEST,\n    CONSULTANT_UPLOAD_WK_SUCCESS,\n    CONSULTANT_UPLOAD_WK_FAIL,\n    CONSULTANT_UPDATE_WK_REQUEST,\n    CONSULTANT_UPDATE_WK_SUCCESS,\n    CONSULTANT_UPDATE_WK_FAIL\n} from '../constants/consultantConstants';\n\nexport const getAllMyConsultants = () => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: CONSULTANTS_MY_DETAILS_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                'Content-type': 'Application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        const { data } = await axios.get('/api/consultants', config);        \n\n        dispatch({ type: CONSULTANTS_MY_DETAILS_SUCCESS, payload: data });\n\n} catch (error) {\n    dispatch({\n        type: CONSULTANTS_MY_DETAILS_FAIL,\n        payload: error.response && error.response.data.message\n            ? error.response.data.message\n            : error.message\n    });\n}\n};\n\nexport const setConsultantFocus = (focus) => async(dispatch) => {\n    dispatch({type: CONSULTANTS_MY_DETAILS_FOCUS, payload: focus});\n}\n\nexport const getMyConsultant = (consultantId) => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: CONSULTANT_MY_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                'Content-type': 'Application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        const { data } = await axios.get(`/api/consultants/${consultantId}`, config);\n\n        dispatch({ type: CONSULTANT_MY_SUCCESS, payload: data });\n\n    } catch (error) {\n        dispatch({\n            type: CONSULTANT_MY_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\n\nexport const updateMyConsultant = (consultant) => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: CONSULTANT_MY_UPDATE_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                'Content-type': 'Application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        const { data } = await axios.put(`/api/consultants/${consultant._id}`, consultant, config);\n        if (!data) {\n            throw new Error('Error: your modification is not saved')\n        }\n\n        dispatch({ type: CONSULTANT_MY_UPDATE_SUCCESS });\n\n    } catch (error) {\n        dispatch({\n            type: CONSULTANT_MY_UPDATE_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\nexport const createConsultant = (consultant) => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: CONSULTANT_CREATE_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                'Content-type': 'Application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        const { data } = await axios.post('/api/consultants', consultant, config);\n\n        dispatch({ type: CONSULTANT_CREATE_SUCCESS, payload: data });\n\n} catch (error) {\n    dispatch({\n        type: CONSULTANT_CREATE_FAIL,\n        payload: error.response && error.response.data.message\n            ? error.response.data.message\n            : error.message\n    });\n}\n};\n\nexport const deleteConsultant = (consultantId) => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: CONSULTANT_DELETE_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                'Content-type': 'Application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        await axios.delete(`/api/consultants/${consultantId}`, config);\n\n        dispatch({ type: CONSULTANT_DELETE_SUCCESS });\n\n} catch (error) {\n    dispatch({\n        type: CONSULTANT_DELETE_FAIL,\n        payload: error.response && error.response.data.message\n            ? error.response.data.message\n            : error.message\n    });\n}\n};\n\nexport const getAllCDM = (practice) => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: CONSULTANT_CDM_LIST_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                'Content-type': 'Application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        const { data } = await axios.get(`/api/consultants/cdm/${practice}`, config);\n\n        dispatch({ type: CONSULTANT_CDM_LIST_SUCCESS, payload: data });\n\n    } catch (error) {\n        dispatch({\n            type: CONSULTANT_CDM_LIST_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\nexport const getAllPractice = () => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: CONSULTANT_PRACTICE_LIST_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                'Content-type': 'Application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        const { data } = await axios.get(`/api/consultants/practicelist`, config);\n\n        dispatch({ type: CONSULTANT_PRACTICE_LIST_SUCCESS, payload: data });\n\n    } catch (error) {\n        dispatch({\n            type: CONSULTANT_PRACTICE_LIST_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\nexport const getAllStaffs = (consultantId) => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: CONSULTANT_ALL_STAFF_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        const { data } = await axios.get(`/api/consultants/staffings?consultantId=${consultantId}`, config);\n\n        dispatch({ type: CONSULTANT_ALL_STAFF_SUCCESS, payload: data });\n\n    } catch (error) {\n        dispatch({\n            type: CONSULTANT_ALL_STAFF_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\nexport const updateComment = (consultantId, commentText) => async(dispatch, getState) => {\n    try {\n\n        dispatch({\n            type: CONSULTANT_UPDATE_COMMENT_REQUEST,\n        });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers:{\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n        await axios.put(`/api/consultants/comment/${consultantId}`, {commentText}, config);\n\n        dispatch({ type: CONSULTANT_UPDATE_COMMENT_SUCCESS });\n\n    } catch (error) {\n        dispatch({\n            type: CONSULTANT_UPDATE_COMMENT_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\nexport const getAllLeaders = (searchValue='') => async (dispatch, getState) => {\n    try {\n        dispatch({type: CONSULTANTS_ALL_LEADERS_REQUEST})\n        \n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        const { data } = await axios.get(`/api/consultants/leaderslist?searchLeader=${searchValue}`, config);\n\n        dispatch({ type: CONSULTANTS_ALL_LEADERS_SUCCESS, payload: data });\n\n        \n    } catch (error) {\n\n        dispatch({ \n            type: CONSULTANTS_ALL_LEADERS_FAIL, \n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n}\n\nexport const getAllMyAdminConsultants = (keyword = '', pageNumber = '', pageSize = '15') => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: CONSULTANTS_ALL_ADMIN_DETAILS_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        const { data } = await axios.get(`/api/consultants/admin/consultants?keyword=${keyword}&pageNumber=${pageNumber}&pageSize=${pageSize}`, config);\n        \n        dispatch({ type: CONSULTANTS_ALL_ADMIN_DETAILS_SUCCESS, payload: data });\n\n    } catch (error) {\n        dispatch({\n            type: CONSULTANTS_ALL_ADMIN_DETAILS_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\nexport const getConsultantCdm = (consultantId) => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: CONSULTANT_CDM_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        const { data } = await axios.get(`/api/consultants/${consultantId}/cdm`, config);\n\n        dispatch({ type: CONSULTANT_CDM_SUCCESS, payload: data });\n\n    } catch (error) {\n        dispatch({\n            type: CONSULTANT_CDM_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\nexport const getConsultantSkills = (consultantId) => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: CONSULTANT_SKILLS_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        const { data } = await axios.get(`/api/consultants/${consultantId}/skill`, config);\n\n        dispatch({ type: CONSULTANT_SKILLS_SUCCESS, payload: data.quality });\n\n    } catch (error) {\n        dispatch({\n            type: CONSULTANT_SKILLS_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\nexport const getAllConsultantSkills = () => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: CONSULTANT_ALL_SKILLS_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        const { data } = await axios.get(`/api/consultants/skills`, config);\n\n        dispatch({ type: CONSULTANT_ALL_SKILLS_SUCCESS, payload: data.skills });\n\n    } catch (error) {\n        dispatch({\n            type: CONSULTANT_ALL_SKILLS_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\nexport const consultantAddASkill = (consultantId, skillId, level) => async (dispatch, getState) => {\n\n    //console.log(\"consultantId\", consultantId, 'skillId', skillId, 'level', level);\n\n    try {\n        const skill = {\n            skill: skillId,\n            level: level\n        }\n\n        dispatch({ type: CONSULTANT_ADD_SKILL_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        await axios.put(`/api/consultants/${consultantId}/skill`, skill, config);\n\n        dispatch({ type: CONSULTANT_ADD_SKILL_SUCCESS });\n\n    } catch (error) {\n        dispatch({\n            type: CONSULTANT_ADD_SKILL_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\nexport const consultantDeleteSkill = (consultantId, skillId) => async (dispatch, getState) => {\n\n    //console.log(\"consultantId\", consultantId, 'skillId', skillId);\n\n    try {\n\n        dispatch({ type: CONSULTANT_DELETE_SKILL_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        await axios.delete(`/api/consultants/${consultantId}/skill/${skillId}`, config);\n\n        dispatch({ type: CONSULTANT_DELETE_SKILL_SUCCESS });\n\n    } catch (error) {\n        dispatch({\n            type: CONSULTANT_DELETE_SKILL_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\nexport const consultantUpdateASkillLevel = (consultantId, skillId, level) => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: CONSULTANT_UPDATE_SKILL_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        await axios.put(`/api/consultants/${consultantId}/skill/${skillId}`, { level }, config);\n\n        dispatch({ type: CONSULTANT_UPDATE_SKILL_SUCCESS });\n\n    } catch (error) {\n        dispatch({\n            type: CONSULTANT_UPDATE_SKILL_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\nexport const consultantImportInMass = (data) => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: CONSULTANT_MASS_IMPORT_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                'Content-type': 'Application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        await axios.put(`/api/consultants/admin/mass-import`, data, config);\n\n        dispatch({ type: CONSULTANT_MASS_IMPORT_SUCCESS });\n\n    } catch (error) {\n        dispatch({\n            type: CONSULTANT_MASS_IMPORT_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\nexport const uploadConsultantWk = (file) => async (dispatch, getState) => {\n    try {\n        dispatch({type: CONSULTANT_UPLOAD_WK_REQUEST})\n        \n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        const { data } = await axios.post(`/api/upload/consultant`, file, config);\n\n        dispatch({ type: CONSULTANT_UPLOAD_WK_SUCCESS, payload: data });\n\n        \n    } catch (error) {\n\n        dispatch({ \n            type: CONSULTANT_UPLOAD_WK_FAIL, \n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n}\n\nexport const updateConsultantWk = (path) => async (dispatch, getState) => {\n    try {\n        dispatch({type: CONSULTANT_UPDATE_WK_REQUEST})\n        \n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                'Content-type': 'Application/json',\n                'responseType': 'stream',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        const { data } = await axios.put(`/api/consultants/admin/wk`, path, config);\n        /* axios.put(`/api/consultants/admin/wk`, path, config)\n            .then((response) => {\n                response.data.pipe(fs.createWriteStream(\"tempsfile.txt\"))\n            })\n            .catch(error => console.log(error)); */\n        \n        dispatch({ type: CONSULTANT_UPDATE_WK_SUCCESS, payload: data });\n        //dispatch({ type: CONSULTANT_UPDATE_WK_SUCCESS, payload: 'OK' });\n\n        \n    } catch (error) {\n\n        dispatch({ \n            type: CONSULTANT_UPDATE_WK_FAIL, \n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n}","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport Table from 'react-bootstrap/Table';\nimport { setConsultantFocus } from '../actions/consultantActions';\nimport Button from 'react-bootstrap/Button';\n\nconst ConsultantsTab = ({ history, consultantsMy, focusActive }) => {\n\n    const dispatch = useDispatch();\n\n    const onClickHandler = (focus, consultantId) => {\n        focusActive && dispatch(setConsultantFocus(focus));\n        //focusActive && setFocus(focus);\n        history.push(`/editconsultant/${consultantId}`);\n    };\n\n    return (\n\n        <Table responsive hover striped className='mt-3'>\n            <thead>\n                <tr className='table-light'>\n                    <th className='align-middle text-dark'>Consultant name</th>\n                    <th className='align-middle text-dark'>Matricule</th>\n                    <th className='align-middle text-dark'>Practice</th>\n                    <th className='align-middle text-dark'>Valued</th>\n                    <th className='align-middle text-dark'>Arrival</th>\n                    <th className='align-middle text-dark'>Leaving</th>\n                    <th className='align-middle text-dark'>Seniority</th>\n                    <th className='align-middle text-dark'>Comment</th>\n                    <th className='align-middle text-dark'></th>\n                </tr>\n            </thead>\n\n            <tbody>\n                {consultantsMy.map((consultant, focus) => (\n                    <tr key={consultant._id} onClick={() => focusActive && dispatch(setConsultantFocus(focus))}>\n                        <td className='align-middle'>{consultant.name}</td>\n                        <td className='align-middle'>{consultant.matricule}</td>\n                        <td className='align-middle'>{consultant.practice}</td>\n                        <td className='align-middle'>{consultant.valued ? consultant.valued.substring(0,10) : ''}</td>\n                        <td className='align-middle'>{consultant.arrival ? consultant.arrival.substring(0,10) : ''}</td>\n                        <td className='align-middle'>{consultant.leaving ? consultant.leaving.substring(0,10) : ''}</td>\n                        <td className='align-middle'>{\n                                consultant.valued ? ((new Date(Date.now()) - new Date(consultant.valued.substring(0,10)))/(1000*3600*24*365.25)).toString().substring(0,4) : 0\n                            } years</td>\n                        <td className='align-middle'>{consultant.comment}</td>\n                        <td className='align-middle'>\n                            <Button className='btn btn-light p-1' onClick={() => onClickHandler(focus, consultant._id)}>\n                                <i className=\"fas fa-user-edit\"></i>\n                            </Button>\n                        </td>\n                    </tr>\n                ))}\n            </tbody>\n        </Table>\n    )\n}\n\nexport default ConsultantsTab;\n","import React from 'react'\nimport { Helmet } from 'react-helmet';\n\nconst Meta = ({ title }) => {\n    return (\n        <Helmet>\n            <title>{title}</title>\n        </Helmet>\n    )\n}\n\nMeta.defaultProps = {\n    title: 'Performance App'\n}\n\nexport default Meta\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Table from 'react-bootstrap/Table';\nimport Button from 'react-bootstrap/Button';\nimport Loader from './Loader';\nimport { getAllStaffs } from '../actions/consultantActions';\n\nconst ViewStaffs = ({ history, consultantId, displayedDeal = '', onNavigate = () => ('') }) => {\n\n    const dispatch = useDispatch();\n    const consultantAllStaffs = useSelector(state => state.consultantAllStaffs);\n    const { loading, staffings } = consultantAllStaffs;\n\n    useEffect(() => {\n        if (consultantId) {\n            dispatch(getAllStaffs(consultantId));\n        }\n    }, [dispatch, consultantId]);\n\n    return (\n        <Row>\n            <Col>\n                {loading && <Loader />}\n                <Table responsive hover striped className='mt-3'>\n                    <thead>\n                        <tr className='table-light'>\n                            <th className='align-middle text-dark'>Company</th>\n                            <th className='align-middle text-dark'>Title</th>\n                            <th className='align-middle text-dark'>Practice</th>\n                            <th className='align-middle text-dark'>Probability</th>\n                            <th className='align-middle text-dark'>Start</th>\n                            <th className='align-middle text-dark'>Deal status</th>\n                            <th className='align-middle text-dark'>Request status</th>\n                            <th></th>\n                        </tr>\n                    </thead>\n\n                    <tbody>\n                        {staffings && staffings.map(deal => (deal._id.toString() !== displayedDeal.toString()) && (\n                            <tr key={deal._id}>\n                                <td className='align-middle'>{deal.company}</td>\n                                <td className='align-middle'>{deal.title}</td>\n                                <td className='align-middle'>{deal.mainPractice}</td>\n                                <td className='align-middle'>{deal.probability} %</td>\n                                <td className='align-middle'>{deal.startDate.substring(0, 10)}</td>\n                                <td className='align-middle'>{deal.status}</td>\n                                <td className='align-middle'>{deal.requestStatus}</td>\n                                <td className='align-middle'>\n                                        <Button\n                                            onClick={() => {\n                                                history.push(`/staffing/${deal._id}`);\n                                                onNavigate();\n                                            }}\n                                            variant='light'\n                                        ><i className=\"fas fa-edit\"></i></Button>\n                                </td>\n                            </tr>\n                        ))}\n                    </tbody>\n\n                </Table>\n            </Col>\n        </Row>\n    )\n}\n\nexport default ViewStaffs;\n","import axios from 'axios';\nimport { \n    DEAL_ALL_LIST_FAIL,\n    DEAL_ALL_LIST_REQUEST,\n    DEAL_ALL_LIST_SUCCESS,\n    DEAL_CREATE_FAIL, \n    DEAL_CREATE_REQUEST, \n    DEAL_CREATE_SUCCESS, \n    DEAL_DELETE_FAIL, \n    DEAL_DELETE_REQUEST,\n    DEAL_DELETE_SUCCESS,\n    DEAL_EDIT_FAIL,\n    DEAL_EDIT_REQUEST,\n    DEAL_EDIT_SUCCESS,\n    DEAL_MASS_IMPORT_FAIL,\n    DEAL_MASS_IMPORT_REQUEST,\n    DEAL_MASS_IMPORT_SUCCESS,\n    DEAL_OLD_FAIL,\n    DEAL_OLD_REQUEST,\n    DEAL_OLD_SUCCESS,\n    DEAL_UPDATE_FAIL,\n    DEAL_UPDATE_REQUEST,\n    DEAL_UPDATE_SUCCESS\n} from '../constants/dealConstants';\n\n\nexport const createDeal = (deal) => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: DEAL_CREATE_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                'Content-type': 'Application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        const { data } = await axios.post(`/api/deals`, deal, config);\n\n       dispatch({ type: DEAL_CREATE_SUCCESS, payload: data._id });\n\n    } catch (error) {\n        dispatch({\n            type: DEAL_CREATE_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\nexport const updateDeal = (dealId, deal) => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: DEAL_UPDATE_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                'Content-type': 'Application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        await axios.put(`/api/deals/${dealId}`, deal, config);\n\n       dispatch({ type: DEAL_UPDATE_SUCCESS });\n\n    } catch (error) {\n        dispatch({\n            type: DEAL_UPDATE_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\nexport const getAllDeals = (keyword, pageNumber = 1, pageSize = 20, state = '') => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: DEAL_ALL_LIST_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        const { data } = await axios.get(`/api/deals?title=${keyword.title}&company=${keyword.company}&contact=${keyword.contact}&status=${keyword.status}&request=${keyword.request}&pageNumber=${pageNumber}&pageSize=${pageSize}&state=${state}&filterMy=${keyword.filterMy}&staff=${keyword.staff}`, config);\n\n       dispatch({ type: DEAL_ALL_LIST_SUCCESS, payload: data });\n\n    } catch (error) {\n        dispatch({\n            type: DEAL_ALL_LIST_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\nexport const deleteDeal = (id) => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: DEAL_DELETE_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        //await axios.delete(`/api/deals?id=${id}`, config);\n        await axios.delete(`/api/deals/${id}`, config);\n\n       dispatch({ type: DEAL_DELETE_SUCCESS });\n\n    } catch (error) {\n        dispatch({\n            type: DEAL_DELETE_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\nexport const getDealToEdit = (id) => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: DEAL_EDIT_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        const { data } = await axios.get(`/api/deals/${id}`, config);\n\n       dispatch({ type: DEAL_EDIT_SUCCESS, payload: data });\n\n    } catch (error) {\n        dispatch({\n            type: DEAL_EDIT_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\nexport const getOldDeals = (consultantId) => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: DEAL_OLD_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        const { data } = await axios.get(`/api/deals/old?consultantId=${consultantId}`, config);\n\n       dispatch({ type: DEAL_OLD_SUCCESS, payload: data });\n\n    } catch (error) {\n        dispatch({\n            type: DEAL_OLD_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\nexport const dealsImportInMass = (datas) => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: DEAL_MASS_IMPORT_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                'Content-type': 'Application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        const { data } = await axios.put(`/api/deals/admin/mass-import`, datas, config);\n\n       dispatch({ type: DEAL_MASS_IMPORT_SUCCESS, payload: data });\n\n    } catch (error) {\n        dispatch({\n            type: DEAL_MASS_IMPORT_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Table from 'react-bootstrap/Table';\nimport Button from 'react-bootstrap/Button';\nimport Loader from './Loader';\nimport { getOldDeals } from '../actions/dealActions';\n\nconst ViewOldStaffs = ({ history, consultantId, displayedDeal = '', onNavigate = () => ('') }) => {\n\n    const dispatch = useDispatch();\n\n    const dealOld = useSelector(state => state.dealOld);\n    const { loading, oldDeals } = dealOld;\n\n    /*const consultantAllStaffs = useSelector(state => state.consultantAllStaffs);\n    const { loading, staffings } = consultantAllStaffs;*/\n\n    useEffect(() => {\n        if (consultantId) {\n            dispatch(getOldDeals(consultantId));\n        }\n    }, [dispatch, consultantId]);\n\n    return (\n        <Row>\n            <Col>\n                {loading && <Loader />}\n                <Table responsive hover striped className='mt-3'>\n                    <thead>\n                        <tr className='table-light'>\n                            <th className='align-middle text-dark'>Company</th>\n                            <th className='align-middle text-dark'>Title</th>\n                            <th className='align-middle text-dark'>Practice</th>\n                            <th className='align-middle text-dark'>Probability</th>\n                            <th className='align-middle text-dark'>Start</th>\n                            <th className='align-middle text-dark'>Deal status</th>\n                            <th className='align-middle text-dark'>Request status</th>\n                            <th></th>\n                        </tr>\n                    </thead>\n\n                    <tbody>\n                        {oldDeals && oldDeals.map(deal => (\n                            <tr key={deal._id}>\n                                <td className='align-middle'>{deal.company}</td>\n                                <td className='align-middle'>{deal.title}</td>\n                                <td className='align-middle'>{deal.mainPractice}</td>\n                                <td className='align-middle'>{deal.probability} %</td>\n                                <td className='align-middle'>{deal.startDate.substring(0, 10)}</td>\n                                <td className='align-middle'>{deal.status}</td>\n                                <td className='align-middle'>{deal.staffingRequest.requestStatus}</td>\n                                <td className='align-middle'>\n                                        <Button\n                                            onClick={() => {\n                                                history.push(`/staffing/${deal._id}`);\n                                                onNavigate();\n                                            }}\n                                            variant='light'\n                                        ><i className=\"fas fa-edit\"></i></Button>\n                                </td>\n                            </tr>\n                        ))}\n                    </tbody>\n\n                </Table>\n            </Col>\n        </Row>\n    )\n}\n\nexport default ViewOldStaffs;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\n\nconst Rating = ({ value, setValue, text, color, editable }) => {\n\n    const valueList = [...new Array(Math.floor(value)).fill(1)];\n    if (value % 1 >= 0.5) {\n        valueList.push(value % 1)\n    }\n    while (valueList.length < 5) {\n        valueList.push(0)\n    }\n\n    return (\n        \n            <Form.Group className='mb-0'>\n                <InputGroup>\n                    {valueList && valueList.map((x, val) => (\n                        <span key={val}>\n                            <Button\n                                className='mx-0 px-0'\n                                variant='ligth'\n                                onClick={() => { editable && (\n                                    x >= 1\n                                        ? setValue(val)\n                                        : x >= 0.5\n                                            ? setValue(val + 1)\n                                            : setValue(val + 0.5)\n                                )}}\n                            ><i style={{ color }}\n                                className={\n                                    x >= 1\n                                        ? 'fas fa-star'\n                                        : x >= 0.5\n                                            ? 'fas fa-star-half-alt'\n                                            : 'far fa-star'\n                                }>\n                                </i></Button>\n\n                        </span>\n                    ))}\n                    <span>{text && text}</span>\n                </InputGroup>\n            </Form.Group>\n\n        \n\n    )\n};\n\nRating.defaultProps = {\n    color: '#f8e825',\n    text: '',\n    editable: true,\n};\n\n\nRating.propTypes = {\n    value: PropTypes.number.isRequired,\n    text: PropTypes.string.isRequired,\n    color: PropTypes.string,\n};\n\nexport default Rating;","import React, {useEffect, useState} from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport DropDownTitleContainer from '../components/DropDownTitleContainer';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Button from 'react-bootstrap/Button';\nimport Tooltip from 'react-bootstrap/Tooltip';\n\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport { consultantAddASkill, consultantDeleteSkill, consultantUpdateASkillLevel, getAllConsultantSkills, getConsultantSkills } from '../actions/consultantActions';\nimport Rating from './Rating';\nimport { CONSULTANT_UPDATE_SKILL_RESET } from '../constants/consultantConstants';\n\nconst SkillsDetails = ({consultantId, close=true, editable=true}) => {\n\n    const dispatch = useDispatch();\n\n    const [skillCategory, setSkillCategory] = useState('default');\n    const [skillId, setSkillId] = useState('default');\n    const [skillLevel, setSkillLevel] = useState(1);\n    const [skillCategoryList, setSkillCategoryList] = useState([]);\n\n    const [qualityOrdonned, setQualityOrdonned] = useState([]);\n\n    const [update, setUpdate] = useState(false);\n\n\n    const consultantAllSkills = useSelector(state => state.consultantAllSkills);\n    const { skills: skillsAll } = consultantAllSkills;\n\n    const consultantSkills = useSelector(state => state.consultantSkills);\n    const { loading, skills } = consultantSkills;\n\n    const consultantAddSkill = useSelector(state => state.consultantAddSkill);\n    const { loading: loadingConsultantAddSkill, success: successConsultantAddSkill, error: errorConsultantAddSkill } = consultantAddSkill;\n\n    /* const consultantUpdateSkill = useSelector(state => state.consultantUpdateSkill);\n    const { error: errorConsultantUpdateSkill } = consultantUpdateSkill;\n\n    const consultantDeleteSkillReducer = useSelector(state => state.consultantDeleteSkill);\n    const { success: successConsultantDeleteSkill } = consultantDeleteSkillReducer; */\n\n    useEffect(() => {\n        if (!skillsAll) {\n            dispatch(getAllConsultantSkills());\n        }\n    }, [dispatch, skillsAll]);\n\n    useEffect(() => {\n        dispatch(getConsultantSkills(consultantId));\n        //if(!skills) {\n        //}\n    }, [dispatch, consultantId]);\n\n    useEffect(() => {\n        if (skills) {\n            //setQuality(skills)\n            const ordonnedSkills = orderSkills(skills);\n            setQualityOrdonned(ordonnedSkills);\n        }\n    }, [dispatch, skills, consultantId]);\n\n    useEffect(() => {\n        if(update && !loading) {\n            dispatch(getConsultantSkills(consultantId));\n            setUpdate(false);\n        }\n    }, [dispatch, update, consultantId, loading])\n\n    useEffect(() => {\n        if (skillsAll) {\n            let categoryList = skillsAll.map(x => x.category);\n            categoryList = [...new Set(categoryList)];\n            setSkillCategoryList(categoryList);\n        }\n    }, [skillsAll]);\n\n    useEffect(() => {\n        //if ((successConsultantAddSkill || successConsultantDeleteSkill)) {\n        if (successConsultantAddSkill) {\n            setUpdate(true);\n        }\n    }, [\n        successConsultantAddSkill,\n        //successConsultantDeleteSkill,\n    ]);\n\n    const orderSkills = (skills) => {\n        const categoryList = [...new Set(skills.map(x => x.skill.category))]\n        const orderSkills = []\n        for (let incr = 0 ; incr < categoryList.length ; incr++) {\n            orderSkills.push({\n                category: categoryList[incr],\n                data: skills.filter( x => x.skill.category === categoryList[incr])\n            })\n        }\n        return orderSkills;\n    }\n\n    const handleAddSkill = (consultantId, skillId, skillLevel) => {\n        dispatch(consultantAddASkill(consultantId, skillId, skillLevel));\n    }\n\n    /* const handlerDeleteConsultantSkill = (consultantId, skillId) => {\n        dispatch(consultantDeleteSkill(consultantId, skillId));\n    }\n\n    const handleUpdateSkillLevel = (consultantId, skillId, level) => {\n        dispatch(consultantUpdateASkillLevel(consultantId, skillId, level));\n    } */\n\n    return (\n\n        <DropDownTitleContainer title='Skills' close={close}>\n\n            {editable && (\n                <ListGroup.Item>\n                    <h4>Add skills</h4>\n\n                    <Form.Row className='mt-3 align-items-end'>\n                        <Col xs={12} md={3}>\n                            <Form.Group controlId='skillCategory'>\n                                <Form.Label><strong>Category</strong></Form.Label>\n                                <Form.Control\n                                    as='select'\n                                    value={skillCategory ? skillCategory : 'default'}\n                                    onChange={(e) => setSkillCategory(e.target.value)}\n                                    required\n                                >\n                                    <option value='default'>Please Select</option>\n                                    {skillCategoryList && (\n                                        skillCategoryList.map((x, val) => (\n                                            <option\n                                                value={x}\n                                                key={val}\n                                            >{x}</option>\n                                        )))}\n                                </Form.Control>\n                            </Form.Group>\n                        </Col>\n                        <Col xs={12} md={3} >\n                            <Form.Group controlId='skillName'>\n                                <Form.Label><strong>Skill</strong></Form.Label>\n                                <OverlayTrigger\n                                    placement=\"top\"\n                                    overlay={<Tooltip id=\"button-tooltip-2\">{skillId && skillsAll ? skillsAll.map(x => (x._id === skillId) && x.description) : 'no description'}</Tooltip>}\n                                >\n                                    <Form.Control\n                                        as='select'\n                                        value={skillId ? skillId : 'default'}\n                                        onChange={(e) => setSkillId(e.target.value)}\n                                        required\n                                    >\n                                        <option value='default'>Please Select</option>\n                                        {skillsAll && skillCategory && (\n                                            skillsAll.map((x, val) => (\n                                                x.category === skillCategory && (\n                                                    <option\n                                                        value={x._id}\n                                                        key={val}\n                                                    >{x.name}</option>\n                                                )\n                                            )))}\n\n                                    </Form.Control>\n                                </OverlayTrigger>\n                            </Form.Group>\n                        </Col>\n                        <Col xs={12} md={3} >\n                            <Form.Group controlId='skillLevel'>\n                                <Form.Label><strong>Level</strong></Form.Label>\n                                <Form.Control\n                                    type='number'\n                                    min={0}\n                                    max={5}\n                                    step={0.5}\n                                    value={skillLevel ? skillLevel : 1}\n                                    onChange={(e) => setSkillLevel(e.target.value)}\n                                    required\n                                ></Form.Control>\n                            </Form.Group>\n                        </Col>\n                        <Col xs={12} md={3} className='align-items-bottom'>\n                            <Form.Group>\n                                <InputGroup>\n                                    <Button\n                                        block\n                                        onClick={() => handleAddSkill(consultantId, skillId, skillLevel)}\n                                    >{loadingConsultantAddSkill ? <Loader /> : 'Add'}</Button>\n                                </InputGroup>\n                            </Form.Group>\n                        </Col>\n                    </Form.Row>\n\n                    {/*errorConsultantUpdateSkill && <Message variant='danger'>{errorConsultantUpdateSkill}</Message>*/}\n                    {errorConsultantAddSkill && <Message variant='danger'>{errorConsultantAddSkill}</Message>}\n\n                </ListGroup.Item>\n\n            )}\n            \n            \n            <ListGroup.Item>\n                {qualityOrdonned && qualityOrdonned.length ? (\n                    <ListGroup variant='flush'>\n                        {qualityOrdonned.map((categoryList,val) => (\n                            <ListGroup.Item key={val}>\n                                <h4>{categoryList.category}</h4>\n                                {categoryList.data.map( (x,val) => (\n                                    <SkillDisplayLine \n                                        consultantId={consultantId}\n                                        key={val}\n                                        skill={x}\n                                        val={val}\n                                        //handleUpdateSkillLevel={handleUpdateSkillLevel}\n                                        //handlerDeleteConsultantSkill={handlerDeleteConsultantSkill}\n                                        setUpdate={setUpdate}\n                                        editable={editable}\n                                    />\n                                ))}\n                            </ListGroup.Item>\n                        ))}\n                    </ListGroup>\n                ) : <p>Please add quality</p>}\n            </ListGroup.Item>\n\n        </DropDownTitleContainer>\n    )\n}\n\nconst SkillDisplayLine = ({ \n    consultantId, \n    skill, \n    val, \n    //handleUpdateSkillLevel, \n    //handlerDeleteConsultantSkill, \n    setUpdate,\n    editable=true}) => {\n\n    const dispatch = useDispatch();\n\n    const consultantUpdateSkill = useSelector(state => state.consultantUpdateSkill);\n    const { success: successConsultantUpdateSkill } = consultantUpdateSkill;\n\n    const consultantDeleteSkillReducer = useSelector(state => state.consultantDeleteSkill);\n    const { success: successConsultantDeleteSkill } = consultantDeleteSkillReducer;\n    \n    const [level, setLevel] = useState(skill.level);\n    const [waitingValidationLevel, setWaitingValidationLevel] = useState(skill.level);\n\n    useEffect(() => {\n        if (successConsultantDeleteSkill) {\n            setUpdate(true);\n        }\n    }, [\n        successConsultantDeleteSkill,\n        setUpdate\n    ]);\n\n    useEffect(() => {\n        if (successConsultantUpdateSkill) {\n            setLevel(waitingValidationLevel);\n            dispatch({type: CONSULTANT_UPDATE_SKILL_RESET})\n        }\n    },[dispatch, successConsultantUpdateSkill, waitingValidationLevel])\n\n\n    const updateLevel = (newLevel) => {\n        \n        dispatch(consultantUpdateASkillLevel(consultantId, skill.skill._id, newLevel));\n        setWaitingValidationLevel(newLevel);\n\n        //handleUpdateSkillLevel(consultantId, skill.skill._id, newLevel)\n    }\n\n\n    const handlerDeleteConsultantSkill = (consultantId, skillId) => {\n        dispatch(consultantDeleteSkill(consultantId, skillId));\n    }   \n\n\n    return (\n        <>\n            {/*errorConsultantUpdateSkill && <Message variant='danger'>{errorConsultantUpdateSkill}</Message>*/}\n            <Form.Row key={val}>\n                <Col xs={3}>\n                    <Form.Group controlId='skillName' className='mb-0'>\n                        <Form.Control\n                            plaintext\n                            readOnly\n                            value={skill.skill && skill.skill.name}\n                        ></Form.Control>\n                    </Form.Group>\n                </Col>\n                <Col>\n                    <Rating\n                        value={Number(level)}\n                        setValue={updateLevel}\n                        editable={editable}\n                    />\n                </Col>\n\n                <Col>\n                    {editable && (\n                        <Form.Group className='mb-0'>\n                            <InputGroup>\n                                <Button\n                                    //style={{color:'grey'}}\n                                    variant=\"secondary\"\n                                    size='sm'\n                                    onClick={() => handlerDeleteConsultantSkill(consultantId, skill.skill._id)}\n                                ><i className=\"fas fa-times-circle\"></i></Button>\n                            </InputGroup>\n                        </Form.Group>\n                    )}\n                </Col>\n            </Form.Row>\n        </>\n    )\n}\n\nexport default SkillsDetails\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport { LinkContainer } from 'react-router-bootstrap';\nimport Button from 'react-bootstrap/Button';\nimport Nav from 'react-bootstrap/Nav';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport PxxEditor from '../components/PxxEditor';\nimport DropDownTitleContainer from '../components/DropDownTitleContainer';\nimport ConsultantsTab from '../components/ConsultantsTab';\nimport Message from '../components/Message';\nimport Meta from '../components/Meta';\nimport Loader from '../components/Loader';\nimport { getAllMyConsultants, updateComment } from '../actions/consultantActions';\nimport { Container, FormControl, InputGroup } from 'react-bootstrap';\nimport { setConsultantFocus } from '../actions/consultantActions';\nimport ViewStaffs from '../components/ViewStaffs';\nimport ViewOldStaffs from '../components/ViewOldStaffs';\nimport SkillsDetails from '../components/SkillsDetails';\nimport DisplayChildren from '../components/DisplayChildren';\n\nconst PxxEditScreen = ({ history }) => {\n\n    const dispatch = useDispatch();\n\n    const [commentText, setCommentText] = useState('');\n\n    const userLogin = useSelector(state => state.userLogin);\n    const { userInfo } = userLogin;\n\n    const consultantsMyList = useSelector(state => state.consultantsMyList);\n    const { loading: loadingConsultantsMyList, error: errorConsultantsMyList, consultantsMy, focus } = consultantsMyList;\n\n    const [searchDate, setSearchDate] = useState(new Date(Date.now()));\n\n    useEffect(() => {\n\n        if (!userInfo) {\n            history.push('/login');\n        }\n    }, [history, userInfo]);\n\n\n    useEffect(() => {\n        // Effect to start loading my consultants and then to update every time focus change\n        dispatch(getAllMyConsultants());\n    }, [dispatch, focus])\n\n    useEffect(() => {\n        if (consultantsMy) {\n            setCommentText(consultantsMy[focus].comment);\n        }\n    }, [consultantsMy, focus]);\n\n    const navigationMonthHandler = (value) => {\n        const navigationDate = new Date(searchDate);\n        navigationDate.setMonth(navigationDate.getMonth() + value);\n        setSearchDate(navigationDate);\n    }\n\n    const navigationConsultantHandler = (value) => {\n\n        if (((focus + value) >= 0) && ((focus + value) < consultantsMy.length)) {\n            dispatch(setConsultantFocus(focus + value));\n        }\n    }\n\n    const updateCommentHandler = (consultantId, value) => {\n        dispatch(updateComment(consultantId, value));\n    }\n\n    return (\n\n        <Container>\n            <Meta />\n            {loadingConsultantsMyList ? <Loader /> :\n                errorConsultantsMyList ? <Message variant='danger'>{errorConsultantsMyList}</Message>\n                    : !consultantsMy || consultantsMy.length === 0 ?\n                        <Message variant='info'>You don't have consultant to edit yet</Message> : (\n                            <>\n                                <div className='border-bottom p-3'>\n                                    <Row>\n                                        <Col className=\"text-center\" xs={2}>\n                                            <Button\n                                                variant='primary'\n                                                size='sm'\n                                                onClick={() => navigationConsultantHandler(-1)}\n                                                disabled={focus === 0}\n                                            ><i className=\"fas fa-caret-left\"></i>\n                                            </Button>\n                                        </Col>\n                                        <Col className=\"text-center\" xs={8}>\n                                            <LinkContainer to={`/editconsultant/${consultantsMy[focus]._id}`}>\n                                                <Nav.Link>\n                                                    <h4>{consultantsMy[focus].name} <i>({consultantsMy[focus].matricule})</i></h4>\n                                                </Nav.Link>\n                                            </LinkContainer>\n                                        </Col>\n                                        <Col className=\"text-center\" xs={2}>\n                                            <Button\n                                                variant='primary'\n                                                size='sm'\n                                                onClick={() => navigationConsultantHandler(1)}\n                                                disabled={focus === consultantsMy.length - 1}\n                                            ><i className=\"fas fa-caret-right\"></i>\n                                            </Button>\n                                        </Col>\n                                    </Row>\n\n                                    <Row className='mt-3'>\n                                        <Col xs={12} md={4}>\n                                            <ListGroup>\n                                            <ListGroup.Item>\n                                                <Row className=\"my-3\">\n                                                    <Col className=\"text-left\"><b>Arrival:</b> {consultantsMy[focus].arrival && consultantsMy[focus].arrival.substring(0, 10)}</Col>\n                                                    <Col className=\"text-left\"><b>Valued:</b> {consultantsMy[focus].valued && consultantsMy[focus].valued.substring(0, 10)}</Col>\n                                                    <Col className=\"text-left\"><b>Leaving:</b> {consultantsMy[focus].leaving && consultantsMy[focus].leaving.substring(0, 10)}</Col>\n                                                </Row>\n                                                <Row className=\"my-3\">\n                                                    <Col><b>Seniority:</b> {((new Date(Date.now()) - new Date(consultantsMy[focus].arrival.substring(0, 10))) / (1000 * 3600 * 24 * 365.25)).toString().substring(0, 4)} years</Col>\n                                                </Row>\n\n                                                <Row className=\"my-3\">\n                                                    <Col>\n                                                        {!(consultantsMy[focus]._id === userInfo.consultantProfil._id) && (\n                                                            <>\n                                                                <label htmlFor=\"comment\"><strong>Staffing comment</strong></label>\n                                                                <InputGroup>\n                                                                    <FormControl\n                                                                        as='textarea'\n                                                                        rows={4}\n                                                                        id='comment'\n                                                                        value={commentText}\n                                                                        placeholder='Please enter a comment'\n                                                                        onChange={(e) => {\n                                                                            setCommentText(e.target.value);\n                                                                            updateCommentHandler(consultantsMy[focus]._id, e.target.value)\n                                                                        }}\n                                                                    ></FormControl>\n                                                                </InputGroup>\n                                                            </>\n                                                        )}\n\n                                                    </Col>\n                                                </Row>\n                                            </ListGroup.Item>\n                                            </ListGroup>\n                                        </Col>\n\n                                        <Col xs={12} md={8}>\n                                            <PxxEditor\n                                                consultantsMy={consultantsMy}\n                                                consultantFocus={focus}\n                                                searchDate={searchDate}\n                                                navigationMonthHandler={navigationMonthHandler}\n                                            />\n                                        </Col>\n                                    </Row>\n                                </div>\n\n                                <Row>\n                                    <Col>\n                                        <DisplayChildren access='viewStaffings'>\n                                            <DropDownTitleContainer title='Staffings on track' close={false}>\n                                                <ViewStaffs\n                                                    history={history}\n                                                    consultantId={consultantsMy[focus]._id}\n                                                />\n                                            </DropDownTitleContainer>\n                                        </DisplayChildren>\n                                    </Col>\n                                </Row>\n\n                                <Row>\n                                    <Col>\n                                        <DropDownTitleContainer title='Old staffings' close={true}>\n                                            <ViewOldStaffs\n                                                history={history}\n                                                consultantId={consultantsMy[focus]._id}\n                                            />\n                                        </DropDownTitleContainer>\n                                    </Col>\n                                </Row>\n                                \n                                <Row>\n                                    <Col>\n                                        <DisplayChildren access='viewSkills'>\n                                            <SkillsDetails consultantId={consultantsMy[focus]._id} />\n                                        </DisplayChildren>\n                                    </Col>\n                                </Row>\n\n                                <Row>\n                                    <Col>\n                                        <DisplayChildren access='viewOthersConsultants'>\n                                            <DropDownTitleContainer title='Others consultants' close={true}>\n                                                <ConsultantsTab\n                                                    consultantsMy={consultantsMy}\n                                                    history={history}\n                                                    focusActive={true}\n                                                />\n                                            </DropDownTitleContainer>\n                                        </DisplayChildren>\n                                    </Col>\n                                </Row>\n                            </>\n                        )}\n        </Container>\n    )\n}\n\nexport default PxxEditScreen;\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\nimport DropDownTitleContainer from '../components/DropDownTitleContainer';\nimport {\n    createConsultant,\n    getAllCDM,\n    getAllPractice,\n    getMyConsultant,\n    updateMyConsultant\n} from '../actions/consultantActions';\nimport {\n    CONSULTANT_CREATE_RESET,\n    CONSULTANT_GRADE,\n    CONSULTANT_MY_UPDATE_RESET\n} from '../constants/consultantConstants';\nimport SkillsDetails from '../components/SkillsDetails';\nimport DisplayChildren from '../components/DisplayChildren';\n\nconst ConsultantEditScreen = ({ history, match }) => {\n\n    const dispatch = useDispatch();\n\n    const [name, setName] = useState('');\n    const [email, setEmail] = useState('');\n    const [matricule, setMatricule] = useState('');\n    const [practice, setPractice] = useState('');\n    const [grade, setGrade] = useState('Analyst');\n\n    const [cdm, setCdm] = useState('');\n    const [arrival, setArrival] = useState('');\n    const [valued, setValued] = useState('');\n    const [leaving, setLeaving] = useState('');\n    const [seniority, setSeniority] = useState('');\n    const [isCDM, setIsCDM] = useState(false);\n\n    const [partialTime, setPartialTime] = useState(false);\n    const [startPartialTime, setStartPartialTime] = useState('');\n    const [endPartialTime, setEndPartialTime] = useState('');\n    const [valueMonday, setValueMonday] = useState(1);\n    const [valueTuesday, setValueTuesday] = useState(1);\n    const [valueWednesday, setValueWednesday] = useState(1);\n    const [valueThursday, setValueThursday] = useState(1);\n    const [valueFriday, setValueFriday] = useState(1);\n\n    const [errorMessage, setErrorMessage] = useState('');\n    const [successMessage, setSuccessMessage] = useState('');\n\n    const [update, setUpdate] = useState(false);\n\n    const valueEditType = match.params.id ? 'edit' : 'create';\n\n    const userLogin = useSelector(state => state.userLogin);\n    const { userInfo } = userLogin;\n\n    const consultantMy = useSelector(state => state.consultantMy);\n    const { loading, error, consultant } = consultantMy;\n\n    const consultantMyUpdate = useSelector(state => state.consultantMyUpdate);\n    const { loading: loadingUpdate, error: errorUpdate, success: successUpdate } = consultantMyUpdate;\n\n    const consultantCreate = useSelector(state => state.consultantCreate);\n    const { loading: loadingCreate, error: errorCreate, success: successCreate, consultantCreated } = consultantCreate;\n\n    const consultantCDMList = useSelector(state => state.consultantCDMList);\n    const { error: errorCDM, cdmList } = consultantCDMList;\n\n    const consultantPracticeList = useSelector(state => state.consultantPracticeList);\n    const { error: errorPractice, practiceList } = consultantPracticeList;\n\n    useEffect(() => {\n        if (!userInfo) {\n            history.push('/login');\n        }\n    }, [history, userInfo]);\n\n    useEffect(() => {\n        if (match.params.id) {\n            if (!consultant) {\n                dispatch(getMyConsultant(match.params.id));\n                /*if (!loading) {\n                    //setUpdate(false);\n                }*/\n            } /*else {\n                if (consultant._id !== match.params.id) {\n                    dispatch(getMyConsultant(match.params.id));\n                    //setUpdate(false);\n                }\n            }*/\n        }\n    }, [dispatch, match, consultant]);\n\n    useEffect(() => {\n        if (match.params.id) {\n\n            if (consultant && consultant._id !== match.params.id) {\n                dispatch(getMyConsultant(match.params.id));\n                //setUpdate(false);\n            }\n\n        }\n    }, [dispatch, match, consultant]);\n\n    useEffect(() => {\n        if (update) {\n            dispatch(getMyConsultant(match.params.id));\n            setUpdate(false);\n        }\n    }, [dispatch, update, match]);\n\n    useEffect(() => {\n        if ((match.params.id) && (successUpdate)) {\n            setUpdate(true);\n        }\n    }, [\n        match,\n        successUpdate\n    ]);\n\n    useEffect(() => {\n        // Only in admin Level 0 access we can modify consultant Practice\n        if (!practiceList) {\n            dispatch(getAllPractice());\n        }\n    }, [dispatch, userInfo, practiceList]);\n\n    useEffect(() => {\n        // Load default data for cdm in the current practice\n        if (practice) {\n            dispatch(getAllCDM(practice));\n        }\n    }, [dispatch, practice]);\n\n    useEffect(() => {\n        if ((match.params.id) && consultant) {\n            setName(consultant.name);\n            setEmail(consultant.email);\n            setMatricule(consultant.matricule);\n            setPractice(consultant.practice);\n            setGrade(consultant.grade);\n            //setQuality(consultant.quality || []);\n            setCdm(consultant.cdmId ? consultant.cdmId : ''); //'waiting affectation'\n            setArrival(consultant.arrival.substring(0, 10));\n            setValued(consultant.valued ? consultant.valued.substring(0, 10) : '');\n            setLeaving(consultant.leaving ? consultant.leaving.substring(0, 10) : '');\n            setSeniority(((new Date(Date.now()) - new Date(consultant.arrival.substring(0, 10))) / (1000 * 3600 * 24 * 365.25)).toString().substring(0, 4));\n            setIsCDM(consultant.isCDM || false);\n            setPartialTime(consultant.isPartialTime.value);\n            setStartPartialTime(consultant.isPartialTime.start.substring(0, 10) ? consultant.isPartialTime.start.substring(0, 10) : false)\n            setEndPartialTime(consultant.isPartialTime.end.substring(0, 10) ? consultant.isPartialTime.end.substring(0, 10) : false)\n            setValueMonday(consultant.isPartialTime.week.filter(x => x.num === 1)[0].worked)\n            setValueTuesday(consultant.isPartialTime.week.filter(x => x.num === 2)[0].worked)\n            setValueWednesday(consultant.isPartialTime.week.filter(x => x.num === 3)[0].worked)\n            setValueThursday(consultant.isPartialTime.week.filter(x => x.num === 4)[0].worked)\n            setValueFriday(consultant.isPartialTime.week.filter(x => x.num === 5)[0].worked)\n        }\n    }, [match, consultant, valueEditType]);\n\n    useEffect(() => {\n\n        // Charge default practice for admin Level 0 user\n        if (!practice && userInfo && practiceList) {\n            setPractice(practiceList[0]);\n        }\n\n    }, [\n        userInfo,\n        practice,\n        practiceList,\n        cdm,\n        cdmList\n    ]);\n\n    useEffect(() => {\n        if (errorUpdate) {\n            setErrorMessage({ message: errorUpdate, type: 'danger' });\n            dispatch({ type: CONSULTANT_MY_UPDATE_RESET })\n        }\n        if (successUpdate) {\n            setSuccessMessage({ message: 'Consultant updated', type: 'success' });\n            dispatch({ type: CONSULTANT_MY_UPDATE_RESET })\n        }\n        if (errorCreate) {\n            setErrorMessage({ message: errorCreate, type: 'danger' });\n            dispatch({ type: CONSULTANT_CREATE_RESET })\n        }\n        if (successCreate) {\n            setSuccessMessage({ message: 'Consultant created', type: 'success' });\n            history.push(`/editconsultant/${consultantCreated._id}`);\n            dispatch({ type: CONSULTANT_CREATE_RESET })\n        }\n    }, [dispatch, history, errorUpdate, successUpdate, successCreate, errorCreate, consultantCreated]);\n\n    const submitHandler = (e) => {\n\n        e.preventDefault();\n\n        if (valueEditType === 'edit') {\n\n            const updatedUser = {\n                ...consultant,\n                name: name,\n                matricule: matricule,\n                arrival: new Date(arrival),\n                valued: new Date(valued),\n                leaving: leaving ? new Date(leaving) : null,\n                isCDM: isCDM,\n                grade: grade,\n                cdmId: cdm,\n                isPartialTime: {\n                    value: partialTime,\n                    start: partialTime ? startPartialTime : '',\n                    end: partialTime ? endPartialTime : '',\n                    week: [\n                        { num: 1, worked: partialTime ? valueMonday : 1 },\n                        { num: 2, worked: partialTime ? valueTuesday : 1 },\n                        { num: 3, worked: partialTime ? valueWednesday : 1 },\n                        { num: 4, worked: partialTime ? valueThursday : 1 },\n                        { num: 5, worked: partialTime ? valueFriday : 1 }\n                    ]\n                }\n            }\n            dispatch(updateMyConsultant(updatedUser));\n        }\n\n        if (valueEditType === 'create') {\n            const consultant = {\n                name,\n                email,\n                matricule,\n                arrival,\n                valued,\n                leaving,\n                practice,\n                isCDM,\n                grade: grade,\n                cdmId: cdm,\n                isPartialTime: {\n                    value: partialTime,\n                    start: startPartialTime,\n                    end: endPartialTime,\n                    week: [\n                        { num: 1, worked: valueMonday },\n                        { num: 2, worked: valueTuesday },\n                        { num: 3, worked: valueWednesday },\n                        { num: 4, worked: valueThursday },\n                        { num: 5, worked: valueFriday },\n                    ]\n                }\n            }\n            dispatch(createConsultant(consultant));\n        }\n    }\n\n    const changeValueDateHandler = (e) => {\n        setValued(e.substring(0, 10));\n        setSeniority(((new Date(Date.now()) - new Date(e.substring(0, 10))) / (1000 * 3600 * 24 * 365.25)).toString().substring(0, 4));\n    }\n\n    const goBackHandler = () => {\n        history.go(-1);\n        setErrorMessage('');\n        setSuccessMessage('');\n    }\n\n    return (\n        <>\n            {error && <Message variant='danger'>{error}</Message>}\n            {errorMessage && <Message variant='danger'>{errorMessage.message}</Message>}\n\n            {errorCDM && <Message variant='danger'>{errorCDM}</Message>}\n            {errorPractice && <Message variant='danger'>{errorPractice}</Message>}\n\n            {loading && <Loader />}\n\n            <Button className='mb-3' onClick={() => goBackHandler()}>\n                Go Back\n            </Button>\n            <DisplayChildren access='editConsultantProfil'>\n\n                <Container>\n                    <Row className='justify-content-md-center'>\n                        <Col xs={12} md={8}>\n\n                            <Form onSubmit={submitHandler}>\n                                <h2>{name && name}</h2>\n\n                                <DropDownTitleContainer title='Personal' close={valueEditType !== 'create'}>\n                                    <ListGroup.Item>\n                                        <Form.Row>\n                                            <Col>\n                                                <Form.Group controlId='name'>\n                                                    <Form.Label><b>Name</b></Form.Label>\n                                                    <Form.Control\n                                                        type='name'\n                                                        placeholder='Enter Name'\n                                                        value={name && name}\n                                                        onChange={(e) => setName(e.target.value)}\n                                                        required\n                                                    ></Form.Control>\n                                                </Form.Group>\n                                            </Col>\n                                        </Form.Row>\n\n                                        <Form.Row>\n                                            <Col>\n                                                <Form.Group controlId='matricule'>\n                                                    <Form.Label><b>Matricule</b></Form.Label>\n                                                    <Form.Control\n                                                        type='text'\n                                                        placeholder='Enter Matricule'\n                                                        value={matricule && matricule}\n                                                        onChange={(e) => setMatricule(e.target.value)}\n                                                        required\n                                                    ></Form.Control>\n                                                </Form.Group>\n                                            </Col>\n                                            <Col>\n                                                <Form.Group controlId='seniority'>\n                                                    <Form.Label><b>Seniority</b> <i>(years)</i></Form.Label>\n                                                    <Form.Control\n                                                        type='text'\n                                                        placeholder='-'\n                                                        value={seniority && seniority}\n                                                        readOnly\n                                                    ></Form.Control>\n                                                </Form.Group>\n                                            </Col>\n                                        </Form.Row>\n\n                                        <Form.Row>\n                                            <Col>\n                                                <Form.Group controlId='email'>\n                                                    <Form.Label><b>Email Address</b></Form.Label>\n                                                    <Form.Control\n                                                        type='email'\n                                                        placeholder='Enter email'\n                                                        value={email && email}\n                                                        onChange={(e) => setEmail(e.target.value)}\n                                                        required\n                                                    ></Form.Control>\n                                                </Form.Group>\n                                            </Col>\n                                        </Form.Row>\n\n                                    </ListGroup.Item>\n                                </DropDownTitleContainer>\n\n                                {consultant && valueEditType !== 'create' && (\n                                    <SkillsDetails consultantId={consultant._id} />\n                                )}\n\n                                <DropDownTitleContainer title='Profil' close={false}>\n                                    <ListGroup.Item>\n                                        <Form.Row>\n                                            <Col>\n                                                <Form.Group controlId='practice'>\n                                                    <Form.Label><b>Practice</b></Form.Label>\n                                                    <InputGroup>\n                                                        <Form.Control\n                                                            as='select'\n                                                            value={practice ? practice : userInfo ? userInfo.consultantProfil.practice : \"\"}\n                                                            //disabled={userInfo && !(userInfo.adminLevel === 0)}\n                                                            onChange={(e) => {\n                                                                setPractice(e.target.value)\n                                                            }}\n                                                            required\n                                                        >\n                                                            {!practiceList ? <option value={practice && practice}>{practice}</option>\n                                                                : errorPractice ? <Message variant='Danger'>No Practice found</Message>\n                                                                    : (\n                                                                        practiceList.map(x => (\n                                                                            <option\n                                                                                key={x}\n                                                                                value={x}\n                                                                                disabled={x === '-' ? true : false}\n                                                                            >{x}</option>\n                                                                        ))\n                                                                    )}\n                                                        </Form.Control>\n                                                    </InputGroup>\n                                                </Form.Group>\n                                            </Col>\n                                        </Form.Row>\n\n                                        <Form.Row>\n                                            <Col>\n                                                <Form.Group controlId='grade'>\n                                                    <Form.Label><b>Grade</b></Form.Label>\n                                                    <Form.Control\n                                                        as='select'\n                                                        placeholder='Enter grade'\n                                                        value={grade && grade}\n                                                        onChange={(e) => setGrade(e.target.value)}\n                                                        required\n                                                    >\n                                                        {CONSULTANT_GRADE.map(x => (\n                                                            <option key={x} value={x}>{x}</option>\n                                                        ))}\n                                                    </Form.Control>\n                                                </Form.Group>\n                                            </Col>\n                                        </Form.Row>\n\n                                        <Form.Row>\n                                            <Col>\n                                                <Form.Group controlId='cdm'>\n                                                    <Form.Label><b>CDM</b></Form.Label>\n                                                    <Form.Control\n                                                        as='select'\n                                                        value={cdm ? cdm : 'default'}\n                                                        //disabled={userInfo && !(userInfo.adminLevel <= 2)}\n                                                        onChange={(e) => setCdm(e.target.value)}\n                                                        required\n                                                    >\n                                                        <option value='default'>Please Select</option>\n                                                        {!cdmList ? 'No cdm'\n                                                            : errorCDM ? <Message variant='danger'>No CDM found, please verify Practice</Message>\n                                                                : cdmList.length && (\n                                                                    cdmList.map(x => (\n                                                                        <option\n                                                                            key={x._id}\n                                                                            value={x._id}\n                                                                        >{x.name}</option>\n                                                                    ))\n                                                                )}\n                                                    </Form.Control>\n\n                                                </Form.Group>\n                                            </Col>\n                                        </Form.Row>\n\n                                        <ListGroup.Item>\n                                            <Form.Row>\n                                                <Col>\n                                                    <Form.Group controlId='valued'>\n                                                        <Form.Label><b>Valued date</b></Form.Label>\n                                                        <Form.Control\n                                                            type='date'\n                                                            value={valued && valued}\n                                                            onChange={(e) => changeValueDateHandler(e.target.value)}\n                                                            required\n                                                        ></Form.Control>\n                                                    </Form.Group>\n                                                </Col>\n\n                                                <Col>\n                                                    <Form.Group controlId='arrival'>\n                                                        <Form.Label><b>Arrival date</b></Form.Label>\n                                                        <Form.Control\n                                                            type='date'\n                                                            value={arrival && arrival}\n                                                            min={valued}\n                                                            onChange={(e) => {\n                                                                setArrival(e.target.value);\n                                                            }}\n                                                            required\n                                                        ></Form.Control>\n                                                    </Form.Group>\n                                                </Col>\n\n                                                <Col>\n                                                    <Form.Group controlId='leaving'>\n                                                        <Form.Label><b>Leaving date</b></Form.Label>\n                                                        <Form.Control\n                                                            type='date'\n                                                            value={leaving && leaving}\n                                                            min={arrival}\n                                                            onChange={(e) => setLeaving(e.target.value)}\n                                                        ></Form.Control>\n                                                    </Form.Group>\n                                                </Col>\n                                            </Form.Row>\n                                        </ListGroup.Item>\n\n                                        <ListGroup.Item>\n                                            <Form.Row>\n                                                <Col>\n                                                    <Form.Group controlId=\"partialtime\">\n                                                        <Form.Check\n                                                            type=\"checkbox\"\n                                                            label=\"Partial time\"\n                                                            checked={partialTime ? true : false}\n                                                            onChange={(e) => {\n                                                                setPartialTime(e.target.checked)\n                                                            }} />\n                                                    </Form.Group>\n                                                </Col>\n                                                {partialTime && (\n                                                    <>\n                                                        <Col>\n                                                            <Form.Group controlId='startpartialtime'>\n                                                                <Form.Label>Start</Form.Label>\n                                                                <Form.Control\n                                                                    type=\"Date\"\n                                                                    min={arrival && arrival}\n                                                                    value={startPartialTime && startPartialTime}\n                                                                    onChange={(e) => {\n                                                                        setStartPartialTime(e.target.value.substring(0, 10));\n                                                                        !endPartialTime && setEndPartialTime(e.target.value.substring(0, 10));\n                                                                        (endPartialTime < e.target.value.substring(0, 10)) && setEndPartialTime(e.target.value.substring(0, 10));\n                                                                    }}\n                                                                    required\n                                                                ></Form.Control>\n                                                            </Form.Group>\n                                                        </Col>\n\n                                                        <Col>\n                                                            <Form.Group controlId='endpartialtime'>\n                                                                <Form.Label>End</Form.Label>\n                                                                <Form.Control\n                                                                    type=\"Date\"\n                                                                    value={endPartialTime && endPartialTime}\n                                                                    min={startPartialTime || ''}\n                                                                    onChange={(e) => {\n                                                                        setEndPartialTime(e.target.value.substring(0, 10))\n                                                                    }}\n                                                                    required\n                                                                ></Form.Control>\n                                                            </Form.Group>\n                                                        </Col>\n                                                    </>\n                                                )}\n                                            </Form.Row>\n\n                                            {partialTime && (\n                                                <Form.Row>\n                                                    <Col>\n                                                        <Form.Group controlId='monday'>\n                                                            <Form.Label><b>Monday</b></Form.Label>\n                                                            <Form.Control\n                                                                type='Number'\n                                                                min={0}\n                                                                max={1}\n                                                                step={0.5}\n                                                                value={Number(valueMonday)}\n                                                                onChange={(e) => setValueMonday(e.target.value)}\n                                                            ></Form.Control>\n                                                        </Form.Group>\n                                                    </Col>\n                                                    <Col>\n                                                        <Form.Group controlId='tuesday'>\n                                                            <Form.Label><b>Tuesday</b></Form.Label>\n                                                            <Form.Control\n                                                                type='Number'\n                                                                min={0}\n                                                                max={1}\n                                                                step={0.5}\n                                                                value={Number(valueTuesday)}\n                                                                onChange={(e) => setValueTuesday(e.target.value)}\n                                                            ></Form.Control>\n                                                        </Form.Group>\n                                                    </Col>\n                                                    <Col>\n                                                        <Form.Group controlId='wendnesday'>\n                                                            <Form.Label><b>Wendnesday</b></Form.Label>\n                                                            <Form.Control\n                                                                type='Number'\n                                                                min={0}\n                                                                max={1}\n                                                                step={0.5}\n                                                                value={Number(valueWednesday)}\n                                                                onChange={(e) => setValueWednesday(e.target.value)}\n                                                            ></Form.Control>\n                                                        </Form.Group>\n                                                    </Col>\n                                                    <Col>\n                                                        <Form.Group controlId='thursday'>\n                                                            <Form.Label><b>Thursday</b></Form.Label>\n                                                            <Form.Control\n                                                                type='Number'\n                                                                min={0}\n                                                                max={1}\n                                                                step={0.5}\n                                                                value={Number(valueThursday)}\n                                                                onChange={(e) => setValueThursday(e.target.value)}\n                                                            ></Form.Control>\n                                                        </Form.Group>\n                                                    </Col>\n                                                    <Col>\n                                                        <Form.Group controlId='friday'>\n                                                            <Form.Label><b>Friday</b></Form.Label>\n                                                            <Form.Control\n                                                                type='Number'\n                                                                min={0}\n                                                                max={1}\n                                                                step={0.5}\n                                                                value={Number(valueFriday)}\n                                                                onChange={(e) => setValueFriday(e.target.value)}\n                                                            ></Form.Control>\n                                                        </Form.Group>\n                                                    </Col>\n                                                </Form.Row>\n                                            )}\n                                        </ListGroup.Item>\n\n                                        <ListGroup.Item>\n                                            <Form.Row>\n                                                <Col>\n                                                    <Form.Group controlId=\"iscdm\">\n                                                        <Form.Check\n                                                            type=\"checkbox\"\n                                                            label=\"Is CDM\"\n                                                            checked={isCDM ? true : false}\n                                                            onChange={(e) => {\n                                                                setIsCDM(e.target.checked);\n                                                            }} />\n                                                    </Form.Group>\n                                                </Col>\n                                            </Form.Row>\n                                        </ListGroup.Item>\n                                    </ListGroup.Item>\n                                </DropDownTitleContainer>\n\n                                <Form.Row className='pt-3'>\n                                    <Col>\n                                        <Button\n                                            type='submit'\n                                            variant='primary'\n                                            block\n                                            disabled={!name || !email || !matricule || !practice || !cdm || !valued || !arrival}\n                                        >{(loadingUpdate || loadingCreate) ? <Loader /> : valueEditType === 'create' ? \"Create\" : \"Update\"}\n                                        </Button>\n                                    </Col>\n                                </Form.Row>\n                                <Form.Row>\n                                    <Col>\n                                        {successMessage && <Message variant='success'><i className=\"fas fa-check-circle\">  Your information is correctly registered</i></Message>}\n                                    </Col>\n                                </Form.Row>\n\n                            </Form>\n\n\n                        </Col>\n                    </Row>\n                </Container>\n            </DisplayChildren>\n        </>\n    )\n}\n\nexport default ConsultantEditScreen;\n","import React, { useState } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport * as XLSX from 'xlsx';\n\nconst ImportExcelFile = ({setImportData, sheets = 'all'}) => {\n\n    const [fileName, setFileName] = useState('');\n\n    const readFileHandler = async (e) => {\n\n        //const [importData, setImportData] = useState([]);\n\n        let file = e.target.files[0];\n\n        let reader = new FileReader();\n        reader.onload = function (e) {\n\n            let data = e.target.result;\n            let workBook = XLSX.read(data, { type: 'binary' });\n\n            const jsonData = []\n            for (let incr = 0; incr < workBook.SheetNames.length; incr++) {\n                const wsName = workBook.SheetNames[incr];\n                const ws = workBook.Sheets[wsName];\n                jsonData.push(XLSX.utils.sheet_to_json(ws)); //, status:'not imported'}\n            }\n            if (sheets === '1') {\n                setImportData(jsonData[0].map(x => ({...x, status:'not imported'})));\n            }\n            if (sheets === 'all'){\n                setImportData(jsonData);\n            }\n            setFileName(file.name);\n        };\n        reader.readAsBinaryString(file);\n    }\n\n    return (\n        <Form>\n            <Form.File\n                id=\"importData\"\n                custom\n            >\n                <Form.File.Label data-browse=\"Upload\">{fileName ? fileName : '  ...  '}</Form.File.Label>\n                <Form.File.Input onChange={(e) => readFileHandler(e)} />\n            </Form.File>\n        </Form>\n    )\n}\n\nexport default ImportExcelFile\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Image from 'react-bootstrap/Image';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\nimport { uploadConsultantWk, updateConsultantWk } from '../actions/consultantActions';\nimport Form from 'react-bootstrap/Form';\n\nconst FlowImportWKConsultants = (props) => {\n\n    const dispatch = useDispatch();\n\n    const [step, setStep] = useState(0);\n    //const [selectedFile, setSelectedFile] = useState(null);\n\n    const consultantUploadWk = useSelector(state => state.consultantUploadWk);\n    const { loading: loadingUpload, error: errorUpload, path } = consultantUploadWk;\n\n    const consultantUpdateWk = useSelector(state => state.consultantUpdateWk);\n    const { loading: loadingUpdate, error: errorUpdate, message } = consultantUpdateWk;\n\n    const onChangeHandler = (e) => {\n        //setSelectedFile(e.target.files[0]);\n        const data = new FormData();\n        data.append('file', e.target.files[0]);\n        dispatch(uploadConsultantWk(data));\n    }\n    /* const onClickHandler = () => {\n        const data = new FormData();\n        data.append('file', selectedFile);\n        dispatch(uploadConsultantWk(data));\n    } */\n    const startImportData = () => {\n        if (path) {\n            dispatch(updateConsultantWk(path));\n            //const data = updateConsultantWk(path, userInfo);\n            //setMessage(data);\n        }\n    }\n\n    return (\n        <Modal\n            {...props}\n            size=\"lg\"\n            aria-labelledby=\"contained-modal-title-vcenter\"\n            centered\n        //style={{'minHeight': '80vh'}}\n        >\n            <Modal.Header closeButton>\n                <Row className='align-items-center'>\n                    <Col className='text-center'>\n                        <Modal.Title id=\"contained-modal-title-vcenter\">\n                            Import consultants data from Wavekeeper\n                        </Modal.Title>\n                    </Col>\n                </Row>\n            </Modal.Header>\n\n            <Modal.Body>\n                <Row className='mb-3'>\n                    <Col><Button className={step >= 0 ? 'text-primary' : 'text-secondary'} onClick={() => setStep(0)} variant='ligth' disabled={step < 0}><strong>1-Guidelines</strong></Button></Col>\n                    <Col><Button className={step >= 1 ? 'text-primary' : 'text-secondary'} onClick={() => setStep(1)} variant='ligth' disabled={step < 1}><strong>2-Upload in App</strong></Button></Col>\n                    <Col><Button className={step >= 2 ? 'text-primary' : 'text-secondary'} onClick={() => setStep(2)} variant='ligth' disabled={step < 2}><strong>3-Start update</strong></Button></Col>\n                    <Col><Button className={step >= 3 ? 'text-primary' : 'text-secondary'} onClick={() => setStep(3)} variant='ligth' disabled={step < 3}><strong>4-Result</strong></Button></Col>\n                </Row>\n\n                <Row className='align-items-center'>\n\n                    <Col>\n                        {step === 0 && (\n                            <Row>\n                                <Col>\n                                    <h4>Process to export from Wavekeeper <a href=\"https://wavekeeper.wavestone-app.com/web#action=534&model=hr.presence&view_type=list&cids=1&menu_id=92\" target=\"_blank\" rel=\"noopener noreferrer\">(link)</a></h4>\n                                    <p>Please connect to Wavekeeper</p>\n                                    <ul>\n                                        <li>Step 1: Go to collaborators</li>\n                                        <li>Step 2: Apply filter to keep only current consultants</li>\n                                        <li>Step 3: Select all lines and go to actions / export</li>\n                                        <li>Step 4: Select filter 'JPR_export_2'</li>\n                                        <li>Step 5: Save the Excel file on you desktop</li>\n                                    </ul>\n                                    <Image src=\"/images/WK_export_consultants_application_filtres.jpg\" rounded fluid />\n                                </Col>\n                            </Row>\n                        )}\n                        {step === 1 && (\n                            <Row className='align-items-center'>\n                                <Col className='text-center'>\n                                    <h4>Upload your file here</h4>\n                                    {loadingUpload ? <Loader /> : (\n                                        <input \n                                            className='my-3' \n                                            type='file' \n                                            name='hr.presence' \n                                            onChange={onChangeHandler} \n                                        />\n                                    )}\n                                    {errorUpload && <Message variant='danger'>{errorUpload}</Message>}\n                                </Col>\n                            </Row>\n                        )}\n                        {step === 2 && (\n                            path ? (\n                                <Row>\n                                    <Col className='text-center'>\n                                        <h4>Do you want to update your consultants ?</h4>\n                                        {loadingUpdate ? <Loader /> : (\n                                            <Button variant='primary' className='m-3' onClick={startImportData}>\n                                                Update\n                                            </Button>\n                                        )}\n                                        <p>Process could take a few minute</p>\n                                        {errorUpdate && <Message variant='danger'>{errorUpdate}</Message>}\n                                    </Col>\n                                </Row>\n                            ) : (\n                                <Row><Col>Something wrong retry step 2</Col></Row>\n                            )\n                        )}\n                        {step === 3 && (\n                            <Form.Control\n                                as='textarea'\n                                rows={10}\n                                value={message && message}\n                                readOnly\n                            //plaintext\n                            />\n                        )}\n                    </Col>\n                </Row>\n\n\n            </Modal.Body>\n            <Modal.Footer>\n                {step === 3 && (\n                    <Button onClick={props.onHide}>Close</Button>\n                )}\n                {step < 3 && (\n                    <Button\n                        variant='success'\n                        onClick={() => (step + 1 <= 3) && setStep(step + 1)}\n                        disabled={step === 3 || (step === 1 && !path) || (step === 2 && !message)}\n                    >Next</Button>\n                )}\n            </Modal.Footer>\n        </Modal>\n    )\n}\n\nexport default FlowImportWKConsultants;\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteConsultant, getAllMyAdminConsultants, consultantImportInMass } from '../actions/consultantActions';\nimport { CONSULTANT_DELETE_RESET } from '../constants/consultantConstants';\nimport Table from 'react-bootstrap/Table'\nimport Button from 'react-bootstrap/Button';\nimport Loader from '../components/Loader';\nimport Meta from '../components/Meta';\nimport Message from '../components/Message';\nimport ImportExcelFile from '../components/ImportExcelFile';\nimport ReactExport from \"react-export-excel\";\nimport DropDownTitleContainer from '../components/DropDownTitleContainer';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Pagination from 'react-bootstrap/Pagination';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nimport FlowImportWKConsultants from '../components/FlowImportWKConsultants';\nimport DisplayChlidren from '../components/DisplayChildren';\n\nconst ExcelFile = ReactExport.ExcelFile;\nconst ExcelSheet = ReactExport.ExcelFile.ExcelSheet;\nconst ExcelColumn = ReactExport.ExcelFile.ExcelColumn;\n\nconst ManageConsultantScreen = ({ history, match }) => {\n\n    const dispatch = useDispatch();\n\n    const [pageSize, setPageSize] = useState(10000);\n    const [pageNumber, setPageNumber] = useState(1);\n    const [keyword, setKeyword] = useState('');\n\n    const [exportExcel, setExportExcel] = useState('');\n\n    const [importData, setImportData] = useState([]);\n\n    //const [selectedFile, setSelectedFile] = useState(null);\n    //const [message, setMessage] = useState('');\n\n    const [showImportConsultant, setShowImportConsultant] = useState(false);\n\n    const userLogin = useSelector(state => state.userLogin);\n    const { userInfo } = userLogin;\n\n    const consultantsMyAdminList = useSelector(state => state.consultantsMyAdminList);\n    const { loading, error, consultantsMyAdmin, pages, page, count } = consultantsMyAdminList;\n\n    const consultantDelete = useSelector(state => state.consultantDelete);\n    const { success: successConsultantDelete } = consultantDelete;\n\n    const consultantsMassImport = useSelector(state => state.consultantsMassImport);\n    const { loading:loadingMassImport, error:errorMassImport, success:successMassImport } = consultantsMassImport;\n\n    /* const consultantUploadWk = useSelector(state => state.consultantUploadWk);\n    const { loading:loadingUpload, error:errorUpload, path } = consultantUploadWk;\n\n    const consultantUpdateWk = useSelector(state => state.consultantUpdateWk);\n    const { loading:loadingUpdate, error:errorUpdate, message } = consultantUpdateWk; */\n\n\n    useEffect(() => {\n\n        if (userInfo) {\n            dispatch(getAllMyAdminConsultants(keyword, pageNumber, pageSize));\n        } else {\n            history.push('/login');\n        }\n\n    }, [dispatch, history, userInfo, pageNumber, pageSize, keyword, successMassImport]);\n\n    useEffect(() => {\n        if (consultantsMyAdmin) {\n            const exportExcelData = consultantsMyAdmin.map((consultant) => ({\n                'NAME': consultant.name,\n                'EMAIL': consultant.email,\n                'PRACTICE': consultant.practice,\n                'MATRICULE': consultant.matricule,\n                'VALUED': consultant.valued ? consultant.valued.substring(0,10) : '',\n                'ARRIVAL': consultant.arrival ? consultant.arrival.substring(0,10) : '',\n                'LEAVING': consultant.leaving ? consultant.leaving.substring(0,10) : '',\n                'PARTIAL_TIME': consultant.isPartialTime.value,\n                'GRADE': consultant.grade,\n                'IS_CDM': consultant.isCDM,\n                'CDM_MATRICULE': consultant.cdmId && consultant.cdmId.matricule,\n                'CDM_NAME': consultant.cdmId && consultant.cdmId.name,\n                'COMMENT': consultant.comment\n            }));\n            setExportExcel(exportExcelData);\n        }\n    },[consultantsMyAdmin])\n\n    useEffect(() => {\n        if (successConsultantDelete) {\n            dispatch(getAllMyAdminConsultants(keyword, pageNumber, pageSize));\n            dispatch({ type: CONSULTANT_DELETE_RESET });\n        }\n    // eslint-disable-next-line\n    }, [dispatch, successConsultantDelete]);\n\n\n    useEffect(() => {\n        if(importData.length > 0) {\n            dispatch(consultantImportInMass(importData));\n        }\n    },[dispatch, importData]);\n\n    const addConsultantHandler = () => {\n        history.push('/admin/consultant/add');\n    }\n\n    const onClickEditHandler = (consultantId) => {\n        history.push(`/editconsultant/${consultantId}`);\n    };\n\n    const onClickDeleteHandler = (consultant) => {\n        if (window.confirm(`Are you sure to delete user: ${consultant.name} ?`)) {\n            dispatch(deleteConsultant(consultant._id));\n        }\n    }\n\n    return (\n        <>\n            <Meta />\n            {errorMassImport && <Message variant='danger'>{errorMassImport}</Message>}\n\n            <FlowImportWKConsultants \n                show={showImportConsultant}\n                onHide={() => setShowImportConsultant(false)}\n            />\n\n            <DisplayChlidren access='updateConsultantsFromWK'>\n                <Button variant='primary' onClick={() => setShowImportConsultant(true)}>Import WK</Button>\n            </DisplayChlidren>\n\n            <DropDownTitleContainer title='Manage consultants' close={false}>\n                <ListGroup.Item>\n                    \n                    \n                    <Row>\n\n                        <Col xs={6} md={2}>\n                            <Button \n                                className=\"mb-3\" \n                                onClick={() => addConsultantHandler()}\n                            ><i className=\"fas fa-user-edit mr-2\"></i>Add\n                            </Button>\n                        </Col>\n\n                        <Col xs={6} md={2}>\n                            <InputGroup>\n                                <FormControl\n                                    type='text'\n                                    className=\"mb-3\"\n                                    placeholder='Search name'\n                                    value={keyword && keyword}\n                                    onChange={(e) => setKeyword(e.target.value)}\n                                ></FormControl>\n                            </InputGroup>\n                        </Col>\n\n                        <Col xs={6} md={2}>\n                            <Form.Control\n                                plaintext\n                                readOnly\n                                value={count ? `${count} consultants found` : '0 consultant found'} />\n                        </Col>\n\n                        <Col xs={6} md={2}>\n                            {loadingMassImport ? (<Loader />) : (\n                                <ImportExcelFile setImportData={setImportData} />\n                            )}\n                        </Col>\n\n                        <Col xs={6} md={2}>\n                            {exportExcel && (\n                                <ExcelFile element={<Button variant='primary'><i className=\"fas fa-download\"></i>  Download</Button>}>\n                                    <ExcelSheet data={exportExcel} name=\"consultantsSheet\">\n                                        <ExcelColumn label=\"NAME\" value=\"NAME\" />\n                                        <ExcelColumn label=\"EMAIL\" value=\"EMAIL\" />\n                                        <ExcelColumn label=\"PRACTICE\" value=\"PRACTICE\" />\n                                        <ExcelColumn label=\"MATRICULE\" value=\"MATRICULE\" />\n                                        <ExcelColumn label=\"VALUED\" value=\"VALUED\" />\n                                        <ExcelColumn label=\"ARRIVAL\" value=\"ARRIVAL\" />\n                                        <ExcelColumn label=\"LEAVING\" value=\"LEAVING\" />\n                                        <ExcelColumn label=\"PARTIAL_TIME\" value=\"PARTIAL_TIME\" />\n                                        <ExcelColumn label=\"GRADE\" value=\"GRADE\" />\n                                        <ExcelColumn label=\"IS_CDM\" value=\"IS_CDM\" />\n                                        <ExcelColumn label=\"CDM_MATRICULE\" value=\"CDM_MATRICULE\" />\n                                        <ExcelColumn label=\"CDM_NAME\" value=\"CDM_NAME\" />\n                                        <ExcelColumn label=\"COMMENT\" value=\"COMMENT\" />\n                                    </ExcelSheet>\n                                </ExcelFile>\n                            )}\n                        </Col>\n\n                        <Col xs={6} md={2}>\n                            <InputGroup>\n                                <FormControl\n                                    as='select'\n                                    id='number-c'\n                                    className=\"mb-3\"\n                                    value={pageSize && pageSize}\n                                    onChange={(e) => setPageSize(e.target.value)}\n                                >\n                                    {[5, 10, 15, 20, 50, 10000].map(x => (\n                                        <option\n                                            key={x}\n                                            value={x}\n                                        >{x === 10000 ? 'All (export)' : `${x} / page`}</option>\n                                    ))}\n                                </FormControl>\n                            </InputGroup>\n                        </Col>\n\n                    </Row>\n\n                    {consultantsMyAdmin && consultantsMyAdmin.length === 0 ? <Message variant='information'>You have not access to these information</Message> :\n                        loading ? <Loader /> : error ? <Message variant=\"danger\">{error}</Message> : (\n\n\n                            <Table responsive hover striped>\n                                <thead>\n                                    <tr className='table-primary'>\n                                        <th className='align-middle text-light'>Consultant name</th>\n                                        <th className='align-middle text-light'>Matricule</th>\n                                        <th className='align-middle text-light'>Practice</th>\n                                        <th className='align-middle text-light'>Valued</th>\n                                        <th className='align-middle text-light'>Arrival</th>\n                                        <th className='align-middle text-light'>Leaving</th>\n                                        <th className='align-middle text-light'>Seniority</th>\n                                        <th className='align-middle text-light'></th>\n                                        <th className='align-middle text-light'></th>\n                                    </tr>\n                                </thead>\n\n                                <tbody>\n                                    {consultantsMyAdmin && consultantsMyAdmin.map((consultant) => (\n                                        <tr key={consultant._id}>\n                                            <td className='align-middle'>{consultant.name}</td>\n                                            <td className='align-middle'>{consultant.matricule}</td>\n                                            <td className='align-middle'>{consultant.practice}</td>\n                                            <td className='align-middle'>{consultant.valued ? consultant.valued.substring(0, 10) : ''}</td>\n                                            <td className='align-middle'>{consultant.arrival ? consultant.arrival.substring(0, 10) : ''}</td>\n                                            <td className='align-middle'>{consultant.leaving ? consultant.leaving.substring(0, 10) : ''}</td>\n                                            <td className='align-middle'>{\n                                                consultant.valued ? ((new Date(Date.now()) - new Date(consultant.valued.substring(0, 10))) / (1000 * 3600 * 24 * 365.25)).toString().substring(0, 4) : 0\n                                            } years</td>\n                                            <td className='align-middle'>\n                                                <Button\n                                                    className='btn btn-primary p-1'\n                                                    onClick={() => onClickEditHandler(consultant._id)}\n                                                    size='sm'\n                                                ><i className=\"fas fa-user-edit\"></i>\n                                                </Button>\n                                            </td>\n                                            <td className='align-middle'>\n                                                <Button\n                                                    className='btn btn-danger p-1'\n                                                    onClick={() => onClickDeleteHandler(consultant)}\n                                                    size='sm'\n                                                ><i className=\"fas fa-user-times\"></i>\n                                                </Button>\n                                            </td>\n                                        </tr>\n                                    ))}\n                                </tbody>\n                            </Table>\n\n                        )}\n\n                    <Pagination>\n                        <Pagination.Prev\n                            onClick={() => setPageNumber(page - 1)}\n                            disabled={page === 1}\n                        />\n                        {[...Array(pages).keys()].map(x => (\n                            [0, 1, pages - 2, pages - 1].includes(x) ? (\n                                <Pagination.Item\n                                    key={x + 1}\n                                    active={x + 1 === page}\n                                    onClick={() => {\n                                        dispatch(getAllMyAdminConsultants(keyword, x + 1, pageSize));\n                                        setPageNumber(x + 1);\n                                    }}\n                                >{x + 1}</Pagination.Item>\n                            ) : (pages > 4 && x === 2) && (\n                                <Pagination.Ellipsis key={x + 1} />\n                            )\n\n                        ))}\n                        <Pagination.Next\n                            onClick={() => setPageNumber(page + 1)}\n                            disabled={page === pages}\n                        />\n                    </Pagination>\n                </ListGroup.Item>\n            </DropDownTitleContainer>\n        </>\n    )\n}\n\nexport default ManageConsultantScreen;\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Table from 'react-bootstrap/Table';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Pagination from 'react-bootstrap/Pagination';\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nimport DropDownTitleContainer from '../components/DropDownTitleContainer';\nimport Message from '../components/Message';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport { deleteUser, listUsers } from '../actions/userActions';\n\nconst ManageUsersScreen = ({ history }) => {\n\n    const dispatch = useDispatch();\n\n    const [pageSize, setPageSize] = useState(10);\n    const [pageNumber, setPageNumber] = useState(1);\n    const [keyword, setKeyword] = useState('');\n\n    const userLogin = useSelector(state => state.userLogin);\n    const { userInfo } = userLogin;\n\n    const userList = useSelector(state => state.userList);\n    const { users, pages, page, count } = userList;\n\n    const userDelete = useSelector(state => state.userDelete);\n    const { error, success } = userDelete;\n\n\n    useEffect(() => {\n\n        if (userInfo) {\n            dispatch(listUsers(userInfo.consultantProfil.practice, keyword, pageNumber, pageSize));\n        } else {\n            history.push('/login');\n        }\n\n    }, [dispatch, history, userInfo, success, keyword, pageNumber, pageSize]);\n\n\n    const onClickEditHandler = (userId) => {\n        history.push(`/admin/edituser/${userId}`);\n    };\n\n    const onClickDeleteHandler = (user) => {\n        console.log('delete user');\n        if (window.confirm(`Are you sure to delete user: ${user.name} ?`)) {\n            dispatch(deleteUser(user._id));\n        }\n    };\n\n    return (\n        <>\n            {error && (<Message variant='danger'>{error}</Message>)}\n\n            <DropDownTitleContainer title='Manage users' close={false}>\n                <ListGroup.Item>\n                    <Row>\n                        <Col xs={6} md={3}>\n                            <InputGroup>\n                                <FormControl\n                                    type='text'\n                                    className=\"mb-3\"\n                                    placeholder='Search name'\n                                    value={keyword && keyword}\n                                    onChange={(e) => setKeyword(e.target.value)}\n                                ></FormControl>\n                            </InputGroup>\n                        </Col>\n\n                        <Col xs={6} md={6}>\n                            <Form.Control\n                                plaintext\n                                readOnly\n                                value={count ? `${count} consultants found` : '0 consultant found'} />\n                        </Col>\n\n                        <Col xs={6} md={3}>\n                            <InputGroup>\n                                <FormControl\n                                    as='select'\n                                    id='number-c'\n                                    className=\"mb-3\"\n                                    value={pageSize && pageSize}\n                                    onChange={(e) => setPageSize(e.target.value)}\n                                >\n                                    {[5, 10, 15, 20, 50].map(x => (\n                                        <option\n                                            key={x}\n                                            value={x}\n                                        >{x} / page</option>\n                                    ))}\n                                </FormControl>\n                            </InputGroup>\n                        </Col>\n\n                    </Row>\n\n                    <Table responsive hover striped>\n                        <thead>\n                            <tr className='table-primary'>\n                                <th className='align-middle text-light'>User name</th>\n                                <th className='align-middle text-light'>Matricule</th>\n                                <th className='align-middle text-light text-center'>Practice</th>\n                                <th className='align-middle text-light text-center'>Created at</th>\n                                <th className='align-middle text-light text-center'>Status</th>\n                                <th className='align-middle text-light text-center'>User Profil</th>\n                                <th className='align-middle text-light'></th>\n                                <th className='align-middle text-light'></th>\n                            </tr>\n                        </thead>\n\n                        <tbody>\n                            {users && users.map((user) => (\n                                <tr key={user._id}>\n                                    <td className='align-middle'><b>{user.name && user.name}</b></td>\n                                    <td className='align-middle'>{user.consultantProfil && user.consultantProfil.matricule}</td>\n                                    <td className='align-middle text-center'>{user.consultantProfil && user.consultantProfil.practice}</td>\n                                    <td className='align-middle text-center'>{user.createdAt && user.createdAt.toString().substring(0, 10)}</td>\n                                    <td className='align-middle text-center'>\n                                        {\n                                            user.status && user.status === 'Waiting approval' ?\n                                                <i className=\"far fa-clock\" style={{ color: 'orange' }}></i>\n                                                : user.status === 'Validated' ?\n                                                    <i className=\"fas fa-check-circle\" style={{ color: 'green' }} ></i>\n                                                    : user.status === 'Refused' ?\n                                                        <i className=\"fas fa-times\" style={{ color: 'red' }}></i> : 'unknown'\n\n                                        }</td>\n                                    <td className='align-middle text-center'>{user.profil && user.profil.profil && user.profil.profil}</td>\n                                    <td className='align-middle'>\n                                        <Button\n                                            className='btn btn-primary p-1'\n                                            onClick={() => onClickEditHandler(user._id)}\n                                            size='sm'\n                                        ><i className=\"fas fa-user-edit\"></i>\n                                        </Button>\n                                    </td>\n                                    <td className='align-middle'>\n                                        <Button\n                                            className='btn btn-danger p-1'\n                                            onClick={() => onClickDeleteHandler(user)}\n                                            size='sm'\n                                        ><i className=\"fas fa-user-times\"></i>\n                                        </Button>\n                                    </td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </Table>\n\n                    <Pagination>\n                        <Pagination.Prev\n                            onClick={() => setPageNumber(page - 1)}\n                            disabled={page === 1}\n                        />\n                        {[...Array(pages).keys()].map(x => (\n                            [0, 1, pages - 2, pages - 1].includes(x) ? (\n                                <Pagination.Item\n                                    key={x + 1}\n                                    active={x + 1 === page}\n                                    onClick={() => {\n                                        dispatch(listUsers(userInfo.consultantProfil.practice, keyword, x + 1, pageSize));\n                                        setPageNumber(x + 1);\n                                    }}\n                                >{x + 1}</Pagination.Item>\n                            ) : (pages > 4 && x === 2) && (\n                                <Pagination.Ellipsis key={x + 1} />\n                            )\n                        ))}\n                        <Pagination.Next\n                            onClick={() => setPageNumber(page + 1)}\n                            disabled={page === pages}\n                        />\n                    </Pagination>\n                </ListGroup.Item>\n            </DropDownTitleContainer>\n        </>\n    )\n}\n\nexport default ManageUsersScreen;\n","import axios from 'axios';\nimport { \n    ACCESS_LIST_FAIL, \n    ACCESS_LIST_REQUEST, \n    ACCESS_LIST_SUCCESS, \n    ACCESS_UPDATE_FRONTACCESS_FAIL, \n    ACCESS_UPDATE_FRONTACCESS_REQUEST,\n    ACCESS_UPDATE_FRONTACCESS_SUCCESS\n} from '../constants/accessConstants';\n\nexport const getAllAccess = () => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: ACCESS_LIST_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        const { data } = await axios.get(`/api/access`, config);\n        dispatch({ type: ACCESS_LIST_SUCCESS, payload: data });\n\n    } catch (error) {\n        dispatch({\n            type: ACCESS_LIST_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\n\nexport const updateprofilFrontAcessRule = (rule) => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: ACCESS_UPDATE_FRONTACCESS_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n        const config = {\n            headers: {\n                'Content-type': 'Application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        const { data } = await axios.put(`/api/access`, rule, config);\n        dispatch({ type: ACCESS_UPDATE_FRONTACCESS_SUCCESS, payload: data });\n\n    } catch (error) {\n        dispatch({\n            type: ACCESS_UPDATE_FRONTACCESS_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport InputGroup from 'react-bootstrap/InputGroup'\n//import Alert from 'react-bootstrap/Alert';\nimport Message from '../components/Message';\nimport FormContainer from '../components/FormContainer';\nimport { getUserDetails, updateUser } from '../actions/userActions';\nimport { getAllMyAdminConsultants } from '../actions/consultantActions';\nimport { USER_STATUS, USER_UPDATE_RESET } from '../constants/userConstants';\nimport { getAllAccess } from '../actions/accessActions';\n\nconst UserEditScreen = ({ match, history }) => {\n\n    const userId = match.params.id;\n\n    const dispatch = useDispatch();\n    \n    const [name, setName] = useState('');\n    const [email, setEmail] = useState('');\n    const [linkConsultant, setLinkConsultant] = useState('');\n    const [profil, setProfil] = useState('');\n    const [status, setStatus] = useState('');\n    \n    //const [message, setMessage] = useState('');\n    \n    const userLogin = useSelector(state => state.userLogin);\n    const { userInfo } = userLogin;\n    \n    const userDetails = useSelector(state => state.userDetails);\n    const { error, loading, user } = userDetails;\n\n    const userUpdate = useSelector(state => state.userUpdate);\n    const { error: errorUpdate, success: successUpdate } = userUpdate;\n\n    const consultantsMyAdminList = useSelector(state => state.consultantsMyAdminList);\n    const { error:errorMyAdmin, consultantsMyAdmin } = consultantsMyAdminList;\n\n    const accessList = useSelector(state => state.accessList);\n    const { access } = accessList;\n\n    useEffect(() => {\n        if (!userInfo) {\n            history.push('/login');\n        }\n    }, [history, userInfo]);\n\n    useEffect(() => {\n\n        if (!loading && !error && (!user || user._id !== userId)) {\n            dispatch(getUserDetails(userId));\n        }\n\n    }, [dispatch, user, error, userId, loading]);\n\n    useEffect(() => {\n\n        if (user) {\n            setName(user.name);\n            setEmail(user.email);\n            setProfil(user.profil);\n            setStatus(user.status);\n            if (user.consultantProfil) {\n                setLinkConsultant(user.consultantProfil._id);\n            } else {\n                setLinkConsultant('');\n            }\n            //console.log(user.profil);\n        }\n\n    }, [user]);\n\n    /*\n    useEffect(() => {\n\n        if (error) {\n            setMessage({ message: error, type: 'danger' });\n        }\n        if (errorMyAdmin) {\n            setMessage({ message: errorMyAdmin, type: 'danger' });\n        }\n        if (errorUpdate) {\n            setMessage({ message: errorUpdate, type: 'danger' });\n        }\n        if (successUpdate) {\n            setMessage({ message: 'User profil updated', type: 'success' });\n            dispatch({type: USER_UPDATE_RESET});\n        }\n\n    }, [dispatch, error, errorMyAdmin, errorUpdate, successUpdate]);\n    */\n\n    useEffect(() => {\n\n        if (user && user._id === userId) {\n            dispatch(getAllMyAdminConsultants('','',10000));\n        }\n\n    }, [dispatch, user, userId]);\n\n    useEffect(() => {\n        if (!access) {\n            dispatch(getAllAccess());\n        }\n        //console.log(access)\n    },[dispatch, access]);\n\n    const updateProfilHandler = (profil) => {\n        const newProfil = access.filter(x => x.profil === profil)[0];\n        setProfil(newProfil);\n        //console.log('updateProfil');\n    }\n\n    const goBackHandler = () => {\n        history.go(-1);\n        dispatch({type: USER_UPDATE_RESET});\n    };\n\n    const submitHandler = (e) => {\n        e.preventDefault();\n\n        const updatedUser = {\n            ...user,\n            name: name,\n            email: email,\n            consultantProfil: linkConsultant,\n            profil: profil._id,\n            status: status\n        };\n        dispatch(updateUser(updatedUser));\n\n    };\n\n    return (\n        <>\n            {error && <Message variant='danger'>{error}</Message>}\n            {errorMyAdmin && <Message variant='danger'>{errorMyAdmin}</Message>}\n            {errorUpdate && <Message variant='danger'>{errorUpdate}</Message>}\n            {successUpdate && <Message variant='success'>User updated with success</Message>}\n\n            <Button className='mb-3' onClick={() => goBackHandler()}>\n                Go Back\n            </Button>\n\n            <FormContainer>\n                <Form onSubmit={submitHandler}>\n                    <Form.Group controlId='name'>\n                        <Form.Label><b>Name</b></Form.Label>\n                        <Form.Control\n                            type='name'\n                            placeholder='Enter Name'\n                            value={name && name}\n                            onChange={(e) => setName(e.target.value)}\n                            required\n                        ></Form.Control>\n                    </Form.Group>\n\n                    <Form.Group controlId='email'>\n                        <Form.Label><b>Email address</b></Form.Label>\n                        <Form.Control\n                            type='email'\n                            placeholder='Enter email'\n                            value={email && email}\n                            onChange={(e) => setEmail(e.target.value)}\n                            required\n                        ></Form.Control>\n                    </Form.Group>\n\n                    <Form.Group controlId='consultantProfil'>\n                        <Form.Label><b>Linked Consultant Profil</b></Form.Label>\n                        <InputGroup>\n                            <Form.Control\n                                as='select'\n                                placeholder='Enter consultant to link'\n                                value={linkConsultant && linkConsultant}\n                                onChange={(e) => setLinkConsultant(e.target.value)}\n                                required\n                            >\n                                {consultantsMyAdmin && consultantsMyAdmin.map(\n                                    x => (\n                                        <option\n                                            key={x._id}\n                                            value={x._id}\n                                        >{x.name}</option>\n                                    )\n                                )}\n                            </Form.Control>\n                            <InputGroup.Append>\n                                <Button onClick={() => history.push(`/editconsultant/${linkConsultant}`)}>Edit user</Button>\n                            </InputGroup.Append>\n                        </InputGroup>\n\n                    </Form.Group>\n\n                    <Form.Group controlId='user-profil'>\n                        <Form.Label><b>User profil</b></Form.Label>\n                        <Form.Control\n                            as='select'\n                            value={profil && profil.profil ? profil.profil : ''}\n                            onChange={(e) => updateProfilHandler(e.target.value)}\n                            required\n                        >\n                            <option value=''>--Select--</option>\n                            {access && access.map( x => (\n                                <option\n                                    key={x._id}\n                                    value={x.profil}\n                                >{x.profil}</option>\n                            ))}\n                        </Form.Control>\n                    </Form.Group>\n\n                    <Form.Group controlId='status'>\n                        <Form.Label><b>Account Status</b></Form.Label>\n                        <Form.Control\n                            as='select'\n                            placeholder='Select status for account'\n                            value={status && status}\n                            onChange={(e) => setStatus(e.target.value)}\n                            required\n                        >\n                            {USER_STATUS.map( x => (\n                                <option\n                                    key={x}\n                                    value={x}\n                                >{x}</option>\n                            ))}\n                        </Form.Control>\n                    </Form.Group>\n\n\n                    <Button type='submit' variant='primary'>\n                        Update\n                    </Button>\n\n\n                </Form>\n            </FormContainer>\n\n        </>\n    )\n};\n\nexport default UserEditScreen;\n","import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Form, Button, Row, Col } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux'; \nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\nimport FormContainer from '../components/FormContainer';\nimport { register } from '../actions/userActions'\n\nconst RegisterScreen = ({ location, history }) => {\n    const [name, setName] = useState('');\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [confirmPassword, setConfirmPassword] = useState('');\n\n    const [message, setMessage] = useState(null);\n\n    const dispatch = useDispatch();\n\n    const userRegister = useSelector(state => state.userRegister);\n    const { loading, error, userInfo } = userRegister;\n\n    const redirect = location.search ? location.search.split('=')[1] : '/';\n\n    useEffect(() => {\n        if(userInfo) {\n            history.push(redirect);\n            // If user is authenticate, there is no search and user is redirect to home page\n        }\n    }, [history, userInfo, redirect]);\n\n    const submitHandler = (e) => {\n        const form = e.currentTarget;\n        // Verification of validity of data\n        if (form.checkValidity() === false) {\n            setMessage('Please check your information');\n        } else {\n            e.preventDefault(); // to avoid page to refresh\n            // Dispatch Register\n            setMessage(null); // to reinitialize the message before testing\n            if (password !== confirmPassword) {\n                setMessage('Passwords do not match')\n            } else {\n                dispatch(register(name, email, password));\n            }\n        }\n    };\n\n    return (\n        <FormContainer>\n            <h1>Sign Up</h1>\n            {message && <Message variant='danger'>{message}</Message>}\n            {error && <Message variant='danger'>{error}</Message>}\n            {loading && <Loader />}\n            <Form onSubmit={submitHandler}>\n                <Form.Group controlId='name'>\n                    <Form.Label>Name</Form.Label>\n                    <Form.Control\n                        type='name'\n                        placeholder='Enter Name'\n                        value={name}\n                        onChange={(e) => setName(e.target.value)}\n                    ></Form.Control>\n                </Form.Group>\n                <Form.Group controlId='email'>\n                    <Form.Label>Email Adress</Form.Label>\n                    <Form.Control\n                        type='email'\n                        placeholder='Enter Email'\n                        value={email}\n                        onChange={(e) => setEmail(e.target.value)}\n                    ></Form.Control>\n                </Form.Group>\n                <Form.Group controlId='password'>\n                    <Form.Label>Password</Form.Label>\n                    <Form.Control\n                        type='password'\n                        placeholder='Enter password'\n                        value={password}\n                        onChange={(e) => setPassword(e.target.value)}\n                    ></Form.Control>\n                </Form.Group>\n                <Form.Group controlId='confirm-password'>\n                    <Form.Label>Confirm Password</Form.Label>\n                    <Form.Control\n                        type='password'\n                        placeholder='Confirm password'\n                        value={confirmPassword}\n                        onChange={(e) => setConfirmPassword(e.target.value)}\n                    ></Form.Control>\n                </Form.Group>\n\n                <Button type='submit' variat='primary'>\n                    Register\n                </Button>\n\n                <Row className='py-3'>\n                    <Col>\n                        Have an account ? \n                        <Link to={redirect ? \n                            `/login?reditect=${redirect}`\n                        : '/login'}>\n                            Login\n                        </Link>\n                    </Col>\n                </Row>\n            </Form>\n        </FormContainer>\n    );\n};\n\nexport default RegisterScreen;\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Modal from 'react-bootstrap/Modal';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nimport Button from 'react-bootstrap/Button';\nimport ViewStaffs from '../components/ViewStaffs';\nimport ViewOldStaffs from '../components/ViewOldStaffs';\nimport SkillsDetails from './SkillsDetails';\nimport DropDownTitleContainer from '../components/DropDownTitleContainer';\nimport { getConsultantCdm } from '../actions/consultantActions';\nimport DisplayChildren from '../components/DisplayChildren';\n\n\nconst StaffAConsultant = ({ history, onHide, show, consultant, loadingData={}, mode, addStaffHandler }) => {\n\n    const dispatch = useDispatch();\n\n    const [sdResponsability, setSdResponsability] = useState(loadingData.responsability ? loadingData.responsability : '');\n    const [sdPriority, setSdPriority] = useState(loadingData.priority ? loadingData.priority : '');\n    const [sdInformation, setSdInformation] = useState(loadingData.information ? loadingData.information : '');\n    //console.log('consultant', consultant)\n\n\n    const consultantGetCdm = useSelector(state => state.consultantGetCdm);\n    const { cdm } = consultantGetCdm;\n\n    useEffect(() => {\n        if(show) {\n            dispatch(getConsultantCdm(consultant._id))\n        }\n    }, [dispatch, consultant, show])\n\n    return (\n\n        <Modal\n            show={show}\n            size=\"lg\"\n            aria-labelledby=\"contained-modal-title-vcenter\"\n            centered\n            onHide={onHide}\n        >\n            <Modal.Header closeButton>\n                <Modal.Title id=\"contained-modal-title-vcenter\">\n                    {consultant.name ? consultant.name + ' - ' + consultant.grade + (cdm ? ' (' + cdm.name + ')' : '') : ''}\n                </Modal.Title>\n            </Modal.Header>\n\n            <Modal.Body>\n                {mode === 'staffing' && (\n                    <DisplayChildren access='editStaff'>\n                        <Row>\n                            <Col className='mt-3'>\n                                <label htmlFor='sd-responsability'><strong>Responsability *</strong></label>\n                                <InputGroup id='sd-responsability'>\n                                    <FormControl\n                                        as='select'\n                                        value={sdResponsability}\n                                        onChange={(e) => setSdResponsability(e.target.value)}\n                                    >\n                                        <option value=''>--Select--</option>\n                                        <option value={'Project director'}>Project director</option>\n                                        <option value={'Project manager'}>Project manager</option>\n                                        <option value={'Project leader'}>Project leader</option>\n                                        <option value={'X'}>X</option>\n                                        <option value={'Intern'}>Intern</option>\n\n                                    </FormControl>\n                                </InputGroup>\n                            </Col>\n\n                            <Col className='mt-3'>\n                                <label htmlFor='sd-priority'><strong>Priority *</strong></label>\n                                <InputGroup id='sd-priority'>\n                                    <FormControl\n                                        as='select'\n                                        value={sdPriority}\n                                        onChange={(e) => setSdPriority(e.target.value)}\n                                    >\n                                        <option value=''>--Select--</option>\n                                        <option value={'P1'}>P1</option>\n                                        <option value={'P2'}>P2</option>\n                                        <option value={'P3'}>P3</option>\n\n                                    </FormControl>\n                                </InputGroup>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col className='mt-3'>\n                                <label><strong>Comment</strong></label>\n                                <InputGroup id='sd-information'>\n                                    <FormControl\n                                        as='textarea'\n                                        rows={3}\n                                        value={sdInformation}\n                                        onChange={(e) => setSdInformation(e.target.value)}\n                                    ></FormControl>\n                                </InputGroup>\n                            </Col>\n                        </Row>\n                    </DisplayChildren>\n                )}\n\n                <DisplayChildren access='viewSkills'>\n                    <SkillsDetails\n                        consultantId={consultant._id}\n                        editable={false}\n                        close={(mode === 'consultation') ? false : true}\n                    />\n                </DisplayChildren>\n\n                <DisplayChildren access='viewStaffings'>\n                    <DropDownTitleContainer title='Others staffings' close={false}>\n                        <ViewStaffs\n                            history={history}\n                            consultantId={consultant._id}\n                            onNavigate={onHide}\n                        />\n                    </DropDownTitleContainer>\n                </DisplayChildren>\n\n                <DropDownTitleContainer title='Old staffings' close={true}>\n                    <ViewOldStaffs\n                        history={history}\n                        consultantId={consultant._id}\n                        onNavigate={onHide}\n                    />\n                </DropDownTitleContainer>\n                \n            </Modal.Body>\n\n            <Modal.Footer>\n                <Button onClick={onHide} variant='secondary'>Cancel</Button>\n                <DisplayChildren access='editStaff'>\n                    {mode === 'staffing' && (\n                        <Button\n                            onClick={() => {\n                                addStaffHandler(consultant, sdResponsability, sdPriority, sdInformation);\n                                onHide();\n                            }}\n                            variant='primary'\n                            disabled={!(sdResponsability !== '' && sdPriority !== '')}\n                        >Staff</Button>\n                    )}\n                </DisplayChildren>\n            </Modal.Footer>\n\n        </Modal>\n    )\n}\n\nexport default StaffAConsultant;\n","import React from 'react';\nimport Select from 'react-select';\n\nconst SelectInput = ({ options, value, setValue, disabled, multi }) => {\n\n    const handleChange = (e) => {\n        let valuesSelected = [];\n        if(multi) {\n            valuesSelected = e.map(x => ({id: x.value, value: x.label}));\n        } else {\n            valuesSelected = [{id: e.value, value: e.label}]\n        }\n        setValue(valuesSelected);\n    }\n\n    return (\n        <div>\n            <Select\n                closeMenuOnSelect={true}\n                placeholder='Select...'\n                value={value ? value : null}\n                isMulti={multi}\n                options={options ? options : []}\n                onChange={handleChange}\n                isDisabled={disabled}\n            />\n        </div>\n    )\n}\n\nexport default SelectInput;\n","import axios from 'axios';\nimport {\n    SKILL_LIST_REQUEST,\n    SKILL_LIST_SUCCESS,\n    SKILL_LIST_FAIL,\n    SKILL_DELETE_REQUEST,\n    SKILL_DELETE_FAIL,\n    SKILL_DELETE_SUCCESS,\n    SKILL_CREATE_REQUEST,\n    SKILL_CREATE_SUCCESS,\n    SKILL_CREATE_FAIL\n } from '../constants/skillsConstants';\n\nexport const getAllSkills = (category = '', name = '', pageNumber = '', pageSize = '15') => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: SKILL_LIST_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                'Content-type': 'Application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        const { data } = await axios.get(`/api/skills?category=${category}&name=${name}&pageNumber=${pageNumber}&pageSize=${pageSize}`, config);\n        dispatch({ type: SKILL_LIST_SUCCESS, payload: data });\n\n    } catch (error) {\n        dispatch({\n            type: SKILL_LIST_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\nexport const deleteSkill = (skillId) => async (dispatch, getState) => {\n    \n    // TO FINISH : if delete a skill, you need to delete on all consultant associated profils\n    \n    try {\n\n        dispatch({ type: SKILL_DELETE_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                'Content-type': 'Application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        await axios.delete(`/api/skills/${skillId}`, config);\n        dispatch({ type: SKILL_DELETE_SUCCESS });\n\n    } catch (error) {\n        dispatch({\n            type: SKILL_DELETE_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n}\n\nexport const createSkills = (skill) => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: SKILL_CREATE_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                'Content-type': 'Application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        const { data } = await axios.post('/api/skills', skill, config);\n        dispatch({ type: SKILL_CREATE_SUCCESS, payload: data });\n\n    } catch (error) {\n        dispatch({\n            type: SKILL_CREATE_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport { getAvailabilities } from '../actions/pxxActions';\nimport Loader from '../components/Loader';\nimport Message from '../components/Message';\nimport Form from 'react-bootstrap/Form';\nimport Card from 'react-bootstrap/Card';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\n//import Popover from 'react-bootstrap/Popover';\nimport Tooltip from 'react-bootstrap/Tooltip';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport StaffAConsultant from './StaffAConsultant';\nimport DisplayChildren from '../components/DisplayChildren';\n\nimport SelectInput from '../components/SelectInput';\nimport { getAllSkills } from '../actions/skillActions';\n\nconst ConsoDispo = ({ \n    //practice, \n    start, end, mode, addStaffHandler, history }) => {\n\n    const dispatch = useDispatch();\n\n    const [focus, setFocus] = useState('');\n    //const [searchSkills, setSearchSkills] = useState('');\n    const [searchExperienceStart, setSearchExperienceStart] = useState('');\n    const [searchExperienceEnd, setSearchExperienceEnd] = useState('');\n    const [practice, setPractice] = useState('');\n\n    const [searchSkillsList, setSearchSkillsList] = useState([]);\n\n    const [searchMode, setSearchMode] = useState('filterAvailable');\n\n    const [modalWindowShow, setModalWindowShow] = useState(false);\n    const [sdConsultant, setSdConsultant] = useState('');\n\n    const userLogin = useSelector(state => state.userLogin);\n    const { userInfo } = userLogin;\n\n    const pxxAvailabilities = useSelector(state => state.pxxAvailabilities);\n    const { loading: loadingAvailabilities, error: errorAvailabilities, availabilities } = pxxAvailabilities;\n\n    const skillList = useSelector(state => state.skillList);\n    const { skills } = skillList;\n\n    useEffect(() => {\n        if(userInfo) {\n            setPractice(userInfo.consultantProfil.practice);\n        }\n    }, [userInfo]);\n\n    useEffect(() => {\n        if (practice) {\n            dispatch(getAvailabilities(practice, start, end, searchSkillsList.map(skill => skill.value).join(';'), searchExperienceStart, searchExperienceEnd, searchMode));\n        }\n    }, [dispatch, practice, start, end, searchMode, searchSkillsList, searchExperienceStart, searchExperienceEnd]);\n\n    useEffect(() => {\n        dispatch(getAllSkills('','',1,10000));\n    },[dispatch]);\n\n    const removeFilterAction = () => {\n        setSearchSkillsList([]);\n        setSearchExperienceStart('');\n        setSearchExperienceEnd('');\n        //dispatch(getAvailabilities(practice, start, end, '', '', '', searchMode));\n    };\n\n    const handlerSkillsSubmit = (e) => {\n        e.preventDefault();\n        dispatch(getAvailabilities(practice, start, end, searchSkillsList.map(skill => skill.value).join(';'), searchExperienceStart, searchExperienceEnd, searchMode));\n    };\n\n    const moreConsultantDetails = (consultant) => {\n        setModalWindowShow(true);\n        setSdConsultant(consultant);\n    };\n\n    return (\n        <>\n            {modalWindowShow && (\n                <StaffAConsultant\n                    show={modalWindowShow}\n                    onHide={() => setModalWindowShow(false)}\n                    consultant={sdConsultant}\n                    mode={mode}\n                    addStaffHandler={addStaffHandler}\n                    history={history}\n                />\n            )}\n\n            <Row className='mt-5'>\n                <Col md={12}>\n                    <Form onSubmit={handlerSkillsSubmit}>\n\n                        <Form.Row className='align-items-center mb-3'>\n                            <Col md={1}>\n                                {( searchExperienceStart || searchExperienceEnd) ? (\n                                    <Button \n                                        variant='secondary'\n                                        onClick={removeFilterAction}\n                                        block\n                                    ><i className=\"fas fa-minus-circle\"></i></Button>\n                                ) : (\n                                    <Button \n                                        variant='primary'\n                                        disabled\n                                        block\n                                    ><i className=\"fas fa-keyboard\"></i></Button>\n                                )}\n                            </Col>\n\n                            <Col md={4}>\n                                <Form.Group controlId='skill-search' className='my-0'>\n                                    <SelectInput\n                                        options={skills ? skills.map(skill => ({ value: skill._id, label: skill.name })) : []}\n                                        value={searchSkillsList.length ? searchSkillsList.map(skill => ({ value: skill._id, label: skill.value })) : []}\n                                        setValue={setSearchSkillsList}\n                                        multi={true}\n                                        disabled={false}\n                                    />\n                                </Form.Group>\n                            </Col>\n\n                            <Col md={2}>\n                                <Form.Group controlId='experience-search-start' className='my-0'>\n                                    <Form.Control\n                                        type='number'\n                                        min={0}\n                                        step={0.5}\n                                        placeholder='From (year)'\n                                        value={searchExperienceStart && searchExperienceStart}\n                                        onChange={(e) => setSearchExperienceStart(e.target.value)}\n                                    ></Form.Control>\n                                </Form.Group>\n                            </Col>\n\n                            <Col md={2}>\n                                <Form.Group controlId='experience-search-end' className='my-0'>\n                                    <Form.Control\n                                        type='number'\n                                        step={0.5}\n                                        min={searchExperienceStart || 0}\n                                        placeholder='To (year)'\n                                        value={searchExperienceEnd && searchExperienceEnd}\n                                        onChange={(e) => setSearchExperienceEnd(e.target.value)}\n                                    ></Form.Control>\n                                </Form.Group>\n                            </Col>\n\n                            <Col md={2}>\n                                <Form.Group controlId='switch-only-available'  className='my-0'>\n                                    <Form.Check\n                                        type='switch'\n                                        id='switch-only-available'\n                                        label='Not available'\n                                        checked={searchMode === 'filterAvailable' ? false : true}\n                                        onChange={(e) => {e.target.checked === true ? setSearchMode('all') : setSearchMode('filterAvailable')}}\n                                    ></Form.Check>\n                                </Form.Group>\n\n                                <Form.Group controlId='switch-practices'  className='my-0'>\n                                    <Form.Check\n                                        type='switch'\n                                        id='switch-all-practices'\n                                        label='All practices'\n                                        checked={practice === 'all' ? true : false}\n                                        onChange={(e) => {e.target.checked === true ? setPractice('all') : setPractice(userInfo.consultantProfil.practice)}}\n                                    ></Form.Check>\n                                </Form.Group>\n\n                            </Col>\n\n                            <Col md={1}>\n                                <Button\n                                    type='submit'\n                                    variant='primary'\n                                    block\n                                >Search</Button>\n                            </Col>\n                        </Form.Row>\n                    </Form>\n\n                </Col>\n            </Row>\n\n            <Tabs defaultActiveKey=\"Analysts\" id=\"uncontrolled-tab-example\">\n                <Tab eventKey=\"Intern\" title=\"Intern\">\n                    <Row className='mt-3'>\n                        {loadingAvailabilities ? <Loader /> : errorAvailabilities ? <Message variant='danger'>{errorAvailabilities}</Message> : (\n                            availabilities && availabilities.map((x, xVal) => (\n                                <Col sm={12} md={4} key={xVal}>\n                                    <ConsoDispoUnit\n                                        monthData={x}\n                                        grades={['Intern']}\n                                        mode={mode}\n                                        //addStaff={addStaff}\n                                        addStaff={moreConsultantDetails}\n                                        focus={focus}\n                                        setFocus={setFocus}\n                                    />\n                                </Col>\n                            ))\n                        )}\n                    </Row>\n                </Tab>\n\n                <Tab eventKey=\"Analysts\" title=\"Analysts\">\n                    <Row className='mt-3'>\n                        {loadingAvailabilities ? <Loader /> : errorAvailabilities ? <Message variant='danger'>{errorAvailabilities}</Message> : (\n                            availabilities && availabilities.map((x, xVal) => (\n                                <Col key={xVal} sm={12} md={4}>\n                                    <ConsoDispoUnit\n                                        monthData={x}\n                                        grades={['Analyst']}\n                                        mode={mode}\n                                        //addStaff={addStaff}\n                                        addStaff={moreConsultantDetails}\n                                        focus={focus}\n                                        setFocus={setFocus}\n                                    />\n                                </Col>\n                            ))\n                        )}\n                    </Row>\n                </Tab>\n\n                <Tab eventKey=\"Consultants\" title=\"Consultants\">\n                    <Row className='mt-3'>\n                        {loadingAvailabilities ? <Loader /> : errorAvailabilities ? <Message variant='danger'>{errorAvailabilities}</Message> : (\n                            availabilities && availabilities.map((x, xVal) => (\n                                <Col key={xVal} sm={12} md={4}>\n                                    <ConsoDispoUnit\n                                        monthData={x}\n                                        grades={['Consultant']}\n                                        mode={mode}\n                                        //addStaff={addStaff}\n                                        addStaff={moreConsultantDetails}\n                                        focus={focus}\n                                        setFocus={setFocus}\n                                    />\n                                </Col>\n                            ))\n                        )}\n                    </Row>\n                </Tab>\n\n                <Tab eventKey=\"Senior consultants\" title=\"Senior consultants\">\n                    <Row className='mt-3'>\n                        {loadingAvailabilities ? <Loader /> : errorAvailabilities ? <Message variant='danger'>{errorAvailabilities}</Message> : (\n                            availabilities && availabilities.map((x, xVal) => (\n                                <Col key={xVal} sm={12} md={4}>\n                                    <ConsoDispoUnit\n                                        monthData={x}\n                                        grades={['Senior consultant']}\n                                        mode={mode}\n                                        //addStaff={addStaff}\n                                        addStaff={moreConsultantDetails}\n                                        focus={focus}\n                                        setFocus={setFocus}\n                                    />\n                                </Col>\n                            ))\n                        )}\n                    </Row>\n                </Tab>\n\n                <Tab eventKey=\"Managers\" title=\"Managers and +\">\n                    <Row className='mt-3'>\n                        {loadingAvailabilities ? <Loader /> : errorAvailabilities ? <Message variant='danger'>{errorAvailabilities}</Message> : (\n                            availabilities && availabilities.map((x, xVal) => (\n                                <Col key={xVal} sm={12} md={4}>\n                                    <ConsoDispoUnit\n                                        monthData={x}\n                                        grades={['Manager', 'Senior manager', 'Director', 'Partner']}\n                                        mode={mode}\n                                        //addStaff={addStaff}\n                                        addStaff={moreConsultantDetails}\n                                        focus={focus}\n                                        setFocus={setFocus}\n                                    />\n                                </Col>\n                            ))\n                        )}\n                    </Row>\n                </Tab>\n            </Tabs>\n        </>\n    )\n}\n\n\nconst ConsoDispoUnit = ({monthData, grades, mode, addStaff, focus, setFocus}) => {\n\n    //const userLogin = useSelector(state => state.userLogin);\n    //const { userInfo } = userLogin;\n\n    const userLogin = useSelector(state => state.userLogin);\n    const { userInfo } = userLogin;\n    \n    const formatName = (fullName) => {\n        const separateName = fullName.split(' ');\n        if (separateName.length === 1) {\n            return separateName[0];\n        } else {\n            const outName = separateName.map((word, indice1) => {\n                if (indice1 === 0) {\n                    return word[0].toUpperCase() + '.';\n                } else {\n                    return word.toUpperCase();\n                }\n            });\n            return outName.join(' ');\n        }\n    }\n\n    const calculateExperience = (date) => {\n\n        if (date) {\n            return ((Date.now() - new Date(date)) / (1000 * 24 * 3600 * 365.25)).toString().substring(0, 4)\n        } else {\n            return '-';\n        }\n    }\n\n    return (\n        <Card className='my-1 rounded' >\n            <Card.Header as=\"h5\">{monthData.month.firstDay.toString().substring(0, 7)}</Card.Header>\n            <Card.Body>\n                {monthData.availabilities.map((consultantData, yVal) => (\n                    grades.includes(consultantData.grade) && (\n                        <Row key={yVal} className='align-items-middle'>\n                            {(mode === 'staffing' || mode === 'consultation') && (\n                                <Col sm={1}>\n                                    <Button\n                                        size='sm'\n                                        variant='ligth'\n                                        className='mx-0 px-0'\n                                        onClick={() => addStaff(consultantData)}\n                                    ><i className=\"fas fa-search\"></i></Button>\n                                </Col>\n                            )}\n                            <Col sm={10}>\n\n\n                                <OverlayTrigger\n                                    overlay={\n                                        <Tooltip id=\"tooltip-disabled\">\n                                            <DisplayChildren access='viewComment'>\n                                                {userInfo && userInfo.consultantProfil._id !== consultantData._id ? (\n                                                    consultantData.comment ? consultantData.comment : 'No staffing comment'\n                                                ) : 'No access to this data'}\n                                            </DisplayChildren>\n                                        </Tooltip>\n                                    }>\n                                    <Form.Control\n                                        plaintext\n                                        readOnly\n                                        id={consultantData.email}\n                                        value={consultantData.availableDay.toString() + ' days : ' + formatName(consultantData.name) + ' (' + calculateExperience(consultantData.valued) + ' years)'}\n                                        style={(consultantData.email === focus) ? { background: '#464277', color: 'white' } : { color: 'black' }}\n                                        onFocus={(e) => {\n                                            setFocus(e.target.id)\n                                        }}\n                                    />\n                                </OverlayTrigger>\n\n                            </Col>\n                        </Row>\n                    )\n                ))}\n            </Card.Body>\n        </Card>\n    )\n}\n\n\nexport default ConsoDispo\n","import React, {useEffect, useState} from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport { Link } from 'react-router-dom';\nimport Card from 'react-bootstrap/Card';\nimport DisplayChildren from '../components/DisplayChildren';\nimport { createTaceData } from '../actions/taceActions';\n\n\nconst Tace = ({ tace, practice }) => {\n\n    const dispatch = useDispatch();\n\n    const [target, setTarget] = useState(tace.target);\n    const [bid, setBid] = useState(tace.bid);\n    const [editRequest, setEditRequest] = useState(false);\n    const [update, setUpdate] = useState(false);\n\n    const [missingFTEToBid, setMissingFTEToBid] = useState('');\n    const [missingFTEToTarget, setMissingFTEToTarget] = useState('');\n\n    const createTace = useSelector(state => state.createTace);\n    //const { success } = createTace;\n\n    useEffect(() => {\n        if(update) {\n            dispatch(createTaceData({\n                month:tace.month._id,\n                practice: practice,\n                target: target,\n                bid: bid,\n            }))\n            setUpdate(false);\n        }\n    }, [dispatch, createTace, update, practice, tace, target, bid]);\n\n    useEffect(() => {\n        \n        const prodDay = Number(tace.totalProdDay);\n        const totalProdDayToBid = Number(bid) / 100 * (Number(tace.totalProdDay) + Number(tace.totalNotProdDay) + Number(tace.totalAvailableDay));\n        const totalProdDayToTarget = Number(target) / 100 * (Number(tace.totalProdDay) + Number(tace.totalNotProdDay) + Number(tace.totalAvailableDay));\n    \n        //console.log('firstDay', tace.month.firstDay);\n        const today = new Date(Math.max(new Date(Date.now()), new Date(tace.month.firstDay)));\n        //console.log(today);\n        const lastMonthDay = new Date(Math.max(new Date(Date.now()), new Date(tace.month.firstDay)));\n        //console.log(lastMonthDay);\n        lastMonthDay.setUTCMonth(lastMonthDay.getUTCMonth() + 1);\n        lastMonthDay.setUTCDate(1);\n\n        const todayToEnd = (lastMonthDay - today) / (3600 * 24 * 1000);\n\n        if(bid) {\n            const missingFTEToBidCalculated = (prodDay - totalProdDayToBid) / todayToEnd;\n            setMissingFTEToBid(missingFTEToBidCalculated);\n        }\n        if(target){\n            const missingFTEToTargetCalculated = (prodDay - totalProdDayToTarget) / todayToEnd;\n            setMissingFTEToTarget(missingFTEToTargetCalculated);\n        }\n\n    },[tace, bid, target]);\n\n\n    return (\n\n        <Col sm={12} md={4}>\n            <Card className='my-3 p-3 rounded'>\n                <Card.Header as=\"h5\">{tace.month.firstDay.toString().substring(0, 7)}</Card.Header>\n                <Card.Body className='p-1 mt-3'>\n                    <Card.Text as='h4'>Tace <DisplayChildren access='editTace'><Button \n                                                size='sm' \n                                                variant='ligth'\n                                                onClick={() => {\n                                                    if(editRequest) {\n                                                        setUpdate(true)\n                                                    }\n                                                    setEditRequest(!editRequest)}\n                                                }\n                                                ><i className=\"fas fa-edit\"></i></Button></DisplayChildren>\n                    </Card.Text>\n\n                    <ListGroup>\n                        <ListGroup.Item className='py-1 bg-primary text-white'>\n                            <Row>\n                                <Col className='text-center' xs={4}><strong>Current</strong></Col>\n                                <Col className='text-center' xs={4}><strong>Target</strong></Col>\n                                <Col className='text-center' xs={4}><strong>Bid</strong></Col>\n                            </Row>\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n                            <Row className='align-items-center'>\n                                <Col className='text-center' xs={4}>{(Number(tace.totalTACE) * 100).toFixed(1)} %</Col>\n                                \n                                <Col className='text-center' xs={4}>\n                                    <Form.Group controlId='tace-target' className='mb-0'>\n                                        {editRequest ? (\n                                            <Form.Control\n                                                type='Number'\n                                                className='text-center'\n                                                min={0}\n                                                max={100}\n                                                step={0.1}\n                                                value={target}\n                                                onChange={(e) => setTarget(e.target.value)}\n                                            ></Form.Control>\n                                        ) : (\n                                                <Row className='align-items-center'>\n                                                    <Col className='m-0 p-0'>\n                                                        <Form.Control\n                                                            type='text'\n                                                            className='text-right'\n                                                            plaintext\n                                                            value={target}\n                                                            readOnly\n                                                        ></Form.Control>\n                                                    </Col>\n                                                    <Col className='m-0 p-0 text-left'>&nbsp;%</Col>\n                                                </Row>\n                                            )}\n                                    </Form.Group>\n                                </Col>\n\n                                <Col className='text-center' xs={4}>\n                                    <Form.Group controlId='title' className='mb-0'>\n                                        {editRequest ? (\n                                            <Form.Control\n                                                type='Number'\n                                                className='text-center'\n                                                min={0}\n                                                max={100}\n                                                step={0.1}\n                                                value={bid}\n                                                onChange={(e) => setBid(e.target.value)}\n                                            ></Form.Control>\n                                        ) : (\n                                                <Row className='align-items-center'>\n                                                    <Col className='m-0 p-0'>\n                                                        <Form.Control\n                                                            type='text'\n                                                            className='text-right'\n                                                            plaintext\n                                                            value={bid}\n                                                            readOnly\n                                                        ></Form.Control>\n                                                    </Col>\n                                                    <Col className='m-0 p-0 text-left'>&nbsp;%</Col>\n                                                </Row>\n                                            )}\n                                    </Form.Group>\n                                </Col>\n                            </Row>\n                        </ListGroup.Item>\n                        <ListGroup.Item>\n                            <Row>\n                                <Col xs={4}>&Delta; FTE</Col>\n                                <Col xs={4} className='text-center'>{missingFTEToTarget && missingFTEToTarget.toFixed(2)}</Col>\n                                <Col xs={4} className='text-center'>{missingFTEToBid && missingFTEToBid.toFixed(2)}</Col>\n                            </Row>\n                        </ListGroup.Item>\n                    </ListGroup>\n\n                    <ListGroup className='mt-3'>\n                        <ListGroup.Item className='py-1 bg-primary text-white'>\n                            <Row>\n                                <Col><strong>Leaving</strong></Col>\n                            </Row>\n                        </ListGroup.Item>\n                        <ListGroup.Item>\n                            <Row>\n                                <Col className='text-right'>{(Number(tace.totalLeaving) * 100).toFixed(2)} %</Col>\n                            </Row>\n                        </ListGroup.Item>\n                    </ListGroup>\n\n                    <ListGroup className='mt-3'>\n                        <ListGroup.Item className='py-1 bg-primary text-white'>\n                            <Row>\n                                <Col><strong>FTE</strong></Col>\n                            </Row>\n                        </ListGroup.Item>\n                        <ListGroup.Item>\n                            <Row>\n                                <Col className='text-right'>{tace.totalETP && tace.totalETP.toFixed(2)}</Col>\n                            </Row>\n                        </ListGroup.Item>\n                    </ListGroup>  \n                </Card.Body>\n                <Card.Footer className='mt-3'>\n                    <DisplayChildren access='tace'>\n                        <Link to={`/pxxdetails/${tace.month._id}`}>View details</Link>\n                    </DisplayChildren>\n                </Card.Footer>\n            </Card>\n        </Col>\n\n    )\n}\n\nexport default Tace;\n","import axios from 'axios';\nimport { \n    TACE_CREATE_FAIL,\n    TACE_CREATE_REQUEST, \n    TACE_CREATE_SUCCESS, \n} from '../constants/taceConstants';\n\nexport const createTaceData = (taceData) => async(dispatch, getState) => {\n\n    try {\n        dispatch({\n            type: TACE_CREATE_REQUEST,\n        });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers:{\n                'Content-type': 'Application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        const { data } = await axios.post('/api/tace', taceData, config);\n\n        dispatch({\n            type: TACE_CREATE_SUCCESS,\n            payload: data\n        });\n\n    } catch (error) {\n        dispatch({\n            type: TACE_CREATE_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nimport { getTace } from '../actions/pxxActions';\nimport Loader from '../components/Loader';\nimport Message from '../components/Message';\nimport Meta from '../components/Meta';\nimport ConsoDispo from '../components/ConsoDispo';\nimport Tace from '../components/Tace';\nimport DropDownTitleContainer from '../components/DropDownTitleContainer'\nimport DisplayChildren from '../components/DisplayChildren';\n\nconst DashboardScreen = ({ history }) => {\n\n    const dispatch = useDispatch();\n\n    // initialization of default constants\n    const duration = 3;\n    let startDefault = new Date(Date.now());\n    startDefault.setUTCDate(1);\n    startDefault.setUTCMonth(startDefault.getUTCMonth());\n    startDefault = startDefault.toISOString().substring(0, 10);\n\n    let endDefault = new Date(Date.now());\n    endDefault.setUTCDate(1);\n    endDefault.setUTCMonth(endDefault.getUTCMonth() + duration - 1);\n    endDefault = endDefault.toISOString().substring(0, 10);\n\n    const [start, setStart] = useState(startDefault);\n    const [end, setEnd] = useState(endDefault);\n\n    const userLogin = useSelector(state => state.userLogin);\n    const { userInfo } = userLogin;\n\n    const pxxTACE = useSelector(state => state.pxxTACE);\n    const { loading: loadingTACE, error: errorTACE, tace } = pxxTACE;\n\n    useEffect(() => {\n\n        if (!userInfo) {\n            history.push('/login');\n        } \n    }, [history, userInfo]);\n\n    useEffect(() => {\n        if (userInfo && !loadingTACE) {\n            dispatch(getTace(userInfo.consultantProfil.practice, start, end));\n        }\n        // eslint-disable-next-line\n    }, [ dispatch, start, end ]);\n    \n    const navigationMonthHandler = (val) => {\n        const startDate = new Date(start);\n        const endDate = new Date(end);\n        startDate.setUTCMonth(startDate.getUTCMonth() + val);\n        endDate.setUTCMonth(endDate.getUTCMonth() + val);\n\n        setStart(startDate.toISOString().substring(0, 10));\n        setEnd(endDate.toISOString().substring(0, 10));\n    }\n\n    return (\n        <>\n            <Meta />\n\n            <Row>\n\n                <Col className=\"text-center\" xs={2}>\n                    <Button\n                        variant='primary'\n                        size='sm'\n                        onClick={() => navigationMonthHandler(-1)}\n                    ><i className=\"fas fa-caret-left\"></i>\n                    </Button>\n                </Col>\n\n                <Col>\n                    <InputGroup>\n                        <FormControl\n                            type='text'\n                            id='start-date'\n                            className='form-control-lg mb-3 text-right'\n                            plaintext\n                            value={start && `From: ${start.substring(0, 7).replace('-', '/')}`}\n                            readOnly\n                        ></FormControl>\n                    </InputGroup>\n                </Col>\n\n                <Col>\n                    <InputGroup>\n                        <FormControl\n                            type='text'\n                            id='date-end'\n                            className='form-control-lg mb-3 text-left'\n                            plaintext\n                            value={end && `To: ${end.substring(0, 7).replace('-', '/')}`}\n                            readOnly\n                        ></FormControl>\n                    </InputGroup>\n                </Col>\n\n                <Col className=\"text-center\" xs={2}>\n                    <Button\n                        variant='primary'\n                        size='sm'\n                        onClick={() => navigationMonthHandler(1)}\n                    ><i className=\"fas fa-caret-right\"></i>\n                    </Button>\n                </Col>\n            </Row>\n            \n            <DisplayChildren access={'tace'}>\n                <DropDownTitleContainer title='TACE' close={false}>\n                    <Row className='mt-3'>\n                        <Col>\n                            <h4>TACE ({userInfo && userInfo.consultantProfil.practice})</h4>\n                        </Col>\n                    </Row>\n\n                    <Row className='mt-1'>\n                        {loadingTACE ? <Loader /> : errorTACE ? <Message variant='danger'>{errorTACE}</Message> : (\n                            tace && tace.map((x, val) => (\n                                <Tace key={val} tace={x} practice={userInfo && userInfo.consultantProfil.practice} />\n                            ))\n                        )}\n                    </Row>\n                </DropDownTitleContainer>\n            </DisplayChildren>\n\n            <DisplayChildren access={'consoDispo'}>\n                <DropDownTitleContainer title='Availabilities' close={true}>\n                    <Row>\n                        <Col>\n                            <ConsoDispo\n                                //practice={practice}\n                                start={start}\n                                end={end}\n                                mode='consultation'\n                                history={history}\n                            />\n                        </Col>\n                    </Row>\n                </DropDownTitleContainer>\n            </DisplayChildren>\n        </>\n    )\n}\n\nexport default DashboardScreen;\n","import axios from 'axios';\nimport { \n    CLIENT_ALL_FAIL, \n    CLIENT_ALL_REQUEST, \n    CLIENT_ALL_SUCCESS, \n    CLIENT_CREATE_FAIL, \n    CLIENT_CREATE_REQUEST,\n    CLIENT_CREATE_SUCCESS,\n    CLIENT_DELETE_FAIL,\n    CLIENT_DELETE_REQUEST,\n    CLIENT_DELETE_SUCCESS,\n    CLIENT_UPDATE_FAIL,\n    CLIENT_UPDATE_REQUEST,\n    CLIENT_UPDATE_SUCCESS\n} from '../constants/clientConstants';\n\nexport const getAllClients = (name='', pageNumber='', pageSize='') => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: CLIENT_ALL_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        const { data } = await axios.get(`/api/clients?clientName=${name}&pageNumber=${pageNumber}&pageSize=${pageSize}`, config);\n        dispatch({ type: CLIENT_ALL_SUCCESS, payload: data });\n\n    } catch (error) {\n        dispatch({\n            type: CLIENT_ALL_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\nexport const createAClient = (clients) => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: CLIENT_CREATE_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                'Content-type': 'Application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        const { data } = await axios.post(`/api/clients`, clients, config);\n        dispatch({ type: CLIENT_CREATE_SUCCESS, payload: data });\n\n    } catch (error) {\n        dispatch({\n            type: CLIENT_CREATE_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\nexport const updateAClient = (clients) => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: CLIENT_UPDATE_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                'Content-type': 'Application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        const { data } = await axios.put(`/api/clients`, clients, config);\n        dispatch({ type: CLIENT_UPDATE_SUCCESS, payload: data });\n\n    } catch (error) {\n        dispatch({\n            type: CLIENT_UPDATE_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\nexport const deleteAClient = (clientsId) => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: CLIENT_DELETE_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers: {\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        const { data } = await axios.delete(`/api/clients/${clientsId}`, config);\n        dispatch({ type: CLIENT_DELETE_SUCCESS, payload: data });\n\n    } catch (error) {\n        dispatch({\n            type: CLIENT_DELETE_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n//import Message from '../components/Message';\n//import Button from 'react-bootstrap/Button';\n//import SearchInput from '../components/SearchInput';\nimport { createAClient, getAllClients } from '../actions/clientActions';\n//import { CLIENT_CREATE_RESET } from '../constants/clientConstants';\n\nimport CreatableSelect from 'react-select/creatable';\n\nconst SelectCompany = ({ company, setCompany, editRequest }) => {\n\n    const dispatch = useDispatch();\n\n    const clientAll = useSelector(state => state.clientAll);\n    const { clients: companies } = clientAll;\n\n    const clientCreate = useSelector(state => state.clientCreate);\n    const { success } = clientCreate;\n\n    useEffect(() => {\n        //dispatch(getAllClients(searchCompany));\n        dispatch(getAllClients(''));\n    }, [dispatch, success]);\n\n    const handleChange = (e) => {\n        //console.log('e', e);\n        if (e) {\n            const currentCompaniesId = companies.map(x => x._id);\n            //console.log('currentCompaniesId', currentCompaniesId);\n            if (currentCompaniesId.includes(e.value)) {\n                setCompany(e.label);\n            } else {\n                //console.log('create a compay');\n                dispatch(createAClient([{name:e.label, commercialTeam:[]}]));\n                setCompany(e.label);\n            }\n        } else {\n            setCompany('');\n        }\n    }\n\n    return (\n        <Row className='align-items-end'>\n            <Col>\n                <CreatableSelect\n                    placeholder='Select a company'\n                    isClearable\n                    onChange={handleChange}\n                    value={(company && company.label !=='') ? company : null}\n                    options={companies && companies.map(company => ({ value: company._id, label: company.name }))}\n                    isDisabled={!editRequest}\n                />\n            </Col>\n        </Row>\n    )\n}\n\nexport default SelectCompany\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Popover from 'react-bootstrap/Popover';\nimport Loader from '../components/Loader';\nimport Message from '../components/Message';\nimport Meta from '../components/Meta';\nimport { createDeal, getDealToEdit, updateDeal } from '../actions/dealActions';\nimport { getAllLeaders, getAllPractice } from '../actions/consultantActions';\nimport { DEAL_CREATE_RESET, DEAL_PROBABILITY, DEAL_STATUS, DEAL_UPDATE_RESET, TYPE_BUSINESS } from '../constants/dealConstants';\nimport DropDownTitleContainer from '../components/DropDownTitleContainer';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport ConsoDispo from '../components/ConsoDispo';\nimport ViewStaffs from '../components/ViewStaffs';\n//import SearchInput from '../components/SearchInput';\nimport SelectCompany from '../components/SelectCompany';\nimport { REQUEST_STATUS } from '../constants/dealConstants';\nimport StaffAConsultant from '../components/StaffAConsultant';\nimport DisplayChildren from '../components/DisplayChildren';\nimport SelectInput from '../components/SelectInput';\n\nconst StaffingEditScreen = ({ match, history }) => {\n\n    const dispatch = useDispatch();\n\n    const userLogin = useSelector(state => state.userLogin);\n    const { userInfo } = userLogin;\n\n    const dealCreate = useSelector(state => state.dealCreate);\n    const { loading, error, success, createId } = dealCreate;\n\n    const dealUpdate = useSelector(state => state.dealUpdate);\n    const { loading: loadingUpdate, error: errorUpdate } = dealUpdate;\n\n    const dealEdit = useSelector(state => state.dealEdit);\n    const { success: successEdit, deal: dealToEdit } = dealEdit;\n\n    const consultantPracticeList = useSelector(state => state.consultantPracticeList);\n    const { practiceList } = consultantPracticeList;\n\n    const consultantsAllLeaders = useSelector(state => state.consultantsAllLeaders);\n    const { leaderslist } = consultantsAllLeaders;\n\n    const [title, setTitle] = useState('');\n    const [company, setCompany] = useState('');\n    const [client, setClient] = useState('');\n    const [type, setType] = useState('');\n    const [status, setStatus] = useState('');\n    const [probability, setProbability] = useState('');\n    const [description, setDescription] = useState('');\n    const [proposalDate, setProposalDate] = useState('');\n    const [presentationDate, setPresentationDate] = useState('');\n    const [startDate, setStartDate] = useState('');\n    const [mainPractice, setMainPractice] = useState('');\n    const [othersPractices, setOthersPractices] = useState([]);\n    const [location, setLocation] = useState('');\n    const [srInstruction, setSrInstruction] = useState('');\n    const [srStatus, setSrStatus] = useState('');\n    const [srRessources, setSrRessources] = useState([]);\n    const [comments, setComments] = useState([]);\n    const [duration, setDuration] = useState('');\n    const [othersContacts, setOthersContacts] = useState('');\n    \n    const [newComment, setNewComment] = useState('');\n    \n    const [sdInstructions] = useState('');\n    const [sdStatus, setSdStatus] = useState('');\n    const [sdStaff, setSdStaff] = useState([]);\n    \n    const [wonDate, setWonDate] = useState('');\n    \n    const [modalWindowShow, setModalWindowShow] = useState(false);\n    const [sdConsultant, setSdConsultant] = useState('');\n    const [loadingSdConsultantData, setLoadingSdConsultantData] = useState({})\n    \n    const [editRequest, setEditRequest] = useState(match.params.id ? false : true);\n    \n    const [dealChange, setDealChange] = useState(false);\n    \n    //const [searchLeader, setSearchLeader] = useState('');\n    const [leader, setLeader] = useState([]);\n    \n    //const [searchCoLeader, setSearchCoLeader] = useState('');\n    const [coLeaders, setCoLeaders] = useState([]);\n    \n\n    const [companyMessage, setCompanyMessage] = useState(null);\n\n    //ConsoDispo\n    const analyseTime = 3;\n    let startDefault = new Date(Date.now());\n    startDefault.setUTCDate(1);\n    startDefault.setUTCMonth(startDefault.getUTCMonth());\n    startDefault = startDefault.toISOString().substring(0, 10);\n\n    let endDefault = new Date(Date.now());\n    endDefault.setUTCDate(1);\n    endDefault.setUTCMonth(endDefault.getUTCMonth() + analyseTime - 1);\n    endDefault = endDefault.toISOString().substring(0, 10);\n\n    const [start] = useState(startDefault);\n    const [end] = useState(endDefault);\n\n    useEffect(() => {\n        if (!userInfo) {\n            history.push('/login');\n        }\n    }, [history, userInfo]);\n\n    useEffect(() => {\n        if (!practiceList) {\n            dispatch(getAllPractice());\n        }\n    }, [dispatch, practiceList]);\n\n    useEffect(() => {\n        if (match.params.id) {\n            dispatch(getDealToEdit(match.params.id));\n        }\n    }, [dispatch, match])\n\n\n    useEffect(() => { \n        //dispatch(getAllLeaders(searchLeader));\n        dispatch(getAllLeaders());\n        \n    },[dispatch])\n\n    /* useEffect(() => {\n\n        dispatch(getAllLeaders(searchCoLeader));\n\n    }, [dispatch, searchCoLeader]) */\n\n\n    useEffect(() => {\n        if (match.params.id && successEdit) {\n            setTitle(dealToEdit.title);\n            setCompany(dealToEdit.company);\n            setClient(dealToEdit.client);\n            setStatus(dealToEdit.status);\n            setType(dealToEdit.type);\n            setProbability(dealToEdit.probability);\n            setDescription(dealToEdit.description);\n            setProposalDate(dealToEdit.proposalDate ? dealToEdit.proposalDate.substring(0, 10) : \"\");\n            setPresentationDate(dealToEdit.presentationDate ? dealToEdit.presentationDate.substring(0, 10) : \"\");\n            setStartDate(dealToEdit.startDate ? dealToEdit.startDate.substring(0, 10) : \"\");\n            setMainPractice(dealToEdit.mainPractice);\n            setOthersPractices(dealToEdit.othersPractices ? dealToEdit.othersPractices : []);\n            setLocation(dealToEdit.location);\n            setSrInstruction(dealToEdit.staffingRequest.instructions);\n            setSrStatus(dealToEdit.staffingRequest.requestStatus);\n            setSrRessources(dealToEdit.staffingRequest.ressources ? dealToEdit.staffingRequest.ressources : []);\n            setSdStatus(dealToEdit.staffingDecision.staffingStatus ? dealToEdit.staffingDecision.staffingStatus : '');\n            setSdStatus(dealToEdit.staffingDecision.instructions ? dealToEdit.staffingDecision.instructions : '');\n            setSdStaff(dealToEdit.staffingDecision.staff ? dealToEdit.staffingDecision.staff : []);\n            setLeader(dealToEdit.contacts.primary ? \n                [{id: dealToEdit.contacts.primary._id, value: dealToEdit.contacts.primary.name}] : ['']);\n            setCoLeaders(dealToEdit.contacts.secondary ?\n                dealToEdit.contacts.secondary.map( coLeader => ({id: coLeader._id, value: coLeader.name})) : []);\n            setComments(dealToEdit.comments ? dealToEdit.comments : []);\n            setDuration(dealToEdit.duration ? dealToEdit.duration : '');\n            setOthersContacts(dealToEdit.othersContacts ? dealToEdit.othersContacts : '');\n        }\n    }, [successEdit, dealToEdit, userInfo, match])\n\n    useEffect(() => {\n        if (success) {\n            history.push(`/staffing/${createId}`);\n            dispatch({ type: DEAL_CREATE_RESET });\n        }\n    }, [dispatch, history, success, createId]);\n\n    useEffect(() => {\n        if (match.params.id && dealChange) {\n            if (!company) {\n                setCompanyMessage('Please select a company');\n                setEditRequest(true);\n                return\n            } else {\n                setCompanyMessage('')\n            }\n            const deal = {\n                company: company,\n                client: client,\n                title: title,\n                type: type,\n                status: status,\n                contacts: {\n                    primary: leader.length ? leader[0].id : null,\n                    secondary: coLeaders.length ? coLeaders.map( x => x.id) : [],\n                },\n                probability: probability,\n                description: description,\n                proposalDate: proposalDate,\n                presentationDate: presentationDate,\n                wonDate: wonDate,\n                startDate: startDate,\n                duration: duration,\n                mainPractice: mainPractice,\n                othersPractices: othersPractices,\n                location: location,\n                staffingRequest: {\n                    instructions: srInstruction,\n                    requestStatus: srStatus,\n                    ressources: srRessources\n                },\n                staffingDecision: {\n                    instructions: sdInstructions,\n                    staffingStatus: sdStatus,\n                    staff: sdStaff.map(staff => ({\n                        responsability: staff.responsability,\n                        idConsultant: staff.idConsultant._id,\n                        priority: staff.priority,\n                        information: staff.information\n                    }))\n                },\n                comments: comments,\n                othersContacts: othersContacts\n            }\n            dispatch(updateDeal(match.params.id, deal));\n            setDealChange(false);\n            setNewComment('');\n        }\n\n    }, [match, dispatch, userInfo, dealChange, company, type, client, title, status, probability, description, proposalDate, presentationDate,\n        wonDate, startDate, duration, mainPractice, othersPractices, location, srInstruction, srStatus, srRessources, sdInstructions,\n        sdStatus, sdStaff, leader, coLeaders, comments, othersContacts\n    ]);\n\n    const updateOthersPractices = () => {\n        const selectedList = [];\n        const selectBox = document.getElementById('others-practices');\n        for (let i = 0; i < selectBox.options.length; i++) {\n            if (selectBox.options[i].selected) {\n                selectedList.push(selectBox.options[i].value);\n            }\n        }\n        setOthersPractices(selectedList);\n    }\n\n    const removeStaffHandler = (id) => {\n        let tampon = new Array(...sdStaff);\n        tampon = tampon.filter(consultant => consultant.idConsultant._id !== id);\n        setSdStaff(tampon);\n        setDealChange(true);\n    }\n\n    const addStaffHandler = (consultant, responsability, priority, information) => {\n        \n        let tampon = new Array(...sdStaff);\n\n        // Rule if consultant already added in staff\n        if(sdStaff.map(x => x.idConsultant._id).includes(consultant._id)) {\n            tampon = tampon.filter(x => x.idConsultant._id !== consultant._id);            \n        }\n\n        tampon.push({\n            idConsultant: {\n                _id: consultant._id,\n                name: consultant.name,\n            },\n            responsability: responsability,\n            priority: priority,\n            information: information\n        });\n\n        //tampon.sort((a,b) => a.priority - b.priority)\n\n        setSdStaff(tampon);\n        setDealChange(true);\n    }\n\n    const prepareDeal = () => {\n        return {\n            company: company,\n            client: client,\n            title: title,\n            contacts: {\n                primary: leader.length ? leader[0].id : null,\n                secondary: coLeaders.length ? coLeaders.map( x => x.id) : [],\n            },\n            type: type,\n            status: status,\n            probability: probability,\n            description: description,\n            proposalDate: proposalDate,\n            presentationDate: presentationDate,\n            wonDate: wonDate,\n            startDate: startDate,\n            duration: duration,\n            mainPractice: mainPractice,\n            othersPractices: othersPractices,\n            location: location,\n            staffingRequest: {\n                instructions: srInstruction,\n                requestStatus: srStatus,\n                ressources: srRessources\n            },\n            staffingDecision: {\n                instructions: sdInstructions,\n                staffingStatus: sdStatus,\n                staff: sdStaff.map(staff => ({\n                    responsability: staff.responsability,\n                    idConsultant: staff.idConsultant._id,\n                    priority: staff.priority,\n                    information: staff.information\n                }))\n            },\n            comments: comments,\n            othersContacts: othersContacts\n        }\n    }\n\n    /*\n    const deleteCompanyHandler = () => {\n        setCompany('');\n        setDealChange(true);\n    }\n    */\n\n    const submitHandler = (e) => {\n        e.preventDefault();\n        if (!company) {\n            setCompanyMessage('Please select a company');\n            return;\n        } else {\n            setCompanyMessage(null)\n        }\n        const deal = prepareDeal();\n\n        if (match.params.id) {\n            dispatch(updateDeal(match.params.id, deal));\n        } else {\n            dispatch(createDeal(deal));\n        }\n    };\n\n    const addCommentHandler = () => {\n        const newComments = comments.slice();\n        newComments.push({\n            message: newComment,\n            sender:{\n                _id: userInfo._id,\n                name: userInfo.name\n            },\n            date: new Date(Date.now()).toISOString()\n        });\n        newComments.sort((a,b) => (Date.parse(b.date) - Date.parse(a.date)));\n        setComments(newComments);\n        setDealChange(true);\n    };\n\n    const deleteCommentHandler = (value) => {\n        let newComments = comments.slice();\n        newComments = newComments.filter(x => x.date !== value);\n        setComments(newComments);\n        setDealChange(true);\n    };\n\n    const formatName = (fullName) => {\n        const separateName = fullName.split(' ');\n        if (separateName.length === 1) {\n            return separateName[0];\n        } else {\n            const outName = separateName.map((word, indice1) => {\n                if (indice1 === 0) {\n                    return word[0].toUpperCase() + '.';\n                } else {\n                    return word.toUpperCase();\n                }\n            });\n            return outName.join(' ');\n        }\n    }\n\n    return (\n        <>\n            <Meta />\n            {modalWindowShow && (\n                <StaffAConsultant\n                    show={modalWindowShow}\n                    onHide={() => setModalWindowShow(false)}\n                    consultant={sdConsultant}\n                    loadingData={loadingSdConsultantData}\n                    mode='staffing'\n                    addStaffHandler={addStaffHandler}\n                    history={history}\n                />\n            )}\n\n            <h1>Staffing request</h1>\n            <Form onSubmit={submitHandler}>\n                <Row className='mt-3'>\n                    <Col xs={6} md={2}>\n                        {match.params.id && (\n                            <Button\n                                type='button'\n                                variant='primary'\n                                onClick={() => {\n                                    history.go(-1);\n                                    dispatch({type: DEAL_UPDATE_RESET})\n                                }}\n                                block\n                            >Go Back</Button>\n                        )}\n                    </Col>\n                    <Col xs={0} md={8}></Col>\n                    <Col xs={6} md={2}>\n                        {match.params.id && loadingUpdate && <Loader />}\n                    </Col>\n                </Row>\n\n                {error && (<Row><Col><Message variant='danger'>{error}</Message></Col></Row>)}\n\n                {match.params.id && (\n                    <Row className='mt-3 align-items-center'>\n                        <Col md={1}>\n                            <Button\n                                onClick={() => {\n                                    setEditRequest(!editRequest);\n                                    editRequest && setDealChange(true);\n                                }}\n                                variant='light'\n                            >{editRequest ? (<i className=\"far fa-check-circle\"></i>) : (<i className=\"far fa-edit\"></i>)}\n                            </Button>\n                        </Col>\n                        <Col className='text-left align-middle'>\n                            {editRequest && (<p> Please click to update</p>)}\n                            {errorUpdate && (<Message variant='danger'>{errorUpdate}</Message>)}\n                        </Col>\n                    </Row>\n                )}\n\n                <Row className='mt-2'>\n\n                    <Col xs={12} md={4}>\n\n                        <ListGroup.Item>\n                            <Form.Group controlId='title' className='mb-0'>\n                                <Form.Label as='h5'>Title {editRequest && '*'}</Form.Label>\n                                {editRequest ? (\n                                    <Form.Control\n                                        type='text'\n                                        placeholder='Staffing request object'\n                                        value={title ? title : ''}\n                                        onChange={(e) => setTitle(e.target.value)}\n                                        required\n                                    ></Form.Control>\n                                ) : (\n                                        <Form.Control\n                                            type='text'\n                                            plaintext\n                                            value={title ? title : ''}\n                                            readOnly\n                                        ></Form.Control>\n                                    )}\n                            </Form.Group>\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n\n                            <Form.Group controlId='select-company' className='mb-0'>\n                                <Form.Label as='h5'>Company</Form.Label>\n                                <SelectCompany\n                                    company={{ value: company, label: company }}\n                                    setCompany={setCompany}\n                                    editRequest={editRequest}\n                                />\n                            </Form.Group>\n\n                            {companyMessage && <Message variant='danger'>{companyMessage}</Message>}\n\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n                            <Form.Group controlId='client' className='mb-0'>\n                                <Form.Label as='h5'>Client</Form.Label>\n                                {editRequest ? (\n                                    <Form.Control\n                                        type='text'\n                                        placeholder='Client name'\n                                        value={client ? client : ''}\n                                        onChange={(e) => setClient(e.target.value)}\n                                    ></Form.Control>\n                                ) : (\n                                        <Form.Control\n                                            type='text'\n                                            plaintext\n                                            readOnly\n                                            value={client ? client : ''}\n                                        ></Form.Control>\n                                    )}\n                            </Form.Group>\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n                            <Form.Group controlId='type' className='mb-0'>\n                                <Form.Label as='h5'>Type of business {editRequest && '*'}</Form.Label>\n                                {editRequest ? (\n                                    <Form.Control\n                                        as='select'\n                                        value={type ? type : ''}\n                                        onChange={(e) => { setType(e.target.value) }}\n                                        required\n                                    >\n                                        <option value=''>--Select--</option>\n                                        {TYPE_BUSINESS.map(type => (\n                                            <option\n                                                key={type.name}\n                                                value={type.name}\n                                            >{type.name}</option>\n                                        ))}\n                                    </Form.Control>\n                                ) : (\n                                        <Form.Control\n                                            type='text'\n                                            plaintext\n                                            value={type ? type : ''}\n                                            readOnly\n                                        ></Form.Control>\n                                    )}\n                            </Form.Group>\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n                            <Form.Group controlId='status' className='mb-0'>\n                                <Form.Label as='h5'>Status {editRequest && '*'}</Form.Label>\n                                {editRequest ? (\n                                    <Form.Control\n                                        as='select'\n                                        value={status ? status : ''}\n                                        onChange={(e) => {\n                                            if (e.target.value === 'Won') {\n                                                setWonDate(new Date(Date.now()));\n                                            }\n                                            else {\n                                                setWonDate('');\n                                            }\n                                            setStatus(e.target.value);\n                                        }}\n                                        required\n                                    >\n                                        <option value=''>--Select--</option>\n                                        {DEAL_STATUS.map( status => (\n                                            <option\n                                                key={status.name}\n                                                value={status.name}\n                                            >{status.name}</option>\n                                        ))}\n                                    </Form.Control>\n                                ) : (\n                                        <Form.Control\n                                            type='text'\n                                            plaintext\n                                            readOnly\n                                            value={status ? status : ''}\n                                        ></Form.Control>\n                                    )}\n                            </Form.Group>\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n                            <Form.Group controlId='probability' className='mb-0'>\n                                <Form.Label as='h5'>Probability {editRequest && '*'}</Form.Label>\n                                {editRequest ? (\n                                    <Form.Control\n                                        as='select'\n                                        value={probability ? probability : ''}\n                                        onChange={(e) => setProbability(e.target.value)}\n                                        required\n                                    >\n                                        <option value=''>--Select--</option>\n                                        {DEAL_PROBABILITY.map( prob => (\n                                            <option \n                                                key={prob.name}\n                                                value={prob.name}\n                                            >{prob.name} %</option>\n                                        ))}\n                                    </Form.Control>\n                                ) : (\n                                        <Form.Control\n                                            type='text'\n                                            value={`${probability} %`}\n                                            plaintext\n                                            readOnly\n                                        ></Form.Control>\n                                    )}\n                            </Form.Group>\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n                            <Form.Group controlId='location' className='mb-0'>\n                                <Form.Label as='h5'>Location</Form.Label>\n                                {editRequest ? (\n                                    <Form.Control\n                                        type='text'\n                                        placeholder='Location'\n                                        value={location ? location : ''}\n                                        onChange={(e) => setLocation(e.target.value)}\n                                    ></Form.Control>\n                                ) : (\n                                        <Form.Control\n                                            type='text'\n                                            plaintext\n                                            readOnly\n                                            value={location ? location : ''}\n                                        ></Form.Control>\n                                    )}\n                            </Form.Group>\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n                            <Form.Group controlId='main-practice' className='mb-0'>\n                                <Form.Label as='h5'>Main Practice {editRequest && '*'}</Form.Label>\n                                {editRequest ? (\n                                    <Form.Control\n                                        as='select'\n                                        value={mainPractice ? mainPractice : ''}\n                                        onChange={(e) => setMainPractice(e.target.value)}\n                                        required\n                                    >\n                                        <option value=''>--Select--</option>\n                                        {practiceList && practiceList.map((practice, val) => (\n                                            <option\n                                                value={practice}\n                                                key={val}\n                                            >{practice}</option>\n                                        ))}\n                                    </Form.Control>\n                                ) : (\n                                        <Form.Control\n                                            type='text'\n                                            plaintext\n                                            readOnly\n                                            value={mainPractice ? mainPractice : ''}\n                                        ></Form.Control>\n                                    )}\n                            </Form.Group>\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n                            <Form.Group controlId='others-practices' className='mb-0'>\n                                <Form.Label as='h5'>Others Practices</Form.Label>\n                                {editRequest ? (\n                                    <Form.Control\n                                        as='select'\n                                        multiple\n                                        value={othersPractices ? othersPractices : []}\n                                        onChange={(e) => updateOthersPractices()}\n                                    >\n                                        {practiceList && practiceList.map((practice, val) => (\n                                            (practice !== mainPractice) && (\n                                                <option\n                                                    value={practice}\n                                                    key={val}\n                                                >{practice}</option>\n                                            )\n                                        ))}\n                                    </Form.Control>\n                                ) : (\n                                        <Form.Control\n                                            type='text'\n                                            value={othersPractices ? othersPractices.join(', ') : ''}\n                                            plaintext\n                                            readOnly\n                                        ></Form.Control>\n                                    )}\n                            </Form.Group>\n                        </ListGroup.Item>\n\n                    </Col>\n\n                    <Col xs={12} md={8}>\n\n                        <ListGroup.Item>\n                            <Row className='align-items-start'>\n                                <Col xs={12} md={4}>\n\n                                    <Form.Group controlId='select-leader' className='mb-0'>\n                                        <Form.Label as='h5'>Leader</Form.Label>\n                                        <SelectInput\n                                            options={leaderslist ? leaderslist.map(consultant => ({ value: consultant._id, label: consultant.name })) : []}\n                                            value={leader.length ? { value: leader[0].id, label: leader[0].value } : {}}\n                                            setValue={setLeader}\n                                            multi={false}\n                                            disabled={!editRequest}\n                                        />\n                                    </Form.Group>\n                                    \n                                </Col>\n                            \n                                <Col xs={12} md={4}>\n                                    \n                                    <Form.Group controlId='others' className='mb-0'>\n                                        <Form.Label as='h5'>Co-Leader(s)</Form.Label>\n                                        <SelectInput\n                                            options={leaderslist ? leaderslist.map(consultant => ({ value: consultant._id, label: consultant.name })) : []}\n                                            value={coLeaders ? coLeaders.map(x => ({ value: x.id, label: x.value })) : []}\n                                            setValue={setCoLeaders}\n                                            multi={true}\n                                            disabled={!editRequest}\n                                        />\n                                    </Form.Group>\n                                </Col>\n\n                                <Col xs={12} md={4}>\n                                    <Form.Group controlId='others' className='mb-0'>\n                                        <Form.Label as='h5'>Others contacts</Form.Label>\n                                        {editRequest ? (\n                                            <Form.Control\n                                                type='text'\n                                                placeholder='email1@mail.com;email2@mail.com'\n                                                value={othersContacts ? othersContacts : ''}\n                                                onChange={(e) => setOthersContacts(e.target.value)}\n                                            ></Form.Control>\n                                        ) : (\n                                                <Form.Control\n                                                    type='text'\n                                                    value={othersContacts ? othersContacts : ''}\n                                                    plaintext\n                                                    readOnly\n                                                ></Form.Control>\n                                            )}\n                                    </Form.Group>\n                                </Col>\n\n                            </Row>\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n                            <Form.Group controlId='description' className='mb-0'>\n                                <Form.Label as='h5'>Description {editRequest && '*'}</Form.Label>\n                                {editRequest ? (\n                                    <Form.Control\n                                        as='textarea'\n                                        rows={3}\n                                        placeholder='Deal description'\n                                        value={description ? description : ''}\n                                        onChange={(e) => setDescription(e.target.value)}\n                                        required\n                                    ></Form.Control>\n                                ) : (\n                                        <Form.Control\n                                            type='text'\n                                            value={description ? description : ''}\n                                            plaintext\n                                            readOnly\n                                        ></Form.Control>\n                                    )}\n                            </Form.Group>\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n                            <h5>Sheduling</h5>\n                            <Row className='align-items-end'>\n                                <Col>\n                                    <Form.Group controlId='proposal-date' className='mb-0'>\n                                        <Form.Label>Proposal</Form.Label>\n                                        {editRequest ? (\n                                            <Form.Control\n                                                type='date'\n                                                placeholder='Deal date'\n                                                value={proposalDate ? proposalDate : ''}\n                                                onChange={(e) => setProposalDate(e.target.value)}\n                                            ></Form.Control>\n                                        ) : (\n                                                <Form.Control\n                                                    type='date'\n                                                    value={proposalDate ? proposalDate : ''}\n                                                    plaintext\n                                                    readOnly\n                                                ></Form.Control>\n                                            )}\n                                    </Form.Group>\n                                </Col>\n\n                                <Col>\n                                    <Form.Group controlId='presentation-date' className='mb-0'>\n                                        <Form.Label>Presentation</Form.Label>\n                                        {editRequest ? (\n                                            <Form.Control\n                                                type='date'\n                                                placeholder='Presentation date'\n                                                value={presentationDate ? presentationDate : ''}\n                                                onChange={(e) => setPresentationDate(e.target.value)}\n                                            ></Form.Control>\n                                        ) : (\n                                                <Form.Control\n                                                    type='date'\n                                                    value={presentationDate ? presentationDate : ''}\n                                                    plaintext\n                                                    readOnly\n                                                ></Form.Control>\n                                            )}\n                                    </Form.Group>\n                                </Col>\n\n                                <Col>\n                                    <Form.Group controlId='start-date' className='mb-0'>\n                                        <Form.Label>Start {editRequest && '*'}</Form.Label>\n                                        {editRequest ? (\n                                            <Form.Control\n                                                type='date'\n                                                placeholder='Start date'\n                                                value={startDate ? startDate : ''}\n                                                onChange={(e) => setStartDate(e.target.value)}\n                                                required\n                                            ></Form.Control>\n                                        ) : (\n                                                <Form.Control\n                                                    type='date'\n                                                    value={startDate ? startDate : ''}\n                                                    plaintext\n                                                    readOnly\n                                                ></Form.Control>\n                                            )}\n                                    </Form.Group>\n                                </Col>\n\n                                <Col>\n                                    <Form.Group controlId='duration' className='mb-0'>\n                                        <Form.Label>Duration (month) {editRequest && '*'}</Form.Label>\n                                        {editRequest ? (\n                                            <Form.Control\n                                                type='number'\n                                                placeholder='Duration'\n                                                min={0}\n                                                step={0.5}\n                                                value={duration ? duration : 0}\n                                                onChange={(e) => setDuration(e.target.value)}\n                                                required\n                                            ></Form.Control>\n                                        ) : (\n                                                <Form.Control\n                                                    type='number'\n                                                    value={duration ? duration : 0}\n                                                    plaintext\n                                                    readOnly\n                                                ></Form.Control>\n                                            )}\n                                    </Form.Group>\n                                </Col>\n                            </Row>\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n                            <Row>\n                                <Col xs={12} md={8}>\n                                    <Form.Group controlId='sr-instruction' className='mb-0'>\n                                        <Form.Label as='h5'>Staffing instruction {editRequest && '*'}</Form.Label>\n                                        {editRequest ? (\n                                            <Form.Control\n                                                as='textarea'\n                                                rows={3}\n                                                placeholder='Staffing instruction'\n                                                value={srInstruction ? srInstruction : ''}\n                                                onChange={(e) => setSrInstruction(e.target.value)}\n                                                required\n                                            ></Form.Control>\n                                        ) : (\n                                                <Form.Control\n                                                    type='text'\n                                                    value={srInstruction ? srInstruction : ''}\n                                                    plaintext\n                                                    readOnly\n                                                ></Form.Control>\n                                            )}\n                                    </Form.Group>\n                                </Col>\n\n                                <Col xs={12} md={4}>\n                                    <Form.Group controlId='sr-status' className='mb-0'>\n                                        <Form.Label as='h5'>Status {editRequest && '*'}</Form.Label>\n                                        <Form.Control\n                                            as='select'\n                                            value={srStatus ? srStatus : ''}\n                                            onChange={(e) => {\n                                                setSrStatus(e.target.value)\n                                                setDealChange(true);\n                                            }}\n                                            required\n                                        >\n                                            <option value=''>--Select--</option>\n                                            {REQUEST_STATUS.map(({name}) => (\n                                                <option\n                                                    key={name}\n                                                    value={name}\n                                                >{name}</option>\n                                            ))}\n\n                                        </Form.Control>\n                                    </Form.Group>\n                                </Col>\n                            </Row>\n                        </ListGroup.Item>\n\n                        {match.params.id && (\n                            <ListGroup.Item>\n                                <h5>Staffing decision</h5>\n                                {sdStaff && [...new Set(sdStaff.map(x => x.priority))].sort().map(priority => (\n                                    <ListGroup.Item key={priority}>\n                                        <Row key={priority}>\n                                            <Col sm={1}>\n                                                <Row className='my-1'><Col>{priority}</Col></Row>\n                                            </Col>\n                                            <Col sm={11}>\n                                                {sdStaff.filter(x => x.priority === priority).map(staff => (\n                                                    <Row key={staff.idConsultant._id} className='my-1'>\n                                                        <Col sm={10}>\n                                                            <OverlayTrigger\n                                                                placement=\"top\"\n                                                                trigger='click'\n                                                                overlay={\n                                                                    <Popover \n                                                                        id='popover-others-staffs' \n                                                                        style={{ 'maxWidth': '40%' }}\n                                                                    >\n                                                                        <Popover.Title id=\"contained-modal-title-vcenter\">\n                                                                            Others staffs\n                                                                        </Popover.Title>\n\n                                                                        <Popover.Content>\n                                                                            <ViewStaffs\n                                                                                history={history}\n                                                                                consultantId={staff.idConsultant._id}\n                                                                                onNavigate={() => ('')}\n                                                                                displayedDeal={match.params.id}\n                                                                            />\n                                                                        </Popover.Content>\n                                                                    </Popover>\n                                                                }\n                                                            >\n                                                                <div><strong>{`${staff.responsability}: `}</strong>{`${formatName(staff.idConsultant.name)}`}<i>{` (${staff.information})`}</i></div>\n                                                            </OverlayTrigger>\n                                                        </Col>\n                                                        <Col sm={2} className='px-0'>\n                                                            <DisplayChildren access='editStaff'>\n                                                                <Button\n                                                                    onClick={() => {\n                                                                        setSdConsultant(staff.idConsultant)\n                                                                        setLoadingSdConsultantData({\n                                                                            information: staff.information,\n                                                                            priority: staff.priority,\n                                                                            responsability: staff.responsability\n                                                                        })\n                                                                        setModalWindowShow(true)\n                                                                    }}\n                                                                    variant='secondary'\n                                                                    className='text-center mx-1'\n                                                                    size='sm'\n                                                                ><i className=\"fas fa-edit\"></i></Button>\n                                                            </DisplayChildren>\n                                                            <DisplayChildren access='editStaff'>\n                                                                <Button\n                                                                    onClick={() => removeStaffHandler(staff.idConsultant._id)}\n                                                                    variant='danger'\n                                                                    className='text-center mx-1'\n                                                                    size='sm'\n                                                                ><i className=\"fas fa-times\"></i></Button>\n                                                            </DisplayChildren>\n                                                        </Col>\n                                                    </Row>\n                                                ))}\n                                            </Col>\n                                        </Row>\n                                    </ListGroup.Item>\n                                ))}\n                            </ListGroup.Item>   \n                        )}\n                        \n                        {!match.params.id && (\n                            <Row className='mt-3'>\n                                <Col className='text-right'>\n                                    <Button\n                                        type='submit'\n                                        variant='primary'\n                                    >{(loading) ? <Loader /> : 'Submit staffing'}\n                                    </Button>\n                                </Col>\n                            </Row>\n                        )}\n\n                        {dealToEdit && match.params.id && (\n                            <ListGroup.Item>\n                                <Row className='my-1'>\n                                    <Col>\n                                        <strong>Last update at: </strong>{dealToEdit.updatedAt.substring(0, 19).replace('T', ' ')}\n                                        \n                                            \n                                                    <Row className='align-items-center my-3'>\n                                                        <Col xs={11} >\n                                                            <Form.Group controlId='comment' className='mb-0'>\n                                                                <Form.Control\n                                                                    type='text'\n                                                                    placeholder='Add a comment'\n                                                                    value={newComment ? newComment : ''}\n                                                                    onChange={(e) => setNewComment(e.target.value)}\n                                                                    onKeyUp={(e) => (e.key === 'Enter') && addCommentHandler()}\n                                                                ></Form.Control>\n                                                            </Form.Group>\n                                                        </Col>\n                                                        <Col xs={1}>\n                                                            <Button\n                                                                variant='primary'\n                                                                onClick={() => addCommentHandler()}\n                                                                size='sm'\n                                                            ><i className=\"fas fa-plus\"></i></Button>\n                                                        </Col>\n                                                    </Row>\n\n                                            <ListGroup className='my-3'>\n                                            {comments && comments.map( (comment, index) => (\n                                                <ListGroup.Item\n                                                    key={index}\n                                                    className='mb-0'\n                                                >\n                                                    \n                                                    <p>\n                                                        {comment.message}\n                                                    </p>\n                                                    <p style={{textAlign: 'right', marginBottom: '0'}}><i>By {comment.sender.name} the {comment.date.substring(0,19).replace('T', ' at ')}  {comment.sender._id === userInfo._id && (\n                                                            <Button\n                                                                size='sm'\n                                                                variant='ligth'\n                                                                style={{color:'red'}}\n                                                                onClick={() => deleteCommentHandler(comment.date)}\n                                                            >--delete--</Button>\n                                                    )}</i></p>\n                                                </ListGroup.Item>\n                                            ))}\n                                            </ListGroup>\n                                        <strong>Created at: </strong>{dealToEdit.createdAt.substring(0, 19).replace('T', ' ')} <br />\n                                    </Col>\n                                </Row>\n                            </ListGroup.Item>\n                        )}\n\n                    </Col>\n                </Row>\n            </Form>\n\n            {match.params.id && (\n                <DropDownTitleContainer title='Availabilities' close={false}>\n                    <ConsoDispo\n                        start={start}\n                        end={end}\n                        mode='staffing'\n                        addStaffHandler={addStaffHandler}\n                        history={history}\n                    />\n                </DropDownTitleContainer>\n            )}\n        </>\n    )\n}\n\nexport default StaffingEditScreen;","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Table from 'react-bootstrap/Table'\nimport Button from 'react-bootstrap/Button';\nimport Loader from '../components/Loader';\nimport Message from '../components/Message';\nimport DropDownTitleContainer from '../components/DropDownTitleContainer';\nimport Pagination from 'react-bootstrap/Pagination';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nimport { createSkills, deleteSkill, getAllSkills } from '../actions/skillActions';\nimport { getAllConsultantSkills } from '../actions/consultantActions';\n\nconst ManageSkillsScreen = ({ history }) => {\n\n    const dispatch = useDispatch();\n\n    // pagination configuration\n\n    const [pageSize, setPageSize] = useState(10);\n    const [pageNumber, setPageNumber] = useState(1);\n    const category = ''; // to implement if you want to search on specific category\n    const [name, setName] = useState('');\n\n    // local states to add a category\n    const [skillCategoryList, setSkillCategoryList] = useState([]);\n    const [skillCategory, setSkillCategory] = useState('default');\n    const [skillName, setSkillName] = useState('');\n    const [skillDescription, setSkillDescription] = useState('');\n\n    const userLogin = useSelector(state => state.userLogin);\n    const { userInfo } = userLogin;\n\n    const skillList = useSelector(state => state.skillList);\n    const { loading, skills, pages, page, count } = skillList;\n\n    const skillDelete = useSelector(state => state.skillDelete);\n    const { error, success } = skillDelete;\n\n    const skillCreate = useSelector(state => state.skillCreate);\n    const { loading: loadingCreateSkill, error: errorCreateSkill, success: successCreateSkill } = skillCreate;\n\n    const consultantAllSkills = useSelector(state => state.consultantAllSkills);\n    const { loading: loadingSkills, skills: skillsList } = consultantAllSkills;\n\n    useEffect(() => {\n        if (!userInfo || !['admin', 'coordinator'].includes(userInfo.profil.profil)) {\n            history.push('/login');\n        } else {\n            dispatch(getAllSkills(category, name, pageNumber, pageSize));\n        }\n    }, [dispatch, history, userInfo, category, name, pageNumber, pageSize]);\n\n    useEffect(() => {\n        if (success) {\n            dispatch(getAllSkills(category, name, pageNumber, pageSize));\n        }\n    // eslint-disable-next-line\n    }, [dispatch, success]);\n\n    useEffect(() => {\n        if (successCreateSkill) {\n            dispatch(getAllSkills(category, name, pageNumber, pageSize));\n        }\n    // eslint-disable-next-line\n    }, [dispatch, successCreateSkill]);\n\n    useEffect(() => {\n        if (!skillsList) {\n            if (!loadingSkills) {\n                dispatch(getAllConsultantSkills());\n            }\n        } else {\n            let categoryList = skillsList.map(x => x.category);\n            categoryList = [...new Set(categoryList)];\n            setSkillCategoryList(categoryList);\n        }\n    }, [dispatch, skillsList, loadingSkills]);\n\n\n    const handlerAddSkill = (e) => {\n        e.preventDefault();\n        const skillToCreate = {\n            category: skillCategory,\n            name: skillName,\n            description: skillDescription\n        };\n        dispatch(createSkills(skillToCreate));\n    };\n\n    const onClickDeleteHandler = (skill) => {\n        if (window.confirm(`Are you sure to delete skill: ${skill.name} ?`)) {\n            dispatch(deleteSkill(skill._id));\n        }\n    }\n\n    return (\n        <>\n            <DropDownTitleContainer title='Create Skills' close={true}>\n                <ListGroup.Item>\n                <Row className='mt-3'>\n                    <Col>\n                        <Form onSubmit={handlerAddSkill}>\n                            <Form.Row>\n                                <Col md={3}>\n                                    <Form.Group controlId='skillCategory'>\n                                        <Form.Control\n                                            as='select'\n                                            value={skillCategory ? skillCategory : 'default'}\n                                            onChange={(e) => setSkillCategory(e.target.value)}\n                                            required\n                                        >\n                                            <option value='default'>Please Select</option>\n                                            {skillCategoryList && (\n                                                skillCategoryList.map((x, val) => (\n                                                    <option\n                                                        value={x}\n                                                        key={val}\n                                                        onChange={(e) => { setSkillCategory(e.target.value) }}\n                                                    >{x}</option>\n                                                )))}\n\n\n                                        </Form.Control>\n                                    </Form.Group>\n                                </Col>\n                                <Col md={3}>\n                                    <Form.Group controlId='name-skill'>\n                                        <Form.Control\n                                            type='text'\n                                            placeholder='Skill'\n                                            value={skillName && skillName}\n                                            onChange={(e) => setSkillName(e.target.value)}\n                                            disabled={skillCategory === 'default'}\n                                            required\n                                        ></Form.Control>\n                                    </Form.Group>\n                                </Col>\n                                <Col md={4}>\n                                    <Form.Group controlId='description-skill'>\n                                        <Form.Control\n                                            type='text'\n                                            placeholder='Skill description'\n                                            value={skillDescription && skillDescription}\n                                            onChange={(e) => setSkillDescription(e.target.value)}\n                                            disabled={skillCategory === 'default'}\n                                            required\n                                        ></Form.Control>\n                                    </Form.Group>\n                                </Col>\n\n                                <Col className='text-right'>\n                                    <Button type='submit' variant='primary' block>\n                                        {loadingCreateSkill ? <Loader /> : 'Add'}\n                                    </Button>\n                                </Col>\n                            </Form.Row>\n                            {errorCreateSkill && <Message variant='danger'>{errorCreateSkill}</Message>}\n                        </Form>\n\n                    </Col>\n                </Row>\n                </ListGroup.Item>\n            </DropDownTitleContainer>\n            \n            <DropDownTitleContainer title='Search Skills' close={false}>\n                <ListGroup.Item>\n                <Row className='mt-3'>\n\n                    <Col xs={6} md={2}>\n                        <InputGroup>\n                            <FormControl\n                                type='text'\n                                className=\"mb-3\"\n                                placeholder='Search skill'\n                                value={name && name}\n                                onChange={(e) => setName(e.target.value)}\n                            ></FormControl>\n                        </InputGroup>\n                    </Col>\n\n                    <Col xs={6} md={8}>\n                        <Form.Control\n                            plaintext\n                            readOnly\n                            value={count ? `${count} skills found` : '0 skills found'} />\n                    </Col>\n\n                    <Col xs={6} md={2}>\n                        <InputGroup>\n                            <FormControl\n                                as='select'\n                                id='number-c'\n                                className=\"mb-3\"\n                                value={pageSize && pageSize}\n                                onChange={(e) => setPageSize(e.target.value)}\n                            >\n                                {[5, 10, 15, 20, 50].map(x => (\n                                    <option\n                                        key={x}\n                                        value={x}\n                                    >{x} / page</option>\n                                ))}\n                            </FormControl>\n                        </InputGroup>\n                    </Col>\n\n                </Row>\n\n                {skills && skills.length === 0 ? <Message variant='information'>You have not access to these information</Message> :\n                    loading ? <Loader /> : error ? <Message variant=\"danger\">{error}</Message> : (\n\n\n                        <Table responsive hover striped>\n                            <thead>\n                                <tr className='table-primary'>\n                                    <th className='align-middle text-light'>Category</th>\n                                    <th className='align-middle text-light'>Skill</th>\n                                    <th className='align-middle text-light'>Description</th>\n                                    <th className='align-middle text-light'></th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                {skills && skills.map((skill) => (\n                                    <tr key={skill._id}>\n                                        <td className='align-middle'>{skill.category}</td>\n                                        <td className='align-middle'>{skill.name}</td>\n                                        <td className='align-middle'>{skill.description}</td>\n                                        <td className='align-middle'>\n                                            <Button \n                                                variant='danger' \n                                                onClick={() => onClickDeleteHandler(skill)}\n                                                size='sm'\n                                            ><i className=\"fas fa-times\"></i>\n                                            </Button>\n                                        </td>\n                                    </tr>\n                                ))}\n                            </tbody>\n                        </Table>\n\n                    )}\n\n                <Pagination>\n                    <Pagination.Prev\n                        onClick={() => setPageNumber(page - 1)}\n                        disabled={page === 1}\n                    />\n                    {[...Array(pages).keys()].map(x => (\n                        [0, 1, pages - 2, pages - 1].includes(x) ? (\n                        <Pagination.Item\n                            key={x + 1}\n                            active={x + 1 === page}\n                            onClick={() => {\n                                dispatch(getAllSkills(category, name, x + 1, pageSize));\n                                setPageNumber(x + 1);\n                            }}\n                        >{x + 1}</Pagination.Item>\n                        ) : (pages > 4 && x === 2) && (\n                            <Pagination.Ellipsis key={x + 1} />\n                        )\n                    ))}\n                    <Pagination.Next\n                        onClick={() => setPageNumber(page + 1)}\n                        disabled={page === pages}\n                    />\n                </Pagination>\n                </ListGroup.Item>\n            </DropDownTitleContainer>\n        </>\n    )\n}\n\nexport default ManageSkillsScreen\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n//import Image from 'react-bootstrap/Image';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\n//import { uploadConsultantWk, updateConsultantWk } from '../actions/consultantActions';\nimport Form from 'react-bootstrap/Form';\nimport { pxxUploadFiles, updatePxxFiles } from '../actions/pxxActions';\n\nconst FlowImportPxx = (props) => {\n\n    const dispatch = useDispatch();\n\n    const [step, setStep] = useState(0);\n\n    const pxxUploadFile = useSelector(state => state.pxxUploadFile);\n    const { loading:loadingUpload, error:errorUpload, path } = pxxUploadFile;\n\n    const updatePxx = useSelector(state => state.updatePxx);\n    const { loading: loadingUpdate, error: errorUpdate, message } = updatePxx;\n\n    const onChangeHandler = (e) => {\n        //const data = new FormData();\n        const files = [];\n        for (let incr = 0; incr < e.target.files.length; incr++) {\n            const file = e.target.files[incr];\n            if(file.name.match(/^p[A-Za-z]+-[0-9]{2}.xlsb|^p[A-Za-z]+-arrivees.xlsb/)) {\n                const data = new FormData();\n                data.append('file', file);\n                files.push(data);\n            }\n        }\n        dispatch(pxxUploadFiles(files));\n    }\n\n    const startImportData = () => {\n        if(path) {\n            //dispatch(updatePxxFiles(path));\n            dispatch(updatePxxFiles(path));\n        }\n    }\n\n    return (\n        <Modal\n            {...props}\n            size=\"lg\"\n            aria-labelledby=\"contained-modal-title-vcenter\"\n            centered\n            //style={{'minHeight': '80vh'}}\n        >\n            <Modal.Header closeButton>\n                <Row className='align-items-center'>\n                    <Col className='text-center'>\n                        <Modal.Title id=\"contained-modal-title-vcenter\">\n                            Import Pxx from Pxx directory\n                        </Modal.Title>\n                    </Col>\n                </Row>\n            </Modal.Header>\n            \n            <Modal.Body>\n                <Row className='mb-3'>\n                    <Col><Button className={step >= 0 ? 'text-primary' : 'text-secondary'} onClick={() => setStep(0)} variant='ligth' disabled={step <0}><strong>1-Guidelines</strong></Button></Col>\n                    <Col><Button className={step >= 1 ? 'text-primary' : 'text-secondary'} onClick={() => setStep(1)} variant='ligth' disabled={step <1}><strong>2-Upload in App</strong></Button></Col>\n                    <Col><Button className={step >= 2 ? 'text-primary' : 'text-secondary'} onClick={() => setStep(2)} variant='ligth' disabled={step <2}><strong>3-Start update</strong></Button></Col>\n                    <Col><Button className={step >= 3 ? 'text-primary' : 'text-secondary'} onClick={() => setStep(3)} variant='ligth' disabled={step <3}><strong>4-Result</strong></Button></Col>\n                </Row>\n                \n                <Row className='align-items-center'>\n                    \n                    <Col>\n                    {step === 0 && (\n                        <Row>\n                            <Col>\n                                <h4>Process to upload pxx and update availabilities</h4>\n                                    <p>In the next steps you will be invit to</p>\n                                    <ul>\n                                            <li>Select your Pxx storage directory</li>\n                                            <li>Wait untill all Pxx files are uploaded</li>\n                                            <li>Start the backend calculation to update availabilities</li>\n                                            <li>Check the results and if asked proceed to corrections</li>\n                                        </ul>  \n                            </Col>\n                        </Row>\n                    )}\n                    {step === 1 && (\n                        <Row className='align-items-center'>\n                            <Col className='text-center'>\n                                <h4>Upload your file here</h4>\n                                {loadingUpload ? <Loader /> : (\n                                    <input \n                                        className='my-3' \n                                        type='file' \n                                        name='file' \n                                        onChange={onChangeHandler} \n                                        webkitdirectory='true'\n                                        directory='true'\n                                        multiple\n                                    />\n                                )}\n                                {errorUpload && <Message variant='danger'>{errorUpload}</Message>}\n                            </Col>\n                        </Row>\n                    )}\n                    {step === 2 && (\n                        path ? (\n                            <Row>\n                                <Col className='text-center'>\n                                    <h4>Do you want to update availabilities ?</h4>\n                                    {loadingUpdate ? <Loader />  : (\n                                        <Button variant='primary' className='m-3' onClick={startImportData}>\n                                            Update\n                                        </Button>\n                                    )}\n                                    <p>Process could take a few minute</p>\n                                    {errorUpdate && <Message variant='danger'>{errorUpdate}</Message>}\n                                </Col>\n                            </Row>\n                        ) : (\n                            <Row><Col>Something wrong retry step 2</Col></Row>\n                        )\n                    )}\n                    {step === 3 && ( \n                        <Form.Control\n                            as='textarea' \n                            rows={10}\n                            value={message && message}\n                            readOnly\n                            //plaintext\n                        />\n                    )}\n                    </Col>\n                </Row>\n                \n                    \n            </Modal.Body>\n            <Modal.Footer>\n                {step === 3 && (\n                    <Button onClick={props.onHide}>Close</Button>\n                )}\n                {step < 3 && (\n                    <Button\n                        variant='success'\n                        onClick={() => (step + 1 <= 3) && setStep(step + 1)}\n                        disabled={step === 3 || (step === 1 && !path) || (step === 2 && !message)}\n                    >Next</Button>\n                )}\n            </Modal.Footer>\n        </Modal>\n    )\n}\n\nexport default FlowImportPxx;\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Table from 'react-bootstrap/Table';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport Pagination from 'react-bootstrap/Pagination';\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport ProgressBar from 'react-bootstrap/ProgressBar';\nimport FormControl from 'react-bootstrap/FormControl';\nimport Loader from '../components/Loader';\nimport Meta from '../components/Meta';\nimport Message from '../components/Message';\nimport DisplayChildren from '../components/DisplayChildren';\nimport ImportExcelFile from '../components/ImportExcelFile';\nimport { getAllPxx, pxxUpdateALine } from '../actions/pxxActions';\nimport ReactExport from \"react-export-excel\";\nimport FlowImportPxx from '../components/FlowImportPxx';\n\nconst ExcelFile = ReactExport.ExcelFile;\nconst ExcelSheet = ReactExport.ExcelFile.ExcelSheet;\nconst ExcelColumn = ReactExport.ExcelFile.ExcelColumn;\n\nconst PxxDetailsScreen = ({ history, match }) => {\n\n    const dispatch = useDispatch();\n\n    const monthId = match.params.id ;\n\n    const [pageSize, setPageSize] = useState(10);\n    const [pageNumber, setPageNumber] = useState(1);\n    const [keyword, setKeyword] = useState('');\n    const [exportExcel, setExportExcel] = useState('');\n\n    const [importData, setImportData] = useState([]);\n\n    const [progress, setProgress] = useState(0);\n    const [massImport, setMassImport] = useState(false);\n    const [errorImportMessage, setErrorImportMessage] = useState([]);\n    const [messsagesImportSuccess, setMessagesImportSuccess] = useState(0);\n    const [messsagesImportError, setMessagesImportError] = useState(0);\n    const [totalToImport, setTotalToImport] = useState(0);\n\n    const [showImportPxx, setShowImportPxx] = useState(false);\n\n    const userLogin = useSelector(state => state.userLogin);\n    const { userInfo } = userLogin;\n\n    const pxxAllList = useSelector(state  => state.pxxAllList);\n    const {loading, pxxs, pages, page, count} = pxxAllList;\n\n    /* const pxxImportMass = useSelector(state  => state.pxxImportMass);\n    const {loading: loadingImportMass, error: errorImportMass, success: successImportData, datas} = pxxImportMass; */\n\n    const pxxImportLine = useSelector(state  => state.pxxImportLine);\n    const {loading: loadingImportLine, error: errorImportLine, success: successImportLine, updatedLine} = pxxImportLine;\n\n    useEffect(() => {\n\n        if (userInfo) {\n            if (!massImport) {\n                dispatch(getAllPxx(userInfo.consultantProfil.practice, monthId, keyword, pageSize, pageNumber));\n            }\n        } else {\n            history.push('/login');\n        }\n\n    }, [dispatch, history, userInfo, monthId, keyword, pageNumber, pageSize, massImport]);\n\n    useEffect(() => {\n        if (pxxs) {\n            const exportExcelData = pxxs.map((pxx) => ({\n                'CONSULTANT': pxx.name.name,\n                'MATRICULE': pxx.name.matricule,\n                'PRACTICE': pxx.name.practice,\n                'CDM_MATRICULE': pxx.name.cdmId && pxx.name.cdmId.matricule,\n                'CDM_NAME': pxx.name.cdmId && pxx.name.cdmId.name,\n                'VALUED': pxx.name.valued ? pxx.name.valued.substring(0,10) : '',\n                'ARRIVAL': pxx.name.arrival ? pxx.name.arrival.substring(0,10) : '',\n                'LEAVING': pxx.name.leaving ? pxx.name.leaving.substring(0,10) : '',\n                'MONTH': pxx.month.name,\n                'PROD': pxx.prodDay,\n                'NOT_PROD': pxx.notProdDay,\n                'HOLIDAYS': pxx.leavingDay,\n                'AVAILABLE': pxx.availableDay\n            }));\n            setExportExcel(exportExcelData);\n        }\n    }, [pxxs, setExportExcel]);\n\n\n\n    // Effect to manage file import\n\n    const handlerImportAllPxx = () => {\n        //dispatch({ type: EMAIL_SEND_DECISION_RESET });\n        //console.log(importData);\n        setProgress(0);\n        setMassImport(true);\n    }\n    \n    const handlerImportData = (lineToImport) => {\n        const newImportData = importData.slice();\n        for (let incr = 0 ; incr < newImportData.length; incr++){\n            if(newImportData[incr].MATRICULE === lineToImport.MATRICULE){\n                newImportData[incr].status = 'loading'\n            }\n        }\n        setImportData(newImportData);\n        dispatch(pxxUpdateALine(lineToImport));\n    }\n\n    useEffect(() => {\n        if(massImport) {\n            if(importData.length > 0 && importData[progress].status !== 'imported') {\n                //sleep(1000);\n                handlerImportData(importData[progress]);\n            } else {\n                if(progress < importData.length - 1){\n                    setProgress(progress+1);\n                }\n            }\n        }\n    // eslint-disable-next-line\n    },[massImport, progress]);\n\n    useEffect(() => {\n        if(successImportLine) {\n            //console.log(progress);\n            //console.log(updatedLine);\n            //const successEmail = email;\n            const newImportData = importData.slice();\n            for (let incr = 0; incr < newImportData.length; incr++) {\n                if (newImportData[incr].MATRICULE === updatedLine.updatedMatricule) {\n                    newImportData[incr].status = 'imported'\n                }\n            }\n            setImportData(newImportData);\n\n            if (massImport){\n                if (progress < importData.length - 1){\n                    setProgress(progress+1);\n                } else {\n                    setMassImport(false);\n                }\n            }\n        }\n    // eslint-disable-next-line\n    }, [successImportLine]);\n\n    useEffect(() => {\n        if(errorImportLine) {\n            //console.log('error', error);\n            //const errorEmail = error;\n            const newImportData = importData.slice();\n            for (let incr = 0; incr < newImportData.length; incr++) {\n                if (newImportData[incr].MATRICULE === errorImportLine.message.matricule) {\n                    newImportData[incr].status = 'error';\n                }\n            }\n            setImportData(newImportData);\n            const newErrorMessage = errorImportMessage.slice();\n            newErrorMessage.push({message: errorImportLine.message.display});\n            //console.log(errorImportLine.message.display);\n            setErrorImportMessage(newErrorMessage);\n\n            if (massImport){\n                if (progress < importData.length - 1){\n                    setProgress(progress+1);\n                } else {\n                    setMassImport(false);\n                    setProgress(0);\n                }\n            }\n        }\n    // eslint-disable-next-line\n    }, [errorImportLine]);\n\n    useEffect(() => {\n        //console.log(importData)\n        setMessagesImportSuccess(importData.filter(x => x.status === 'imported').length);\n        setMessagesImportError(importData.filter(x => x.status === 'error').length);\n        setTotalToImport(importData.length);\n    },[importData, errorImportLine, successImportLine]);\n    \n    return (\n        <>\n            <Meta />\n\n            <FlowImportPxx \n                show={showImportPxx}\n                onHide={() => setShowImportPxx(false)}\n            />\n\n            <Row>\n                <Col className='text-left'>\n                    <Button className='mb-3' onClick={() => history.go(-1)}>Go Back</Button>\n                </Col>\n                <Col className='text-right'>\n                    <DisplayChildren access='updatePxxFromPxx'>\n                        <Button variant='primary' onClick={() => setShowImportPxx(true)}>Update from Pxx folder</Button>\n                    </DisplayChildren>\n                </Col>\n\n            </Row>\n\n\n\n\n            <Row className='align-items-center pt-3'>\n                <Col md={5}>\n                    {`${messsagesImportSuccess} Pxx line imported / ${totalToImport} - ${messsagesImportError} lines with error`}\n                </Col>\n\n                <Col ws={6} md={2} className='text-right'>\n                    {exportExcel && (\n                        <ExcelFile element={<Button variant='primary'><i className=\"fas fa-download\"></i>  Download</Button>}>\n                            <ExcelSheet data={exportExcel} name=\"pxxsheet\">\n                                <ExcelColumn label=\"MATRICULE\" value=\"MATRICULE\" />\n                                <ExcelColumn label=\"(PRACTICE)\" value=\"PRACTICE\" />\n                                {/* <ExcelColumn label=\"VALUED\" value=\"VALUED\" />\n                                <ExcelColumn label=\"ARRIVAL\" value=\"ARRIVAL\" />\n                                <ExcelColumn label=\"LEAVING\" value=\"LEAVING\" /> */}\n                                <ExcelColumn label=\"MONTH\" value=\"MONTH\" />\n                                <ExcelColumn label=\"PROD\" value=\"PROD\" />\n                                <ExcelColumn label=\"NOT_PROD\" value=\"NOT_PROD\" />\n                                <ExcelColumn label=\"HOLIDAYS\" value=\"HOLIDAYS\" />\n                                <ExcelColumn label=\"(AVAILABLE)\" value=\"AVAILABLE\" />\n                                <ExcelColumn label=\"(CDM_MATRICULE)\" value=\"CDM_MATRICULE\" />\n                                <ExcelColumn label=\"(CDM_NAME)\" value=\"CDM_NAME\" />\n                            </ExcelSheet>\n                        </ExcelFile>\n                    )}\n                </Col>\n\n                <Col md={3} >\n                    <DisplayChildren access='uploadPxx'>\n                        {loadingImportLine ? (\n                            <Loader />\n                        ) : (\n                                <ImportExcelFile setImportData={setImportData} sheets='1' />\n                            )}\n                    </DisplayChildren>\n                </Col>\n\n                \n                <Col md={2} className='text-right'>\n                    <Button\n                        variant='primary'\n                        //className='text-primary'\n                        onClick={() => handlerImportAllPxx()}\n                        disabled={!importData.length > 0}\n                    ><i className=\"fas fa-upload\"></i> {massImport ? <Loader /> : 'Import All Pxx'}</Button>\n                </Col>\n            </Row>\n            <Row className='pt-3'>\n                <Col>\n                    <ProgressBar>\n                        <ProgressBar animated={massImport} now={100* messsagesImportSuccess / totalToImport} variant='primary' />\n                        <ProgressBar animated={massImport} now={100* messsagesImportError / totalToImport} variant='danger' />\n                    </ProgressBar>\n                </Col>\n            </Row>\n\n            <Row>\n                <Col>\n                    {errorImportMessage && errorImportMessage.map((x, incr) => (\n                        <Message key={incr} variant='warning'>{x.message}</Message>\n                    ))}\n                </Col>\n            </Row>\n\n            <Row className='mt-3'>\n                <Col xs={6} md={4}>\n                    <InputGroup>\n                        <FormControl\n                            type='text'\n                            className=\"mb-3\"\n                            placeholder='Search name'\n                            value={keyword && keyword}\n                            onChange={(e) => setKeyword(e.target.value)}\n                        ></FormControl>\n                    </InputGroup>\n                </Col>\n\n                <Col xs={6} md={4}>\n                    <Form.Control\n                        plaintext\n                        readOnly\n                        value={count ? `${count} consultants found` : '0 consultant found'} />\n                </Col>     \n\n                <Col xs={6} md={4}>\n                    <InputGroup>\n                        <FormControl\n                            as='select'\n                            id='number-c'\n                            className=\"mb-3\"\n                            value={pageSize && pageSize}\n                            onChange={(e) => setPageSize(e.target.value)}\n                        >\n                            {['All', 5, 10, 15, 20, 50].map(x => (\n                                <option\n                                    key={x}\n                                    value={(x === 'All' ? 10000 : x)}\n                                >{(x === 'All' ? 'All (export)' : `${x} / page`)}</option>\n                            ))}\n                        </FormControl>\n                    </InputGroup>\n                </Col>\n\n            </Row>\n\n            {loading && <Loader />}\n\n            <Table responsive hover striped>\n                <thead>\n                    <tr className='table-primary'>\n                        <th className='align-middle text-light'>User name</th>\n                        <th className='align-middle text-light'>Matricule</th>\n                        <th className='align-middle text-light text-center'>Practice</th>\n                        <th className='align-middle text-light text-center'>CDM</th>\n                        <th className='align-middle text-light text-center'>Month</th>\n                        <th className='align-middle text-light text-center'>Arrival</th>\n                        <th className='align-middle text-light text-center'>Leaving</th>\n                        <th className='align-middle text-light text-center'>PROD</th>\n                        <th className='align-middle text-light text-center'>NOT PROD</th>\n                        <th className='align-middle text-light text-center'>HOLIDAYS</th>\n                        <th className='align-middle text-light text-center'>AVAILABLE</th>\n                    </tr>\n                </thead>\n\n                <tbody>\n                    {pxxs && pxxs.map((pxx) => (\n                        <tr key={pxx._id}>\n                            <td className='align-middle'><b>{pxx.name.name && pxx.name.name}</b></td>\n                            <td className='align-middle'><b>{pxx.name.matricule && pxx.name.matricule}</b></td>\n                            <td className='align-middle'>{pxx.name.practice && pxx.name.practice}</td>\n                            <td className='align-middle'><b>{pxx.name.cdmId && pxx.name.cdmId.name}</b></td>\n                            <td className='align-middle text-center'>{pxx.month.name && pxx.month.name}</td>\n                            <td className='align-middle text-center'>{pxx.name.arrival && pxx.name.arrival.toString().substring(0,10)}</td>\n                            <td className='align-middle text-center'>{pxx.name.leaving ? pxx.name.leaving.toString().substring(0,10) : '-'}</td>\n                            <td className='align-middle text-center'>{pxx.prodDay && pxx.prodDay}</td>\n                            <td className='align-middle text-center'>{pxx.notProdDay && pxx.notProdDay}</td>\n                            <td className='align-middle text-center'>{pxx.leavingDay && pxx.leavingDay}</td>\n                            <td className='align-middle text-center'>{pxx.availableDay && pxx.availableDay}</td>\n                            \n                        </tr>\n                    ))} \n                </tbody>\n            </Table>\n\n            <Pagination>\n                <Pagination.Prev\n                    onClick={() => setPageNumber(page - 1)}\n                    disabled={page === 1}\n                />\n                {[...Array(pages).keys()].map(x => (\n                    [0, 1, pages - 2, pages - 1].includes(x) ? (\n                        <Pagination.Item\n                            key={x + 1}\n                            active={x + 1 === page}\n                            onClick={() => {\n                                dispatch(getAllPxx(userInfo.consultantProfil.practice, monthId, keyword, pageSize, x + 1));\n                                setPageNumber(x + 1);\n                            }}\n                        >{x + 1}</Pagination.Item>\n                    ) : (pages > 4 && x === 2) && (\n                        <Pagination.Ellipsis key={x + 1} />\n                    )\n\n                ))}\n                <Pagination.Next\n                    onClick={() => setPageNumber(page + 1)}\n                    disabled={page === pages}\n                />\n            </Pagination>\n\n        </>\n    )\n}\n\nexport default PxxDetailsScreen;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport Table from 'react-bootstrap/Table'\nimport Button from 'react-bootstrap/Button';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Tooltip from 'react-bootstrap/Tooltip';\nimport Form from 'react-bootstrap/Form'\nimport { deleteDeal } from '../actions/dealActions';\nimport { DEAL_STATUS, REQUEST_STATUS } from '../constants/dealConstants';\n\nconst DealList = ({ history, data = [], filter }) => {\n\n    const dispatch = useDispatch();\n\n    const onClickDeleteHandler = (deal) => {\n        if (window.confirm(`Are you sure to delete deal: ${deal.title} ?`)) {\n            dispatch(deleteDeal(deal._id));\n        }\n    }\n    const formatName = (fullName) => {\n        const separateName = fullName.split(' ');\n        if (separateName.length === 1) {\n            return separateName[0];\n        } else {\n            const outName = separateName.map((word, indice1) => {\n                if (indice1 === 0) {\n                    return word[0].toUpperCase() + '.';\n                } else {\n                    return word.toUpperCase();\n                }\n            });\n            return outName.join(' ');\n        }\n    }\n\n    return (\n        <Table responsive hover striped className='mt-3'>\n            <thead>\n                <tr className='table-primary'>\n                    <th className='align-middle text-light'>Title</th>\n                    <th className='align-middle text-light'>Practice</th>\n                    <th className='align-middle text-light'>Contacts</th>\n                    <th className='align-middle text-light'>Company</th>\n                    <th className='align-middle text-light'>Status</th>\n                    <th className='align-middle text-light'>Probability</th>\n                    <th className='align-middle text-light'>Request</th>\n                    <th className='align-middle text-light'>Staff</th>\n                    <th className='align-middle text-light'>Start</th>\n                    <th className='align-middle text-light'></th>\n                    <th className='align-middle text-light'></th>\n                </tr>\n                <tr className='table-ligth'>\n                    <th className='align-middle text-Dark'>\n                        <Form.Group controlId='filter-title' className='mb-0'>\n                            <Form.Control\n                                type='text'\n                                placeholder='Search title'\n                                value={filter.searchTitle && filter.searchTitle}\n                                onChange={(e) => { filter.setSearchTitle(e.target.value) }}\n                            ></Form.Control>\n                        </Form.Group>\n                    </th>\n                    <th className='align-middle text-Dark'>\n                        <Form.Group controlId='filter-practice' className='mb-0'>\n                            <Form.Control\n                                type='text'\n                                placeholder='Search practice'\n                                disabled={true}\n                            ></Form.Control>\n                        </Form.Group>\n                    </th>\n                    <th className='align-middle text-Dark'>\n                        <Form.Group controlId='filter-contact' className='mb-0'>\n                            <Form.Control\n                                type='text'\n                                placeholder='Search contact'\n                                value={filter.searchContact && filter.searchContact}\n                                onChange={(e) => filter.setSearchContact(e.target.value)}\n                            ></Form.Control>\n                        </Form.Group>\n                    </th>\n                    <th className='align-middle text-Dark'>\n                        <Form.Group controlId='filter-company' className='mb-0'>\n                            <Form.Control\n                                type='text'\n                                placeholder='Search company'\n                                value={filter.searchCompany && filter.searchCompany}\n                                onChange={(e) => filter.setSearchCompany(e.target.value)}\n                            ></Form.Control>\n                        </Form.Group>\n                    </th>\n                    <th className='align-middle text-Dark'>\n                        <Form.Group controlId='filter-status' className='mb-0'>\n                            <Form.Control\n                                as='select'\n                                value={filter.searchDealStatus && filter.searchDealStatus}\n                                onChange={(e) => {\n                                    filter.setSearchDealStatus(e.target.value)\n                                    //setUpdate(true)\n                                }}\n                            >\n                                <option value=''>--Select--</option>\n                                {DEAL_STATUS.map(x => (\n                                    <option key={x.name} value={x.name}>{x.name}</option>\n                                ))}\n                            </Form.Control>\n                        </Form.Group>\n                    </th>\n                    <th className='align-middle text-Dark'>\n                        <Form.Group controlId='filter-probability' className='mb-0'>\n                            <Form.Control\n                                type='text'\n                                placeholder='Search probability'\n                                disabled={true}\n                            //value={filter.searchContact && filter.searchContact}\n                            //onChange={(e) => filter.setSearchContact(e.target.value)}\n                            ></Form.Control>\n                        </Form.Group>\n                    </th>\n                    <th className='align-middle text-Dark'>\n                        <Form.Group controlId='filter-request' className='mb-0'>\n                            <Form.Control\n                                as='select'\n                                value={filter.searchRequestStatus && filter.searchRequestStatus}\n                                onChange={(e) => {\n                                    filter.setSearchRequestStatus(e.target.value)\n                                    //setUpdate(true)\n                                }}\n                            >\n                                <option value=''>--Select--</option>\n                                {REQUEST_STATUS.map(x => (\n                                    <option key={x.name} value={x.name}>{x.name}</option>\n                                ))}\n                            </Form.Control>\n                        </Form.Group>\n                    </th>\n                    <th className='align-middle text-Dark'>\n                        <Form.Group controlId='filter-staff' className='mb-0'>\n                            <Form.Control\n                                type='text'\n                                placeholder='Search staff'\n                                value={filter.searchStaff && filter.searchStaff}\n                                onChange={(e) => filter.setSearchStaff(e.target.value)}\n                            ></Form.Control>\n                        </Form.Group>\n                    </th>\n                    <th className='align-middle text-Dark'>\n                        <Form.Group controlId='filter-start' className='mb-0'>\n                            <Form.Control\n                                type='text'\n                                placeholder='Search start'\n                                disabled={true}\n                            ></Form.Control>\n                        </Form.Group>\n                    </th>\n                    <th className='align-middle text-Dark' colSpan={2}>\n                        <Button\n                            variant='ligth'\n                            style={{color: 'grey'}}\n                            onClick={() => {\n                                filter.setSearchTitle('');\n                                filter.setSearchCompany('');\n                                filter.setSearchContact('');\n                                filter.setSearchDealStatus('');\n                                filter.setSearchRequestStatus('');\n                                filter.setSearchStaff('');\n                            }}\n                        ><i className=\"fas fa-minus-circle\"></i>  Reset</Button>\n                    </th>\n                </tr>\n\n            </thead>\n\n            <tbody>\n                {data && data.deals.map((deal) => (\n                    <tr key={deal._id}>\n                        <OverlayTrigger\n                            placement=\"bottom\"\n                            overlay={<Tooltip id=\"button-tooltip-2\">{\n                                deal.description\n                            }</Tooltip>}\n                        >\n                            <td className='align-middle'>{deal.title}</td>\n                        </OverlayTrigger>\n                        <td className='align-middle text-center'>{deal.mainPractice} {deal.othersPractices && deal.othersPractices.length ? (`(${deal.othersPractices.join(', ')})`) : ''}</td>\n                        <td className='align-middle text-center'>{deal.contacts.primary ? formatName(deal.contacts.primary.name) : '-'} {deal.contacts && deal.contacts.secondary && deal.contacts.secondary.length ? ('/ (' + deal.contacts.secondary.map(x => formatName(x.name.toString())).join(', ') + ')') : ''}</td>\n                        <td className='align-middle text-center'>{deal.company}</td>\n                        <td className='align-middle text-center'>{deal.status}</td>\n                        <td className='align-middle text-center'>{deal.probability} %</td>\n                        <OverlayTrigger\n                            placement=\"bottom\"\n                            overlay={<Tooltip id=\"button-tooltip-2\">{\n                                deal.staffingRequest.instructions\n                            }</Tooltip>}\n                        >\n                            <td className='align-middle text-center'>{deal.staffingRequest.requestStatus}</td>\n                        </OverlayTrigger>\n\n                        <OverlayTrigger\n                            placement=\"bottom\"\n                            overlay={<Tooltip id=\"button-tooltip-2\">{\n                                deal.staffingDecision.staff.length > 0 ? (\n                                    deal.staffingDecision.staff.map(x => ({ name: formatName(x.idConsultant.name), responsability: x.responsability, priority: x.priority })).map((x, index) => <div className='text-left' key={index}>{`${x.responsability}: ${x.name} (${x.priority})`}</div>)\n                                ) : ('-')}</Tooltip>\n                            }\n                        >\n                            <td className='align-middle'>{deal.staffingDecision.staff.length > 0 ? 'See' : '-'}</td>\n                        </OverlayTrigger>\n\n                        <td className='align-middle text-center'>{deal.startDate.substring(0, 10)}</td>\n                        <td className='align-middle text-center'>\n                            <Button\n                                variant='ligth'\n                                style={{color:'gray'}}\n                                onClick={() => history.push(`/staffing/${deal._id}`)}\n                                size='md'\n                            ><i className=\"fas fa-edit\"></i>\n                            </Button>\n                        </td>\n                        <td className='align-middle'>\n                            <Button\n                                variant='ligth'\n                                style={{color: 'red'}}\n                                onClick={() => onClickDeleteHandler(deal)}\n                                size='md'\n                            ><i className=\"fas fa-times\"></i>\n                            </Button>\n                        </td>\n                    </tr>\n                ))}\n            </tbody>\n        </Table>\n    )\n}\n\nexport default DealList;","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Button from 'react-bootstrap/Button';\nimport Loader from '../components/Loader';\nimport Message from '../components/Message';\nimport Meta from '../components/Meta';\nimport DealList from '../components/DealList';\nimport DisplayChildren from '../components/DisplayChildren';\nimport DropDownTitleContainer from '../components/DropDownTitleContainer';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport { dealsImportInMass, getAllDeals } from '../actions/dealActions';\nimport { FormControl, InputGroup } from 'react-bootstrap';\nimport { DEAL_STATUS, REQUEST_STATUS } from '../constants/dealConstants';\nimport ImportExcelFile from '../components/ImportExcelFile';\nimport ReactExport from \"react-export-excel\";\n\nconst ExcelFile = ReactExport.ExcelFile;\nconst ExcelSheet = ReactExport.ExcelFile.ExcelSheet;\nconst ExcelColumn = ReactExport.ExcelFile.ExcelColumn;\n\nconst ManageDealsScreen = ({ history }) => {\n\n    const dispatch = useDispatch();\n\n    // pagination configuration\n    const [pageSize] = useState('');\n    const [pageNumber] = useState('');\n\n    // search configuration\n    const [searchTitle, setSearchTitle] = useState(localStorage.getItem('ManageDealsScreen.filter') && JSON.parse(localStorage.getItem('ManageDealsScreen.filter')).title ? JSON.parse(localStorage.getItem('ManageDealsScreen.filter')).title : '');\n    const [searchCompany, setSearchCompany] = useState(localStorage.getItem('ManageDealsScreen.filter') && JSON.parse(localStorage.getItem('ManageDealsScreen.filter')).company ? JSON.parse(localStorage.getItem('ManageDealsScreen.filter')).company : '');\n    const [searchContact, setSearchContact] = useState(localStorage.getItem('ManageDealsScreen.filter') && JSON.parse(localStorage.getItem('ManageDealsScreen.filter')).contact ? JSON.parse(localStorage.getItem('ManageDealsScreen.filter')).contact : '');\n    const [searchDealStatus, setSearchDealStatus] = useState(localStorage.getItem('ManageDealsScreen.filter') && JSON.parse(localStorage.getItem('ManageDealsScreen.filter')).dealStatus ? JSON.parse(localStorage.getItem('ManageDealsScreen.filter')).dealStatus : '');\n    const [searchRequestStatus, setSearchRequestStatus] = useState(localStorage.getItem('ManageDealsScreen.filter') && JSON.parse(localStorage.getItem('ManageDealsScreen.filter')).requestStatus ? JSON.parse(localStorage.getItem('ManageDealsScreen.filter')).requestStatus : '');\n    const [searchMyDeals, setSearchMyDeals] = useState(localStorage.getItem('ManageDealsScreen.filter') && JSON.parse(localStorage.getItem('ManageDealsScreen.filter')).myDeals ? JSON.parse(localStorage.getItem('ManageDealsScreen.filter')).myDeals : '');\n    const [searchStaff, setSearchStaff] = useState(localStorage.getItem('ManageDealsScreen.filter') && JSON.parse(localStorage.getItem('ManageDealsScreen.filter')).searchStaff ? JSON.parse(localStorage.getItem('ManageDealsScreen.filter')).searchStaff : '');\n\n    const [updateFilter, setUpdateFilter] = useState(7);\n    const [notUpdateFilter, setNotUpdateFilter] = useState(30);\n    const [newDealFilter, setNewDealFilter] = useState(7);\n    const [wonDealFilter, setWonDealFilter] = useState(7);\n\n    const [changePeriod, setChangePeriod] = useState(false);\n\n    const [tabsFilter] = useState(['Waiting staffing', `Updated (${updateFilter}d)`, `Not updated (${notUpdateFilter}d)`, `New deal (${newDealFilter}d)`, `Won (${wonDealFilter}d)`, 'All']);\n\n    const [defaultTabs, setDefaultTabs] = useState(localStorage.getItem('ManageDealsScreen.defaultTab') ? localStorage.getItem('ManageDealsScreen.defaultTab') : tabsFilter[0])\n\n    const [dataFiltered, setDataFiltered] = useState([]);\n\n    const [update, setUpdate] = useState(true);\n\n    const [exportExcel, setExportExcel] = useState('');\n    const [importData, setImportData] = useState([]);\n\n    const userLogin = useSelector(state => state.userLogin);\n    const { userInfo } = userLogin;\n\n    const dealAllList = useSelector(state => state.dealAllList);\n    const { error, loading, deals } = dealAllList;\n\n    const dealDelete = useSelector(state => state.dealDelete);\n    const { error: errorDelete, success: successDelete } = dealDelete;\n\n    const dealsImportMass = useSelector(state  => state.dealsImportMass);\n    const {loading: loadingImportMass, error: errorImportMass, success: successImportData, datas} = dealsImportMass;\n\n    useEffect(() => {\n\n        if (userInfo) {\n            const keyword = {\n                title: searchTitle,\n                contact: searchContact,\n                company: searchCompany,\n                status: searchDealStatus,\n                request: searchRequestStatus,\n                staff: searchStaff,\n                filterMy: searchMyDeals\n            }\n\n            dispatch(getAllDeals(keyword, pageNumber, pageSize, 'active'));\n            localStorage.setItem('ManageDealsScreen.filter', JSON.stringify({\n                title: searchTitle,\n                company: searchCompany,\n                contact: searchContact,\n                dealStatus: searchDealStatus,\n                requestStatus: searchRequestStatus,\n                searchStaff: searchStaff,\n                myDeals: searchMyDeals,\n            }));\n            setUpdate(false);\n\n        } else {\n            history.push('/login');\n        }\n\n    }, [\n        dispatch, \n        history, \n        userInfo, \n        searchTitle, \n        searchCompany, \n        searchContact, \n        searchDealStatus, \n        searchRequestStatus,\n        searchStaff,\n        pageNumber, \n        pageSize,\n        update,\n        searchMyDeals,\n        successImportData\n    ]);\n\n    useEffect(() => {\n\n        if (deals) {\n\n            const updateTime = new Date(Date.now());\n            updateTime.setUTCDate(updateTime.getUTCDate() - updateFilter);\n\n            const notUpdateTime = new Date(Date.now());\n            notUpdateTime.setUTCDate(notUpdateTime.getUTCDate() - notUpdateFilter);\n\n            const newDealTime = new Date(Date.now());\n            newDealTime.setUTCDate(newDealTime.getUTCDate() - newDealFilter);\n\n            const wonDealTime = new Date(Date.now());\n            wonDealTime.setUTCDate(wonDealTime.getUTCDate() - wonDealFilter);\n\n\n            const filteredData = [];\n\n            for (let incr = 0; incr < tabsFilter.length; incr++) {\n                let dealsFiltered = [];\n\n                switch (tabsFilter[incr]) {\n                    case tabsFilter[0]: // Deals waiting a staff\n                        const needStaff = REQUEST_STATUS.filter(x => x.staff === true);\n                        const toDisplay = DEAL_STATUS.filter(x => x.display === 'onTrack' || x.display === 'win');\n                        //console.log('toDisplay', toDisplay)\n                        dealsFiltered = {\n                            deals: deals.filter(deal => (needStaff.map(x => x.name).includes(deal.staffingRequest.requestStatus) && toDisplay.map(x => x.name).includes(deal.status))),\n                            param: null,\n                            setParam: null\n                        };\n                        break;\n                    case tabsFilter[1]: // Update\n                        dealsFiltered = {\n                            deals: deals.filter(deal => new Date(deal.updatedAt) >= updateTime),\n                            param: updateFilter,\n                            setParam: setUpdateFilter\n                        }\n                        break;\n                    case tabsFilter[2]: // Not Update\n                        dealsFiltered = {\n                            deals: deals.filter(deal => new Date(deal.updatedAt) <= notUpdateTime),\n                            param: notUpdateFilter,\n                            setParam: setNotUpdateFilter\n                        }\n                        break;\n                    case tabsFilter[3]: // newDeal\n                        dealsFiltered = {\n                            deals: deals.filter(deal => new Date(deal.createdAt) >= newDealTime),\n                            param: newDealFilter,\n                            setParam: setNewDealFilter\n                        }\n                        break;\n                    case tabsFilter[4]: // Won\n                        dealsFiltered = {\n                            deals: deals.filter(deal => new Date(deal.wonDate) >= wonDealTime),\n                            param: wonDealFilter,\n                            setParam: setWonDealFilter\n                        }\n                        break;\n                    case tabsFilter[5]: // All >>> mettre une redirection\n                        dealsFiltered = {\n                            deals: deals,\n                            param: null,\n                            setParam: null\n                        }\n                        break;\n                    default:\n                        dealsFiltered = [];\n                }\n                filteredData.push({ filter: tabsFilter[incr], data: dealsFiltered, count: dealsFiltered.deals.length });\n            }\n            setDataFiltered(filteredData);\n        }\n    }, [deals, tabsFilter, newDealFilter, notUpdateFilter, updateFilter, wonDealFilter]);\n\n    useEffect(() => {\n        if (deals) {\n            const exportExcelData = deals.map((deal) => ({\n                'TITLE': deal.title,\n                'COMPANY': deal.company,\n                'PRACTICE': deal.mainPractice,\n                'LEADER': deal.contacts && deal.contacts.primary && deal.contacts.primary.name,\n                'CO-LEADER': deal.contacts && deal.contacts.secondary && deal.contacts.secondary.map(x => x.name).join(''),\n                'OTHERS_PRACTICES': deal.othersPractices && deal.othersPractices.join(','),\n                'STATUS': deal.status,\n                'DESCRIPTION': deal.description,\n                'START': deal.startDate.substring(0,10),\n                'DURATION': deal.duration,\n                'REQUEST_STATUS': deal.staffingRequest.requestStatus,\n                'REQUEST_DETAILS': deal.staffingRequest.instructions,\n                'DECISION': deal.staffingDecision.staff && deal.staffingDecision.staff.map(x => `${x.responsability}: ${x.idConsultant.name} (${x.priority})}`).join('\\n'),\n            }));\n            setExportExcel(exportExcelData);\n        }\n    }, [deals, setExportExcel]);\n\n    useEffect(() => {\n        if(importData.length > 0) {\n            //console.log(importData);\n            dispatch(dealsImportInMass(importData));\n        }\n    },[dispatch, importData]);\n\n    useEffect(() => {\n\n        if (successDelete) {\n            const keyword = {\n                title: searchTitle,\n                mainPractice: userInfo.consultantProfil.practice,\n                othersPractices: userInfo.consultantProfil.practice,\n                contact: searchContact,\n                company: searchCompany,\n                status: searchDealStatus,\n                request: searchRequestStatus,\n                staff: searchStaff,\n                filterMy: searchMyDeals\n            }\n            dispatch(getAllDeals(keyword, pageNumber, pageSize));\n        }\n        // eslint-disable-next-line\n    }, [dispatch, successDelete]);\n\n    return (\n        <>\n            <Meta />\n\n            {errorDelete && <Message variant='danger'>{errorDelete}</Message>}\n            {error && <Message variant='danger'>{error}</Message>}\n            {loading && <Loader />}\n\n            <DropDownTitleContainer\n                title='Manage Deals'\n                close={false}>\n                \n                <Row className='mt-3'>\n                    <Col xs={0} md={7}></Col>\n                    <Col xs={6} md={3}>\n                        <DisplayChildren access='uploadDeals'>\n                            {loadingImportMass ? (\n                                <Loader />\n                            ) : (\n                                    <ImportExcelFile setImportData={setImportData} />\n                                )}\n                        </DisplayChildren>\n                    </Col>\n\n                    <Col ws={6} md={2}>\n                        {exportExcel && (\n                            <ExcelFile element={<Button variant='primary'><i className=\"fas fa-download\"></i>  Download</Button>}>\n                                <ExcelSheet data={exportExcel} name=\"dealsSheet\">\n                                    <ExcelColumn label=\"TITLE\" value=\"TITLE\" />\n                                    <ExcelColumn label=\"COMPANY\" value=\"COMPANY\" />\n                                    <ExcelColumn label=\"PRACTICE\" value=\"PRACTICE\" />\n                                    <ExcelColumn label=\"LEADER\" value=\"LEADER\" />\n                                    <ExcelColumn label=\"CO-LEADER\" value=\"CO-LEADER\" />\n                                    <ExcelColumn label=\"OTHERS_PRACTICES\" value=\"OTHERS_PRACTICES\" />\n                                    <ExcelColumn label=\"STATUS\" value=\"STATUS\" />\n                                    <ExcelColumn label=\"DESCRIPTION\" value=\"DESCRIPTION\" />\n                                    <ExcelColumn label=\"START\" value=\"START\" />\n                                    <ExcelColumn label=\"DURATION\" value=\"DURATION\" />\n                                    <ExcelColumn label=\"REQUEST_STATUS\" value=\"REQUEST_STATUS\" />\n                                    <ExcelColumn label=\"REQUEST_DETAILS\" value=\"REQUEST_DETAILS\" />\n                                    <ExcelColumn label=\"DECISION\" value=\"DECISION\" />\n                                </ExcelSheet>\n                            </ExcelFile>\n                        )}\n                    </Col>\n                </Row>\n\n                <ListGroup.Item className='p-0 mt-3'>\n                    <Tabs \n                        id=\"uncontrolled-tab-example\" \n                        variant='pills'\n                        activeKey={defaultTabs}\n                        onSelect={(k) => {\n                            setDefaultTabs(k)\n                            localStorage.setItem('ManageDealsScreen.defaultTab', k)\n                        }}\n                    >\n                        {dataFiltered.length > 0 && dataFiltered.map((data, val) => (\n                            <Tab\n                                key={val}\n                                className='mx-3'\n                                eventKey={`${data.filter}`}\n                                \n                                title={\n                                    <Row className='align-text-middle'>\n                                        <span className='ml-3 align-middle'>{data.filter.split(/[0-9]+/i)[0]}</span>\n                                        {changePeriod ? (\n                                            <span>{data.data.param && (\n                                                <InputGroup>\n                                                    <FormControl\n                                                        as='select'\n                                                        value={data.data.param}\n                                                        onChange={(e) => data.data.setParam(e.target.value)}\n                                                    >\n                                                        {[...new Array(30).keys()].map(x => (\n                                                            <option key={x + 1} value={x + 1}>{x + 1}</option>\n                                                        ))}\n                                                    </FormControl>\n                                                </InputGroup>\n                                            )}\n                                            </span>) : data.data.param}\n                                        <span>{(data.filter.split(/[0-9]+/i)[1] && data.filter.split(/[0-9]+/i)[1])}</span>\n                                        <span className='mr-3'>{' > ' + data.count}</span>\n                                    </Row>\n                                }\n                            >\n                                <Row className='mt-3'>\n                                    <Col className='text-left'>\n                                        <Button\n                                            variant='ligth'\n                                            onClick={() => setChangePeriod(!changePeriod)}\n                                        ><i className=\"fas fa-edit\"></i>  Configure tabs</Button>\n\n                                        <Button\n                                            variant='ligth'\n                                            onClick={() => history.push('/admin/deals/history')}\n                                        ><i className=\"fas fa-history\"></i>  History</Button>\n\n                                        <Button\n                                            variant='ligth'\n                                            onClick={() => {\n                                                setSearchMyDeals(!searchMyDeals)\n                                                setUpdate(true)\n                                            }}\n                                        >{searchMyDeals ? (\n                                            <div><i className=\"fas fa-backspace\"></i>  Get all deals</div>\n                                        ) : (\n                                                <div><i className=\"fas fa-filter\"></i>  Filter my deals</div>\n                                            )}\n                                        </Button>\n\n                                        <Button \n                                            variant='ligth'\n                                            onClick={() => window.confirm('Soon available')}\n                                        ><i className=\"fas fa-project-diagram\"></i>  Business flows\n                                        </Button>\n\n                                        <DisplayChildren access='sendStaffingDecision'>\n                                            <Button\n                                                variant='ligth'\n                                                className='text-black align-right'\n                                                onClick={() => history.push('/admin/send')}\n                                            ><i className=\"fas fa-envelope\"></i>  Send staffing decisions</Button>\n                                        </DisplayChildren>\n                                    </Col>\n                                </Row>\n\n                                <DealList\n                                    history={history}\n                                    data={data.data}\n                                    filter={{\n                                        searchTitle: searchTitle,\n                                        setSearchTitle: setSearchTitle,\n                                        searchCompany: searchCompany, \n                                        setSearchCompany: setSearchCompany,\n                                        searchContact: searchContact,\n                                        setSearchContact: setSearchContact,\n                                        searchDealStatus: searchDealStatus,\n                                        setSearchDealStatus: setSearchDealStatus,\n                                        searchRequestStatus: searchRequestStatus,\n                                        setSearchRequestStatus: setSearchRequestStatus,\n                                        searchStaff: searchStaff,\n                                        setSearchStaff: setSearchStaff\n                                    }}\n                                />\n                            </Tab>\n                        ))}\n                    </Tabs>\n                </ListGroup.Item>\n            </DropDownTitleContainer>\n        </>\n    )\n}\n\nexport default ManageDealsScreen\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Button from 'react-bootstrap/Button';\nimport Loader from '../components/Loader';\nimport Message from '../components/Message';\nimport DropDownTitleContainer from '../components/DropDownTitleContainer';\nimport DealList from '../components/DealList';\nimport Meta from '../components/Meta';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport { getAllDeals } from '../actions/dealActions';\nimport ReactExport from \"react-export-excel\";\nconst ExcelFile = ReactExport.ExcelFile;\nconst ExcelSheet = ReactExport.ExcelFile.ExcelSheet;\nconst ExcelColumn = ReactExport.ExcelFile.ExcelColumn;\n\n\nconst DealsHistoryScreen = ({history}) => {\n\n    const dispatch = useDispatch();\n\n    // pagination configuration\n    const [pageSize] = useState('');\n    const [pageNumber] = useState('');\n\n    // search configuration\n    const [searchTitle, setSearchTitle] = useState(localStorage.getItem('DealsHistoryScreen.filter') && JSON.parse(localStorage.getItem('DealsHistoryScreen.filter')).title ? JSON.parse(localStorage.getItem('DealsHistoryScreen.filter')).title : '' );\n    const [searchCompany, setSearchCompany] = useState(localStorage.getItem('DealsHistoryScreen.filter') && JSON.parse(localStorage.getItem('DealsHistoryScreen.filter')).company ? JSON.parse(localStorage.getItem('DealsHistoryScreen.filter')).company : '');\n    const [searchContact, setSearchContact] = useState(localStorage.getItem('DealsHistoryScreen.filter') && JSON.parse(localStorage.getItem('DealsHistoryScreen.filter')).contact ? JSON.parse(localStorage.getItem('DealsHistoryScreen.filter')).contact : '');\n    const [searchDealStatus, setSearchDealStatus] = useState(localStorage.getItem('DealsHistoryScreen.filter') && JSON.parse(localStorage.getItem('DealsHistoryScreen.filter')).dealStatus ? JSON.parse(localStorage.getItem('DealsHistoryScreen.filter')).dealStatus : '');\n    const [searchRequestStatus, setSearchRequestStatus] = useState(localStorage.getItem('DealsHistoryScreen.filter') && JSON.parse(localStorage.getItem('DealsHistoryScreen.filter')).requestStatus ? JSON.parse(localStorage.getItem('DealsHistoryScreen.filter')).requestStatus : '');\n    const [searchStaff, setSearchStaff] = useState(localStorage.getItem('DealsHistoryScreen.filter') && JSON.parse(localStorage.getItem('DealsHistoryScreen.filter')).searchStaff ? JSON.parse(localStorage.getItem('DealsHistoryScreen.filter')).searchStaff : '');\n    //const [searchMyDeals, setSearchMyDeals] = useState(localStorage.getItem('DealsHistoryScreen.filter') ? JSON.parse(localStorage.getItem('DealsHistoryScreen.filter')).myDeals : '');\n\n    const [tabsFilter] = useState([...new Array(5).keys()].map(x => new Date(Date.now()).getFullYear() - x));\n\n    const [defaultTabs, setDefaultTabs] = useState(localStorage.getItem('DealsHistoryScreen.defaultTab') ? localStorage.getItem('DealsHistoryScreen.defaultTab') : tabsFilter[0])\n\n    const [dataFiltered, setDataFiltered] = useState([]);\n\n    const [update, setUpdate] = useState(true);\n\n    const userLogin = useSelector(state => state.userLogin);\n    const { userInfo } = userLogin;\n\n    const dealAllList = useSelector(state => state.dealAllList);\n    const { error, loading, deals } = dealAllList;\n\n    const dealDelete = useSelector(state => state.dealDelete);\n    const { error: errorDelete, success: successDelete } = dealDelete;\n\n    useEffect(() => {\n        if (userInfo) {\n            const keyword = {\n                title: searchTitle,\n                mainPractice: userInfo.consultantProfil.practice,\n                othersPractices: userInfo.consultantProfil.practice,\n                contact: searchContact,\n                company: searchCompany,\n                status: searchDealStatus,\n                request: searchRequestStatus,\n                staff: searchStaff,\n                filterMy: false\n            }\n\n            dispatch(getAllDeals(keyword, pageNumber, pageSize, 'all'));\n            localStorage.setItem('DealsHistoryScreen.filter', JSON.stringify({\n                title: searchTitle,\n                company: searchCompany,\n                contact: searchContact,\n                dealStatus: searchDealStatus,\n                requestStatus: searchRequestStatus,\n                searchStaff: searchStaff,\n                //myDeals: searchMyDeals,\n            }));\n            setUpdate(false);\n\n        } else {\n            history.push('/login');\n        }\n\n    }, [\n        dispatch, \n        history, \n        userInfo, \n        searchTitle, \n        searchCompany, \n        searchContact, \n        searchDealStatus, \n        searchRequestStatus, \n        searchStaff,\n        //searchMyDeals,\n        pageNumber, \n        pageSize,\n        update\n    ]);\n\n    useEffect(() => {\n        if (deals) {\n\n            const filteredData = [];\n\n            for (let incr = 0; incr < tabsFilter.length; incr++) {\n                let dealsFiltered = deals.filter( deal => deal.updatedAt.substring(0,4) === tabsFilter[incr].toString());\n                dealsFiltered = {\n                    deals: dealsFiltered,\n                    param: null,\n                    setParam: null,\n                    exportExcel: dealsFiltered.map((deal) => ({\n                        'TITLE': deal.title,\n                        'MAIN_PRACTICE': deal.mainPractice,\n                        'OTHERS_PRACTICES': deal.othersPractices.join(', '),\n                        'LEADER': deal.contacts.primary ? (deal.contacts.primary.name + ' (' + deal.contacts.primary.matricule + ')') : '',\n                        'CO-LEADERS': deal.contacts.secondary ? deal.contacts.secondary.map(x => x.name + ' (' + x.matricule + ')').join(', ')  : '',\n                        'COMPANY': deal.company,\n                        'STATUS': deal.status,\n                        'TYPE': deal.type,\n                        'DESCRIPTION': deal.description,\n                        'PROPOSAL DATE': deal.proposalDate ? deal.proposalDate.substring(0,10) : '',\n                        'PRESENTATION DATE': deal.presentationDate ? deal.presentationDate.substring(0,10) : '',\n                        'START DATE': deal.startDate ? deal.startDate.substring(0,10) : '',\n                        'WON DATE': deal.wonDate ? deal.wonDate.substring(0,10) : '',\n                        'STAFF': deal.staffingDecision.staff ? deal.staffingDecision.staff.map(x => x.responsability + ': ' + x.idConsultant.name + ' (' + x.idConsultant.matricule + ')').join(', ') : '',\n                    }))\n                \n\n                }\n                filteredData.push({ filter: tabsFilter[incr], data: dealsFiltered, count: dealsFiltered.deals.length });\n            }\n            setDataFiltered(filteredData);\n        }\n    }, [deals, tabsFilter]);\n\n    useEffect(() => {\n\n        if (successDelete) {\n            const keyword = {\n                title: searchTitle,\n                mainPractice: userInfo.consultantProfil.practice,\n                othersPractices: userInfo.consultantProfil.practice,\n                contact: searchContact,\n                company: searchCompany,\n                status: searchDealStatus,\n                request: searchRequestStatus,\n                staff: searchStaff,\n                filterMy:false\n            }\n            dispatch(getAllDeals(keyword, pageNumber, pageSize));\n        }\n        // eslint-disable-next-line\n    }, [dispatch, successDelete])\n\n    return (\n        <>\n            <Meta />\n\n            {errorDelete && <Message variant='danger'>{errorDelete}</Message>}\n            {error && <Message variant='danger'>{error}</Message>}\n            {loading && <Loader />}\n\n            <DropDownTitleContainer\n                title='Manage Deals'\n                close={false}>\n                <ListGroup.Item className='p-0 mt-3'>\n                    <Tabs \n                        //defaultActiveKey={tabsFilter[0]} \n                        id=\"uncontrolled-tab-example\" \n                        variant='pills'\n                        activeKey={defaultTabs}\n                        onSelect={(k) => {\n                            setDefaultTabs(k)\n                            localStorage.setItem('DealsHistoryScreen.defaultTab', k)\n                        }}\n                    >\n                        {dataFiltered.length > 0 && dataFiltered.map((data, val) => (\n                            <Tab\n                                key={val}\n                                className='mx-3'\n                                eventKey={`${data.filter}`}\n                                title={data.filter + ' (' + data.data.deals.length + ')'}\n                            >\n                                {data.data.deals && (\n                                    <ExcelFile element={<Button variant='ligth' className='mt-3'><i className=\"fas fa-download\"></i>  Download</Button>}>\n                                        <ExcelSheet data={data.data.exportExcel} name=\"dealsSheet\">\n                                            <ExcelColumn label=\"TITLE\" value=\"TITLE\" />\n                                            <ExcelColumn label=\"MAIN_PRACTICE\" value=\"MAIN_PRACTICE\" />\n                                            <ExcelColumn label=\"OTHERS_PRACTICES\" value=\"OTHERS_PRACTICES\" />\n                                            <ExcelColumn label=\"LEADER\" value=\"LEADER\" />\n                                            <ExcelColumn label=\"CO-LEADERS\" value=\"CO-LEADERS\" />\n                                            <ExcelColumn label=\"COMPANY\" value=\"COMPANY\" />\n                                            <ExcelColumn label=\"STATUS\" value=\"STATUS\" />\n                                            <ExcelColumn label=\"TYPE\" value=\"TYPE\" />\n                                            <ExcelColumn label=\"DESCRIPTION\" value=\"DESCRIPTION\" />\n                                            <ExcelColumn label=\"PROPOSAL DATE\" value=\"PROPOSAL DATE\" />\n                                            <ExcelColumn label=\"PRESENTATION DATE\" value=\"PRESENTATION DATE\" />\n                                            <ExcelColumn label=\"START DATE\" value=\"START DATE\" />\n                                            <ExcelColumn label=\"WON DATE\" value=\"WON DATE\" />\n                                            <ExcelColumn label=\"STAFF\" value=\"STAFF\" />\n                                        </ExcelSheet>\n                                    </ExcelFile>\n                                )}\n\n                                <DealList\n                                    history={history}\n                                    data={data.data}\n                                    filter={{\n                                        searchTitle: searchTitle,\n                                        setSearchTitle: setSearchTitle,\n                                        searchCompany: searchCompany,\n                                        setSearchCompany: setSearchCompany,\n                                        searchContact: searchContact,\n                                        setSearchContact: setSearchContact,\n                                        searchDealStatus: searchDealStatus,\n                                        setSearchDealStatus: setSearchDealStatus,\n                                        searchRequestStatus: searchRequestStatus,\n                                        setSearchRequestStatus: setSearchRequestStatus,\n                                        searchStaff: searchStaff,\n                                        setSearchStaff: setSearchStaff\n                                    }}\n                                />\n                            </Tab>\n                        ))}\n                    </Tabs>\n                </ListGroup.Item>\n            </DropDownTitleContainer>\n        </>\n    )\n}\n\nexport default DealsHistoryScreen\n","import React, { useState, useEffect } from 'react';\nimport { Form, ListGroup, Col, Row, Tabs, Tab, Button } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ACCESS_DATAS, ACCESS_MODES } from '../constants/accessConstants';\nimport DisplayChildren from '../components/DisplayChildren';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\nimport { getAllAccess, updateprofilFrontAcessRule } from '../actions/accessActions';\n\nconst AccessEditScreen = ({ history }) => {\n\n    const dispatch = useDispatch();\n\n    const userLogin = useSelector(state => state.userLogin);\n    const { userInfo } = userLogin;\n\n    const accessList = useSelector(state => state.accessList);\n    const { loading, error, access } = accessList;\n\n    const accessFrontUpdate = useSelector(state => state.accessFrontUpdate);\n    const { error: errorFrontUpdate } = accessFrontUpdate;\n\n    useEffect(() => {\n        if (!userInfo) {\n            history.push('/login');\n        }\n    }, [history, userInfo]);\n\n    useEffect(() => {\n        if (!access) {\n            dispatch(getAllAccess());\n        }\n    }, [dispatch, access]);\n    \n\n    return (\n        <DisplayChildren access='manageProfils'>\n            {loading && <Loader />}\n            {error && <Message variant='danger'>{error}</Message>}\n            {errorFrontUpdate && <Message variant='danger'>{errorFrontUpdate}</Message>}\n\n            <h1>Manage user profils screen</h1>\n            <Tabs defaultActiveKey={access && access[0].profil} id=\"uncontrolled-tab-example\">\n                {access && access.map((x, incr) => (\n                    <Tab key={incr} eventKey={x.profil} title={x.profil}>\n                        <ProfilDescription data={x} />\n                    </Tab>\n                ))}\n            </Tabs>\n        </DisplayChildren>\n    )\n}\n\nconst ProfilDescription = ({data}) => {\n\n    const categorizeFrontAccess = (frontAccess) => {\n        \n        const categories = [...new Set(frontAccess.map(x => x.category))];\n\n        const categorizedFrontAccess = [];\n        for (let incr = 0; incr < categories.length; incr++) {\n            const filterdData = frontAccess.filter(x => x.category === categories[incr]);\n            categorizedFrontAccess.push({\n                frontAccessRules: filterdData,\n                category: categories[incr],\n            });\n        }\n        return [categorizedFrontAccess, categories]\n    }\n    \n    const [categorizedFrontAccess, categories] = categorizeFrontAccess(data.frontAccess);\n\n\n    return (\n        <ListGroup>\n            {categorizedFrontAccess && categorizedFrontAccess.map((categoryRules, incr) => (\n                <ListGroup.Item key={incr} className='pt-3'>\n                    <CategoryAccess\n                        accessRules={categoryRules.frontAccessRules}\n                        category={categoryRules.category}\n                        categories={categories}\n                        profilId={data._id}\n                    />\n                </ListGroup.Item>\n            ))}\n        </ListGroup>\n    )\n};\n\nconst CategoryAccess = ({ accessRules, category, categories, profilId }) => {\n\n    const params = {\n        categories: categories,\n        modes: ACCESS_MODES,\n        datas: ACCESS_DATAS\n    }\n\n    return (\n        <>\n            <h4>{category && category}</h4>\n            <ListGroup variant='flush'>\n                <ListGroup.Item>\n                    <Row className='py-1 border-bottom bg-primary'>\n                        <Col className='text-white' xs={3}><strong>TECHNICAL ID</strong></Col>\n                        <Col className='text-white' xs={4}><strong>LABEL</strong></Col>\n                        <Col className='text-white' xs={2}><strong>MODE</strong></Col>\n                        <Col className='text-white' xs={2}><strong>ACCESS</strong></Col>\n                        <Col xs={1}><strong></strong></Col>\n                    </Row>\n                </ListGroup.Item>\n            </ListGroup>\n            {accessRules && accessRules.map((item, incr) => (\n                <ListGroup key={incr} variant='flush' className='border-bottom'>\n                    <ListGroup.Item>\n                        <AccessLineEdit\n                            frontAccessItem={item}\n                            params={params}\n                            profilId={profilId}\n                        />\n                    </ListGroup.Item>\n                </ListGroup>\n            ))}\n        </>\n    )\n}\n\nconst AccessLineEdit = ({ frontAccessItem, params, profilId }) => {\n\n    const dispatch = useDispatch()\n\n    const [id] = useState(frontAccessItem.id);\n    const [label, setLabel] = useState(frontAccessItem.label);\n    const [mode, setMode] = useState(frontAccessItem.mode);\n    const [data, setData] = useState(frontAccessItem.data);\n\n    const [loadingState, setLoadingState] = useState(false);\n\n    const accessFrontUpdate = useSelector(state => state.accessFrontUpdate);\n    const { error, success } = accessFrontUpdate;\n\n    useEffect(() => {\n        if(success) {\n            setLoadingState(false)\n        } \n    },[success]);\n\n    useEffect(() => {\n        if(error) {\n            setLoadingState(false)\n        } \n    },[error]);\n\n    const submitHandler = (e) => {\n        e.preventDefault();\n        setLoadingState(true);\n        const rule = {\n            id: id,\n            label: label,\n            mode: mode,\n            data: data,\n            profilId: profilId\n        }\n        dispatch(updateprofilFrontAcessRule(rule))\n        console.log('update to implement')\n    }\n\n    return (\n        <Form onSubmit={submitHandler}>\n            <Form.Row>\n                <Col xs={3}>\n                    <Form.Control\n                        type='text'\n                        value={id && id}\n                        plaintext\n                        readOnly\n                    ></Form.Control>\n                </Col>\n\n                <Col xs={4}>\n                    <Form.Control\n                        type='text'\n                        value={label && label}\n                        onChange={(e) => setLabel(e.target.value)}\n                    ></Form.Control>\n                </Col>\n\n                <Col xs={2}>\n                    <Form.Control\n                        as='select'\n                        value={mode && mode}\n                        onChange={(e) => setMode(e.target.value)}\n                    >\n                        <option value=''>--Select--</option>\n                        {params.modes.map((x, incr) => (\n                            <option key={incr} value={x}>{x}</option>\n                        ))}\n                    </Form.Control>\n                </Col>\n\n                <Col xs={2}>\n                    <Form.Control\n                        as='select'\n                        value={data && data}\n                        onChange={(e) => setData(e.target.value)}\n                    >\n                        <option value=''>--Select--</option>\n                        {params.datas.map((x, incr) => (\n                            <option key={incr} value={x}>{x}</option>\n                        ))}\n                    </Form.Control>\n                </Col>\n\n                <Col xs={1}>\n                    <Button variant='ligth' className='text-secondary' type='submit'>\n                        {loadingState ? <Loader /> : <i className=\"fas fa-download\"></i>}\n                    </Button>\n                </Col>\n\n            </Form.Row>\n        </Form>\n    )\n}\n\nexport default AccessEditScreen\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Table from 'react-bootstrap/Table'\nimport Button from 'react-bootstrap/Button';\nimport Loader from '../components/Loader';\nimport Message from '../components/Message';\nimport DisplayChildren from '../components/DisplayChildren';\nimport DropDownTitleContainer from '../components/DropDownTitleContainer';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Pagination from 'react-bootstrap/Pagination';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Modal from 'react-bootstrap/Modal';\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nimport { createAClient, deleteAClient, getAllClients, updateAClient } from '../actions/clientActions';\n\nconst ManageCompaniesScreen = ({ history }) => {\n\n    const dispatch = useDispatch();\n\n    // pagination configuration\n\n    const [pageSize, setPageSize] = useState(10);\n    const [pageNumber, setPageNumber] = useState(1);\n    const [keyword, setKeyword] = useState('');\n\n    const [showAddContact, setShowAddContact] = useState({state:false, companyId:'', companyName:\"\"});\n    const [contactName, setContactName] = useState('');\n    const [contactEmail, setContactEmail] = useState('');\n    const [message, setMessage] = useState('');\n\n    const [showModifyName, setShowModifyName] = useState({state:false, companyId:'', companyName:''});\n    const [newCompanyName, setNewCompanyName] = useState('');\n\n    const [showCreateCompany, setShowCreateCompany] = useState({state:false});\n\n    const userLogin = useSelector(state => state.userLogin);\n    const { userInfo } = userLogin;\n\n    const clientAll = useSelector(state => state.clientAll);\n    const { error, loading, clients: companies, count, page, pages } = clientAll;\n\n    const clientUpdate = useSelector(state => state.clientUpdate);\n    const { error: errorUpdate, success:successUpdate } = clientUpdate;\n\n    const clientDelete = useSelector(state => state.clientDelete);\n    const { error: errorDelete, success:successDelete } = clientDelete;\n\n    const clientCreate = useSelector(state => state.clientCreate);\n    const { error: errorCreate, success:successCreate } = clientCreate;\n\n    useEffect(() => {\n\n        if (userInfo) {\n            dispatch(getAllClients(keyword, pageNumber, pageSize));\n        } else {\n            history.push('/login');\n        }\n\n    }, [dispatch, history, userInfo, pageNumber, pageSize, keyword]);\n\n    useEffect(() => {\n        if (successUpdate) {\n            dispatch(getAllClients(keyword, pageNumber, pageSize));\n        }\n        // eslint-disable-next-line\n    }, [dispatch, successUpdate]);\n\n    useEffect(() => {\n        if (successDelete) {\n            dispatch(getAllClients(keyword, pageNumber, pageSize));\n        }\n        // eslint-disable-next-line\n    }, [dispatch, successDelete]);\n\n    useEffect(() => {\n        if (successCreate) {\n            dispatch(getAllClients(keyword, pageNumber, pageSize));\n        }\n        // eslint-disable-next-line\n    }, [dispatch, successCreate]);\n\n\n    const addCompanyHandler = (e, newCompanyName, contactName, contactEmail) => {\n        // Add company function\n        e.preventDefault();\n        dispatch(createAClient([{name:newCompanyName, commercialTeam:[{contactName: contactName, contactEmail: contactEmail}]}]));\n        setShowCreateCompany({state:false});\n        setContactEmail('');\n        setContactName('');\n        setNewCompanyName('');\n\n    }\n\n    const modifyCompanyNameHandler = (e, companyId, newCompanyName) => {\n        e.preventDefault();\n        let clientToUpdate = companies.filter(x => x._id === companyId)[0];\n        clientToUpdate.name = newCompanyName;\n        dispatch(updateAClient(clientToUpdate));\n        setShowModifyName({ state: false, companyId: '', companyName: '' });\n    }\n\n    const onClickDeleteHandler = (company) => {\n        if (window.confirm(`Are you sure to delete company: ${company.name} ?`)) {\n            dispatch(deleteAClient(company._id));\n        }\n    }\n\n    const addContactHandler = (e, contactName, contactEmail, companyId) => {\n        e.preventDefault();\n\n        let contactNameConform = false;\n        let contactEmailConform = false;\n        let message = []\n\n        if (contactName) {\n            contactNameConform = true\n        } else {\n            message.push('Thanks to enter a correct Name')\n        }\n\n        const regexEmail = /^(([^<>()[]\\.,;:s@]+(.[^<>()[]\\.,;:s@]+)*)|(.+))@(([[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}])|(([a-zA-Z-0-9]+.)+[a-zA-Z]{2,}))$/;\n        if (regexEmail.test(contactEmail)) {\n            contactEmailConform = true\n        } else {\n            message.push('Thanks to enter a correct Email address')\n        }\n\n        setMessage(message);\n\n        if (contactEmailConform && contactNameConform) {\n\n            let clientToUpdate = companies.filter(x => x._id === companyId)[0];\n            clientToUpdate.commercialTeam = clientToUpdate.commercialTeam.map(x => ({contactName: x.contactName, contactEmail:x.contactEmail}));\n            clientToUpdate.commercialTeam.push({contactName:contactName, contactEmail:contactEmail});\n\n            dispatch(updateAClient(clientToUpdate));\n\n            setShowAddContact({state:false, companyId:'', companyName:''});\n            setMessage('');\n        }\n    }\n\n    const deleteContactHandler = (contactEmail, companyId) => {\n        if (window.confirm(`Are you sure to delete contact: ${contactEmail} ?`)) {\n            let clientToUpdate = companies.filter(x => (x._id === companyId))[0];\n            clientToUpdate.commercialTeam = clientToUpdate.commercialTeam.map(x => ({contactName: x.contactName, contactEmail:x.contactEmail}));\n            const newContacts = clientToUpdate.commercialTeam.filter(x => x.contactEmail !== contactEmail);\n            clientToUpdate.commercialTeam = newContacts;\n\n            dispatch(updateAClient(clientToUpdate));\n        }\n\n    }\n\n    return (\n        <DisplayChildren access='manageCompanies'>\n            {errorUpdate && <Message variant='danger'>{errorUpdate}</Message>}\n            {errorDelete && <Message variant='danger'>{errorDelete}</Message>}\n            {errorCreate && <Message variant='danger'>{errorCreate}</Message>}\n            <DropDownTitleContainer title='Manage companies' close={false}>\n                <ListGroup.Item>\n                    <Row>\n\n                        <Col xs={6} md={4}>\n                            <Button className=\"mb-3\" onClick={() => setShowCreateCompany({state:true})}>\n                                <i className=\"fas fa-plus mr-2\"></i>Add\n                            </Button>\n                        </Col>\n\n                        <Col xs={6} md={2}>\n                            <InputGroup>\n                                <FormControl\n                                    type='text'\n                                    className=\"mb-3\"\n                                    placeholder='Search company'\n                                    value={keyword && keyword}\n                                    onChange={(e) => setKeyword(e.target.value)}\n                                ></FormControl>\n                            </InputGroup>\n                        </Col>\n\n                        <Col xs={6} md={4}>\n                            <Form.Control\n                                plaintext\n                                readOnly\n                                value={count ? `${count} companies found` : '0 company found'} />\n                        </Col>\n\n                        <Col xs={6} md={2}>\n                            <InputGroup>\n                                <FormControl\n                                    as='select'\n                                    id='number-c'\n                                    className=\"mb-3\"\n                                    value={pageSize && pageSize}\n                                    onChange={(e) => setPageSize(e.target.value)}\n                                >\n                                    {[5, 10, 15, 20, 50].map(x => (\n                                        <option\n                                            key={x}\n                                            value={x}\n                                        >{x} / page</option>\n                                    ))}\n                                </FormControl>\n                            </InputGroup>\n                        </Col>\n\n                    </Row>\n\n                    {companies && companies.length === 0 ? <Message variant='information'>You have not access to these information</Message> :\n                        loading ? <Loader /> : error ? <Message variant=\"danger\">{error}</Message> : (\n\n                            <Table responsive hover striped>\n                                <thead>\n                                    <tr className='table-primary'>\n                                        <th className='align-middle text-light'>Company name</th>\n                                        <th className='align-middle text-light'>Commercial contacts</th>\n                                    </tr>\n                                </thead>\n\n                                <tbody>\n                                    {companies && companies.map((company) => (\n                                        <tr key={company._id}>\n                                            <td className='align-middle'>\n                                                <Row><Col>{company.name}</Col></Row>\n                                                <Row><Col>\n                                                    <Button\n                                                        variant='ligth'\n                                                        className=\"m-0 p-1 text-primary\"\n                                                        onClick={() => setShowModifyName({ state: true, companyId: company._id, companyName: company.name })}\n                                                    ><i className=\"fas fa-minus\"></i><i>  modify</i>\n                                                    </Button>\n                                                    <Button\n                                                        variant='ligth'\n                                                        className='m-0 p-1 btn text-danger'\n                                                        onClick={() => onClickDeleteHandler(company)}\n                                                    ><i className=\"fas fa-times\"></i><i>  Delete</i>\n                                                    </Button>\n                                                </Col></Row>\n                                            </td>\n                                            <td className='align-middle'>\n                                                <DisplayContact\n                                                    company={company}\n                                                    setShowAddContact={setShowAddContact}\n                                                    deleteContactHandler={deleteContactHandler}\n                                                />\n                                            </td>\n                                        </tr>\n                                    ))}\n                                </tbody>\n                            </Table>\n\n                        )}\n\n                    <Pagination>\n                        <Pagination.Prev\n                            onClick={() => setPageNumber(page - 1)}\n                            disabled={page === 1}\n                        />\n                        {[...Array(pages).keys()].map(x => (\n                            [0, 1, pages - 2, pages - 1].includes(x) ? (\n                                <Pagination.Item\n                                    key={x + 1}\n                                    active={x + 1 === page}\n                                    onClick={() => {\n                                        dispatch(getAllClients(keyword, x + 1, pageSize));\n                                        setPageNumber(x + 1);\n                                    }}\n                                >{x + 1}</Pagination.Item>\n                            ) : (pages > 4 && x === 2) && (\n                                <Pagination.Ellipsis key={x + 1} />\n                            )\n\n                        ))}\n                        <Pagination.Next\n                            onClick={() => setPageNumber(page + 1)}\n                            disabled={page === pages}\n                        />\n                    </Pagination>\n                </ListGroup.Item>\n            </DropDownTitleContainer>\n\n            <Modal show={showAddContact.state} onHide={() => setShowAddContact({state:false, companyId:'', companyName:\"\"})}>\n                <Modal.Header closeButton>\n                    <Modal.Title>{`New contact for: ${showAddContact.companyName}`}</Modal.Title>\n                </Modal.Header>\n\n                <Modal.Body>\n                    <Form>\n                        <Form.Group>\n                            <Form.Label>Name *</Form.Label>\n                            <Form.Control\n                                type='text'\n                                value={contactName && contactName}\n                                onChange={(e) => setContactName(e.target.value)}\n                            />\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>Email *</Form.Label>\n                            <Form.Control\n                                type='email'\n                                value={contactEmail && contactEmail}\n                                onChange={(e) => setContactEmail(e.target.value)}\n                            />\n                        </Form.Group>\n                        <Button type='submit' variant=\"primary\" onClick={(e) => addContactHandler(e, contactName, contactEmail, showAddContact.companyId)} disabled={!contactEmail || !contactName}>Create</Button>\n                    </Form>\n                    {message && <Message variant='danger'>{message}</Message>}\n                </Modal.Body>\n\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={() => setShowAddContact({state:false, companyId:'', companyName:\"\"})}>Close</Button>\n                </Modal.Footer>\n            </Modal>\n\n            <Modal show={showModifyName.state} onHide={() => setShowModifyName({state:false, companyId:'', companyName:\"\"})}>\n                <Modal.Header closeButton>\n                    <Modal.Title>{`Original name: ${showModifyName.companyName}`}</Modal.Title>\n                </Modal.Header>\n\n                <Modal.Body>\n                    <Form>\n                        <Form.Group>\n                            <Form.Label>New company name *</Form.Label>\n                            <Form.Control\n                                type='text'\n                                value={newCompanyName ? newCompanyName : showModifyName.companyName}\n                                onChange={(e) => setNewCompanyName(e.target.value)}\n                            />\n                        </Form.Group>\n                        <Button \n                            type='submit' \n                            variant=\"primary\" \n                            onClick={(e) => modifyCompanyNameHandler(e, showModifyName.companyId, newCompanyName)} \n                            disabled={!(newCompanyName && (newCompanyName !== showModifyName.companyName))}>Modify</Button>\n                    </Form>\n                </Modal.Body>\n\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={() => {\n                        setShowModifyName({ state: false, companyId: '', companyName: \"\" });\n                        setNewCompanyName('')\n                    }}>Close</Button>\n                </Modal.Footer>\n            </Modal>\n\n            <Modal show={showCreateCompany.state} onHide={() => setShowCreateCompany({state:false})}>\n                <Modal.Header closeButton>\n                    <Modal.Title>{`Create a company:`}</Modal.Title>\n                </Modal.Header>\n\n                <Modal.Body>\n                    <Form>\n                        <Form.Group>\n                            <Form.Label>New company name *</Form.Label>\n                            <Form.Control\n                                type='text'\n                                value={newCompanyName ? newCompanyName : showModifyName.companyName}\n                                onChange={(e) => setNewCompanyName(e.target.value)}\n                            />\n                        </Form.Group>\n\n                        <Form.Group>\n                            <Form.Label>First contact name</Form.Label>\n                            <Form.Control\n                                type='text'\n                                value={contactName ? contactName : ''}\n                                placeholder='Contact name'\n                                onChange={(e) => setContactName(e.target.value)}\n                            />\n                        </Form.Group>\n\n                        <Form.Group>\n                            <Form.Label>First contact email</Form.Label>\n                            <Form.Control\n                                type='email'\n                                value={contactEmail ? contactEmail : ''}\n                                placeholder='Contact email'\n                                onChange={(e) => setContactEmail(e.target.value)}\n                            />\n                        </Form.Group>\n                        \n                        <Button \n                            type='submit' \n                            variant=\"primary\" \n                            onClick={(e) => addCompanyHandler(e, newCompanyName, contactName, contactEmail)} \n                            disabled={!(newCompanyName )}>Create</Button>\n                    </Form>\n                </Modal.Body>\n\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={() => {\n                        setShowModifyName({ state: false, companyId: '', companyName: \"\" });\n                        setNewCompanyName('')\n                    }}>Close</Button>\n                </Modal.Footer>\n            </Modal>\n        </DisplayChildren>\n    )\n}\n\nconst DisplayContact = ({ company, setShowAddContact, deleteContactHandler }) => {\n\n    const [contacts] = useState(company.commercialTeam || []);\n\n    return (\n        <div>\n            {contacts.map((contact, incr) => (\n                <Row key={incr}>\n                    <Col>\n                        {`${contact.contactName} (${contact.contactEmail})`}\n                        <Button\n                            variant='ligth'\n                            className='ml-3 px-1 text-danger'\n                            onClick={() => deleteContactHandler(contact.contactEmail, company._id)}\n                        ><i className=\"fas fa-times\"></i></Button>\n                    </Col>\n                </Row>\n            ))}\n            <Row><Col className='text-left'>\n                <Button\n                    className='m-0 p-1 text-primary'\n                    variant='ligth'\n                    onClick={() => setShowAddContact({state:true, companyId:company._id, companyName:company.name})}\n                ><i className=\"fas fa-plus\"></i><i>  add a contact</i></Button>\n            </Col></Row>\n\n        </div>\n    )\n}\n\nexport default ManageCompaniesScreen\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ProgressBar from 'react-bootstrap/ProgressBar';\nimport Table from 'react-bootstrap/Table';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n//import Message from '../components/Message';\nimport Meta from '../components/Meta';\nimport { getContactsList, sendDecisionEmail } from '../actions/emailActions';\nimport Loader from '../components/Loader';\nimport { EMAIL_SEND_DECISION_RESET } from '../constants/emailConstants';\n\nconst EnvoyerMailsScreen = ({history}) => {\n\n    const dispatch = useDispatch();\n\n    const [contactList, setContactList] = useState([]);\n    const [messsagesSendSuccess, setMessagesSendSuccess] = useState(0);\n    const [messsagesSendError, setMessagesSendError] = useState(0);\n    const [totalToSend, setTotalToSend] = useState(0);\n    \n    const [massSending, setMassSending] = useState(false);\n    const [progress, setProgress] = useState(0);\n\n    const userLogin = useSelector(state => state.userLogin);\n    const { userInfo } = userLogin;\n\n    const contactsList = useSelector(state => state.contactsList);\n    const { loading, contacts } = contactsList;\n\n    const sendOneEmail = useSelector(state => state.sendOneEmail);\n    const { success, error, email } = sendOneEmail;\n\n    const sleep = (milliseconds) => {\n        const date = Date.now();\n        let currentDate = null;\n        do {\n            currentDate = Date.now();\n        } while (currentDate - date < milliseconds);\n    }\n\n    const handlerSendADecision = (email, name) => {\n        const newContactsInfo = contactList.slice();\n        for (let incr = 0 ; incr < newContactsInfo.length; incr++){\n            if(newContactsInfo[incr].email === email){\n                newContactsInfo[incr].status = 'loading'\n            }\n        }\n        setContactList(newContactsInfo);\n        dispatch(sendDecisionEmail(email, name))\n    }\n\n    const handlerSendAllDecisions = () => {\n        dispatch({ type: EMAIL_SEND_DECISION_RESET });\n        setProgress(0);\n        setMassSending(true);\n    }\n\n    useEffect(() => {\n        dispatch(getContactsList());\n    }, [dispatch]);\n\n    useEffect(() => {\n        if (contacts) {\n            setContactList(contacts.map(x => ({ ...x, status: 'not sent' })));\n            setTotalToSend(contacts.length);\n        }\n    }, [contacts]);\n\n    useEffect(() => {\n        if(massSending) {\n            if(contactList[progress].status !== 'send') {\n                //sleep(1000);\n                handlerSendADecision(contactList[progress].email, contactList[progress].name);\n            } else {\n                if(progress < contactList.length - 1){\n                    setProgress(progress+1);\n                }\n            }\n        }\n    // eslint-disable-next-line\n    },[massSending, progress]);\n\n    useEffect(() => {\n        if(success) {\n            const successEmail = email;\n            const newContactsInfo = contactList.slice();\n            for (let incr = 0; incr < newContactsInfo.length; incr++) {\n                if (newContactsInfo[incr].email === successEmail) {\n                    newContactsInfo[incr].status = 'send'\n                }\n            }\n            setContactList(newContactsInfo);\n\n            if (massSending){\n                if (progress < contactList.length - 1){\n                    setProgress(progress+1);\n                } else {\n                    setMassSending(false);\n                }\n            }\n        }\n    // eslint-disable-next-line\n    }, [success]);\n\n    useEffect(() => {\n        if(error) {\n            //console.log('error', error);\n            const errorEmail = error;\n            const newContactsInfo = contactList.slice();\n            for (let incr = 0; incr < newContactsInfo.length; incr++) {\n                if (newContactsInfo[incr].email === errorEmail) {\n                    newContactsInfo[incr].status = 'error';\n                }\n            }\n            setContactList(newContactsInfo);\n\n            if (massSending){\n                if (progress < contactList.length - 1){\n                    setProgress(progress+1);\n                } else {\n                    setMassSending(false);\n                    setProgress(0);\n                }\n            }\n        }\n    // eslint-disable-next-line\n    }, [error]);\n\n    useEffect(() => {\n        setMessagesSendSuccess(contactList.filter(x => x.status === 'send').length);\n        setMessagesSendError(contactList.filter(x => x.status === 'error').length);\n        setTotalToSend(contactList.length);\n    },[contactList, error, success]);\n\n    return (\n        <div>\n            <Meta />\n            {loading && <Loader />}\n            <Button\n                variant='primary'\n                onClick={() => history.go(-1)}\n            >Go Back</Button>\n            <Row className='align-items-center pt-3'>\n                <Col>\n                    {`${messsagesSendSuccess} messages send / ${totalToSend} - ${messsagesSendError} messages with error`}\n                </Col>\n                <Col className='text-right'>\n                    <Button\n                        variant='ligth'\n                        className='text-primary'\n                        onClick={() => handlerSendAllDecisions()}\n                    ><i className=\"fas fa-envelope\"></i> {massSending ? <Loader /> : 'Send all messages'}</Button>\n                </Col>\n            </Row>\n            <Row className='pt-3'>\n                <Col>\n                    <ProgressBar>\n                        <ProgressBar animated={massSending} now={100* messsagesSendSuccess / totalToSend} variant='primary' />\n                        <ProgressBar animated={massSending} now={100* messsagesSendError / totalToSend} variant='danger' />\n                    </ProgressBar>\n                </Col>\n            </Row>\n\n            <Row className='pt-3'>\n                <Col>\n                    <Table responsive hover striped className='mt-3'>\n                        <thead>\n                            <tr className='table-primary'>\n                                <th className='align-middle text-light text-center col-md-5'>Name</th>\n                                <th className='align-middle text-light text-center col-md-5'>Email</th>\n                                <th className='align-middle text-light text-center col-md-2'>status</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {contactList && contactList.map((contact, incr) => (\n                                <tr key={incr}>\n                                    <td className='align-middle text-center'>{contact.name ? contact.name : \"Unknown\"}</td>\n                                    <td className='align-middle text-center'>{contact.email}</td>\n                                    <td className='align-middle text-center'>\n                                        <Button\n                                            variant='ligth'\n                                            className={contact.status === 'error' ? 'text-danger' \n                                                        : contact.status === 'send' ? 'text-success'\n                                                        : 'text-primary'}\n                                            size='sm'\n                                            onClick={() => handlerSendADecision(contact.email, contact.name)}\n                                            disabled={contact.status === 'send' || massSending === true}\n                                        ><i className=\"fas fa-envelope\"></i>  \n                                            {contact.status === 'not sent' && '  send'}\n                                            {contact.status === 'loading' && <Loader />}\n                                            {contact.status === 'error' && '  Error send again'}\n                                            {contact.status === 'send' && '  sent'}\n                                        </Button>\n                                    </td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </Table>\n                </Col>\n            </Row>\n\n        </div>\n    )\n}\n\nexport default EnvoyerMailsScreen;\n","import axios from 'axios';\nimport { \n    EMAIL_CONTACTS_LIST_FAIL, \n    EMAIL_CONTACTS_LIST_REQUEST, \n    EMAIL_CONTACTS_LIST_SUCCESS, \n    EMAIL_SEND_DECISION_FAIL, \n    EMAIL_SEND_DECISION_REQUEST, \n    EMAIL_SEND_DECISION_SUCCESS\n} from '../constants/emailConstants';\n\nexport const getContactsList = () => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: EMAIL_CONTACTS_LIST_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers:{\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        const { data } = await axios.get(`/api/emails/contacts`, config);\n\n        dispatch({ type: EMAIL_CONTACTS_LIST_SUCCESS, payload: data });\n\n\n    } catch (error) {\n        dispatch({\n            type: EMAIL_CONTACTS_LIST_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};\n\nexport const sendDecisionEmail = (email, name) => async (dispatch, getState) => {\n\n    try {\n\n        dispatch({ type: EMAIL_SEND_DECISION_REQUEST });\n\n        const { userLogin: { userInfo } } = getState();\n\n        const config = {\n            headers:{\n                //'Content-type': 'Application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        };\n\n        const { data } = await axios.get(`/api/emails/decision?email=${email}&name=${name}`, config);\n\n        dispatch({ type: EMAIL_SEND_DECISION_SUCCESS, payload: data });\n\n\n    } catch (error) {\n        dispatch({\n            type: EMAIL_SEND_DECISION_FAIL,\n            payload: error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        });\n    }\n};","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Container from 'react-bootstrap/Container';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport LoginScreen from './screens/LoginScreen';\nimport PxxEditScreen from './screens/PxxEditScreen';\nimport ConsultantEditScreen from './screens/ConsultantEditScreen';\nimport ManageConsultantScreen from './screens/ManageConsultantScreen';\nimport ManageUsersScreen from './screens/ManageUsersScreen';\nimport UserEditScreen from './screens/UserEditScreen';\nimport RegisterScreen from './screens/RegisterScreen';\nimport DashboardScreen from './screens/DashboardScreen';\nimport StaffingEditScreen from './screens/StaffingEditScreen';\nimport ManageSkillsScreen from './screens/ManageSkillsScreen';\nimport PxxDetailsScreen from './screens/PxxDetailsScreen';\nimport ManageDealsScreen from './screens/ManageDealsScreen';\nimport DealsHistoryScreen from './screens/DealsHistoryScreen';\nimport AccessEditScreen from './screens/AccessEditScreen';\nimport ManageCompaniesScreen from './screens/ManageCompaniesScreen';\nimport EnvoyerMailsScreen from './screens/EnvoyerMailsScreen';\n\nconst App = () => {\n  return (\n    <Router>\n      <Header />\n      <main className='py-3'>\n        <Container>\n          <Route path='/login' component={LoginScreen} exact />\n          <Route path='/register' component={RegisterScreen} exact />\n          <Route path='/staffing' component={StaffingEditScreen} exact />\n          <Route path='/staffing/:id' component={StaffingEditScreen} exact />\n          <Route path='/pxx' component={PxxEditScreen} exact />\n          <Route path='/pxx/:id' component={PxxEditScreen} exact />\n          <Route path='/pxxdetails/:id' component={PxxDetailsScreen} exact />\n          <Route path='/editconsultant/:id' component={ConsultantEditScreen} exact />\n          <Route path='/admin/consultants' component={ManageConsultantScreen} exact />\n          <Route path='/admin/consultants/:keyword/page/:pageNumber' component={DashboardScreen} exact />\n          <Route path='/admin/users' component={ManageUsersScreen} exact />\n          <Route path='/admin/edituser/:id' component={UserEditScreen} exact />\n          <Route path='/admin/consultant/add' component={ConsultantEditScreen} exact />\n          <Route path='/admin/skills' component={ManageSkillsScreen} exact />\n          <Route path='/admin/deals' component={ManageDealsScreen} exact />\n          <Route path='/admin/deals/history' component={DealsHistoryScreen} exact />\n          <Route path='/admin/profils' component={AccessEditScreen} exact />\n          <Route path='/admin/companies' component={ManageCompaniesScreen} exact />\n          <Route path='/admin/send' component={EnvoyerMailsScreen} exact />\n          <Route path='/' component={DashboardScreen} exact />\n        </Container>\n      </main>\n      <Footer />\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport './bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n//window.React1 = require('react');\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}